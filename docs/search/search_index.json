{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Dimensions BigQuery Lab! This site and its related Github repository contain a collection of tutorials and queries showing how to carry out common research data analytics tasks using the Dimensions database on Google BigQuery (GBQ). Note Dimensions is a comprehensive database for the research & innovation ecosystem, used by governments, universities, businesses, funders and investors around the world. It is a structured, linked database containing trillions of data points about the research landscape, organized in tables e.g. research organizations, publications, patents, grants, clinical trials and more. You can use the structured code examples on this site to put together analyses for specific use cases e.g. Competitive intelligence Horizon-scanning & emerging trends Academic & industry partnerships and collaboration networks Key Opinion Leader (KOL) identification Recruitment & talent Performance & benchmarking Tracking funding dollar flows and citation patterns Social and economic impact of research Get started now, fast and for free If you haven\u2019t used Dimensions on BigQuery before, you can get started now for free. This video will show you how to set up Google cloud, run a query and do a visualization with our trial dataset - all in 5 minutes. Following the steps in the video above gives you access to our sandbox environment . This contains all Dimensions data related to COVID-19. It has the same data structure as the full Dimensions database and is updated on a daily basis. Note Access to the full Dimensions dataset on Google BigQuery is subscription-only : you or your organization needs to subscribe for you to gain access to the full dataset. Get in touch here . How to use this Lab The Lab is designed for learning and inspiration. It demonstrates how to query BigQuery according to best practices, how to work with the Dimensions data structure, and how to do core analytical tasks. As you become more experienced with the data, you will want to combine these building blocks into more complex analyses that answer your business or research questions. The materials in this Lab can be navigated sequentially, or you can use the search box above to enter a keyword and see matching documents. There are three main sections: The Tutorials section contains guides that focus on specific topics or use cases e.g. how to deal with a specific data type, or how to use GBQ in combination with other technologies. The Collections section contains thematic groupings of queries based on application scenarios (e.g. citation analysis). The Queries section is an archive of reusable SQL queries together with an explanation of what they do. Finding out more Find out more about Dimensions on BigQuery with the following resources: * The Dimensions BigQuery homepage is the place to start from if you\u2019ve never heard about Dimensions on GBQ. * The Dimensions on BigQuery official documentation contains detailed data model information, tutorials on how to sign up and how to access it using tools like Data Studio and Tableau. * The BigQuery Lab Github repository contains the source code for all the materials on this website, and more. Video tutorials The Dimensions YouTube channel contains various how-to videos like this one: Dimensions on Google BigQuery - what it is and how to get started with it : Changelog See the CHANGELOG.md file on Github.","title":"Home"},{"location":"#welcome-to-the-dimensions-bigquery-lab","text":"This site and its related Github repository contain a collection of tutorials and queries showing how to carry out common research data analytics tasks using the Dimensions database on Google BigQuery (GBQ). Note Dimensions is a comprehensive database for the research & innovation ecosystem, used by governments, universities, businesses, funders and investors around the world. It is a structured, linked database containing trillions of data points about the research landscape, organized in tables e.g. research organizations, publications, patents, grants, clinical trials and more. You can use the structured code examples on this site to put together analyses for specific use cases e.g. Competitive intelligence Horizon-scanning & emerging trends Academic & industry partnerships and collaboration networks Key Opinion Leader (KOL) identification Recruitment & talent Performance & benchmarking Tracking funding dollar flows and citation patterns Social and economic impact of research","title":"Welcome to the Dimensions BigQuery Lab!"},{"location":"#get-started-now-fast-and-for-free","text":"If you haven\u2019t used Dimensions on BigQuery before, you can get started now for free. This video will show you how to set up Google cloud, run a query and do a visualization with our trial dataset - all in 5 minutes. Following the steps in the video above gives you access to our sandbox environment . This contains all Dimensions data related to COVID-19. It has the same data structure as the full Dimensions database and is updated on a daily basis. Note Access to the full Dimensions dataset on Google BigQuery is subscription-only : you or your organization needs to subscribe for you to gain access to the full dataset. Get in touch here .","title":"Get started now, fast and for free"},{"location":"#how-to-use-this-lab","text":"The Lab is designed for learning and inspiration. It demonstrates how to query BigQuery according to best practices, how to work with the Dimensions data structure, and how to do core analytical tasks. As you become more experienced with the data, you will want to combine these building blocks into more complex analyses that answer your business or research questions. The materials in this Lab can be navigated sequentially, or you can use the search box above to enter a keyword and see matching documents. There are three main sections: The Tutorials section contains guides that focus on specific topics or use cases e.g. how to deal with a specific data type, or how to use GBQ in combination with other technologies. The Collections section contains thematic groupings of queries based on application scenarios (e.g. citation analysis). The Queries section is an archive of reusable SQL queries together with an explanation of what they do.","title":"How to use this Lab"},{"location":"#finding-out-more","text":"Find out more about Dimensions on BigQuery with the following resources: * The Dimensions BigQuery homepage is the place to start from if you\u2019ve never heard about Dimensions on GBQ. * The Dimensions on BigQuery official documentation contains detailed data model information, tutorials on how to sign up and how to access it using tools like Data Studio and Tableau. * The BigQuery Lab Github repository contains the source code for all the materials on this website, and more.","title":"Finding out more"},{"location":"#video-tutorials","text":"The Dimensions YouTube channel contains various how-to videos like this one: Dimensions on Google BigQuery - what it is and how to get started with it :","title":"Video tutorials"},{"location":"#changelog","text":"See the CHANGELOG.md file on Github.","title":"Changelog"},{"location":"collections/","text":"About The Collection section contains thematic groupings of queries based on common application scenarios. The source code of the queries and further explanations are available in the Queries section. Collections Publications Citations Authors Funding Note New queries and collections are added frequently, so watch this space or keep an eye on the CHANGELOG file on Github!","title":"About"},{"location":"collections/#about","text":"The Collection section contains thematic groupings of queries based on common application scenarios. The source code of the queries and further explanations are available in the Queries section.","title":"About"},{"location":"collections/#collections","text":"Publications Citations Authors Funding Note New queries and collections are added frequently, so watch this space or keep an eye on the CHANGELOG file on Github!","title":"Collections"},{"location":"collections/01-publications/","text":"Publications Number of publications added to Dimensions each month Number of Publications by Type Generate a list of publication categories by flattening/concatenating nested data Number of publications per SDG category Publications count per FoR category, total and percentage against total Finding articles matching a specific affiliation string Top publications by Altmetric score and research organization Select publications matching selected concepts Extracting complex publications records Finding Journals using string matching International collaboration of an organisation in a field International collaboration of a researcher with org and country context Researcher collaboration counts Institution collaboration counts Publication growth rate with sliding window Country-level publication activity over time","title":"Publications"},{"location":"collections/01-publications/#publications","text":"Number of publications added to Dimensions each month Number of Publications by Type Generate a list of publication categories by flattening/concatenating nested data Number of publications per SDG category Publications count per FoR category, total and percentage against total Finding articles matching a specific affiliation string Top publications by Altmetric score and research organization Select publications matching selected concepts Extracting complex publications records Finding Journals using string matching International collaboration of an organisation in a field International collaboration of a researcher with org and country context Researcher collaboration counts Institution collaboration counts Publication growth rate with sliding window Country-level publication activity over time","title":"Publications"},{"location":"collections/02-citations/","text":"Citations Top N publications by citations percentile One-degree citation network for a single publication Incoming citations by year Incoming citations by journal Citations by journal, for a specific publisher Outgoing citations from a journal Citing authors by country","title":"Citations"},{"location":"collections/02-citations/#citations","text":"Top N publications by citations percentile One-degree citation network for a single publication Incoming citations by year Incoming citations by journal Citations by journal, for a specific publisher Outgoing citations from a journal Citing authors by country","title":"Citations"},{"location":"collections/03-authors/","text":"Authors Generate a list of publication authors by flattening/concatenating nested data Count of corresponding authors by publisher Counting new vs recurring authors, for a specific journal International collaboration rate of individuals, with context","title":"Authors"},{"location":"collections/03-authors/#authors","text":"Generate a list of publication authors by flattening/concatenating nested data Count of corresponding authors by publisher Counting new vs recurring authors, for a specific journal International collaboration rate of individuals, with context","title":"Authors"},{"location":"collections/04-funding/","text":"Funding & Grants Grants of an organization Funding by journal","title":"Funding & Grants"},{"location":"collections/04-funding/#funding-grants","text":"Grants of an organization Funding by journal","title":"Funding &amp; Grants"},{"location":"queries/","text":"About Queries The Queries section is an archive of reusable SQL queries together with an explanation of how they work. You can navigate these contents sequentially, or simply use the search box at the top to find items of interest. Alternatively, you can find thematic groups of queries in the Collections section. Note The Google BigQuery official documentation website provides in-depth tutorials about SQL syntax.","title":"About Queries"},{"location":"queries/#about-queries","text":"The Queries section is an archive of reusable SQL queries together with an explanation of how they work. You can navigate these contents sequentially, or simply use the search box at the top to find items of interest. Alternatively, you can find thematic groups of queries in the Collections section. Note The Google BigQuery official documentation website provides in-depth tutorials about SQL syntax.","title":"About Queries"},{"location":"queries/01/","text":"1. Number of publications added to Dimensions each month Level: Easy This query is suitable for new users of Dimensions on Google BigQuery Description Counts the number of publications added to Dimensions each month, using the date_inserted field. Query SELECT DATE_TRUNC ( date_inserted , MONTH ) as date , COUNT ( id ) as countDim FROM ` dimensions - ai . data_analytics . publications ` GROUP BY date ORDER BY date DESC LIMIT 5 Breaking it down The DATETIME_TRUNC function is used here to \"round down\" the timestamps in the date_inserted field to the month level. Results [ { \"date\" : \"2021-04-01 00:00:00 UTC\" , \"countDim\" : \"458175\" }, { \"date\" : \"2021-03-01 00:00:00 UTC\" , \"countDim\" : \"746884\" }, { \"date\" : \"2021-02-01 00:00:00 UTC\" , \"countDim\" : \"661512\" }, { \"date\" : \"2021-01-01 00:00:00 UTC\" , \"countDim\" : \"687725\" }, { \"date\" : \"2020-12-01 00:00:00 UTC\" , \"countDim\" : \"828301\" } ]","title":"1. Number of publications added to Dimensions each month"},{"location":"queries/01/#1-number-of-publications-added-to-dimensions-each-month","text":"Level: Easy This query is suitable for new users of Dimensions on Google BigQuery","title":"1. Number of publications added to Dimensions each month"},{"location":"queries/01/#description","text":"Counts the number of publications added to Dimensions each month, using the date_inserted field.","title":"Description"},{"location":"queries/01/#query","text":"SELECT DATE_TRUNC ( date_inserted , MONTH ) as date , COUNT ( id ) as countDim FROM ` dimensions - ai . data_analytics . publications ` GROUP BY date ORDER BY date DESC LIMIT 5","title":"Query"},{"location":"queries/01/#breaking-it-down","text":"The DATETIME_TRUNC function is used here to \"round down\" the timestamps in the date_inserted field to the month level.","title":"Breaking it down"},{"location":"queries/01/#results","text":"[ { \"date\" : \"2021-04-01 00:00:00 UTC\" , \"countDim\" : \"458175\" }, { \"date\" : \"2021-03-01 00:00:00 UTC\" , \"countDim\" : \"746884\" }, { \"date\" : \"2021-02-01 00:00:00 UTC\" , \"countDim\" : \"661512\" }, { \"date\" : \"2021-01-01 00:00:00 UTC\" , \"countDim\" : \"687725\" }, { \"date\" : \"2020-12-01 00:00:00 UTC\" , \"countDim\" : \"828301\" } ]","title":"Results"},{"location":"queries/02/","text":"2. Number of Publications by Type Level: Easy This query is suitable for new users of Dimensions on Google BigQuery Description Each publication is classified into one of several \"types.\" This query counts how many have been classified as each type. Query SELECT COUNT ( id ) AS tot_articles , type FROM ` dimensions - ai . data_analytics . publications ` GROUP BY type ORDER BY tot_articles DESC Results [ { \"tot_articles\" : \"96627450\" , \"type\" : \"article\" }, { \"tot_articles\" : \"10781485\" , \"type\" : \"chapter\" }, { \"tot_articles\" : \"6527269\" , \"type\" : \"proceeding\" }, { \"tot_articles\" : \"2648537\" , \"type\" : \"preprint\" }, { \"tot_articles\" : \"795713\" , \"type\" : \"monograph\" }, { \"tot_articles\" : \"525722\" , \"type\" : \"book\" } ]","title":"2. Number of Publications by Type"},{"location":"queries/02/#2-number-of-publications-by-type","text":"Level: Easy This query is suitable for new users of Dimensions on Google BigQuery","title":"2. Number of Publications by Type"},{"location":"queries/02/#description","text":"Each publication is classified into one of several \"types.\" This query counts how many have been classified as each type.","title":"Description"},{"location":"queries/02/#query","text":"SELECT COUNT ( id ) AS tot_articles , type FROM ` dimensions - ai . data_analytics . publications ` GROUP BY type ORDER BY tot_articles DESC","title":"Query"},{"location":"queries/02/#results","text":"[ { \"tot_articles\" : \"96627450\" , \"type\" : \"article\" }, { \"tot_articles\" : \"10781485\" , \"type\" : \"chapter\" }, { \"tot_articles\" : \"6527269\" , \"type\" : \"proceeding\" }, { \"tot_articles\" : \"2648537\" , \"type\" : \"preprint\" }, { \"tot_articles\" : \"795713\" , \"type\" : \"monograph\" }, { \"tot_articles\" : \"525722\" , \"type\" : \"book\" } ]","title":"Results"},{"location":"queries/03/","text":"3. Generate a list of publication authors by flattening/concatenating nested data Level: Medium This query requires basic knowledge of SQL and the Dimensions data model Description This query returns a table with a single row. One field contains the Dimensions publication ID, and the other contains a string of all author names associated with the paper, separated by semicolons. For more details about working with nested fields, see the tutorial page on the topic . Example 3 in the tutorial deals with this query specifically. Query WITH author_array AS ( SELECT id , ARRAY ( SELECT CONCAT ( first_name , \" \" , last_name ) FROM UNNEST ( authors ) ) AS author_names FROM ` dimensions - ai . data_analytics . publications ` WHERE id = 'pub.1132070778' ) SELECT id , ARRAY_TO_STRING ( author_names , '; ' ) AS authors_list FROM author_array Results [ { \"id\" : \"pub.1132070778\" , \"authors_list\" : \"O Gr\u00e5n\u00e4s; A Mocellin; E S Cardoso; F Burmeister; C Caleman; O Bj\u00f6rneholm; A Naves de Brito\" } ]","title":"3. Generate a list of publication authors by flattening/concatenating nested data"},{"location":"queries/03/#3-generate-a-list-of-publication-authors-by-flatteningconcatenating-nested-data","text":"Level: Medium This query requires basic knowledge of SQL and the Dimensions data model","title":"3. Generate a list of publication authors by flattening/concatenating nested data"},{"location":"queries/03/#description","text":"This query returns a table with a single row. One field contains the Dimensions publication ID, and the other contains a string of all author names associated with the paper, separated by semicolons. For more details about working with nested fields, see the tutorial page on the topic . Example 3 in the tutorial deals with this query specifically.","title":"Description"},{"location":"queries/03/#query","text":"WITH author_array AS ( SELECT id , ARRAY ( SELECT CONCAT ( first_name , \" \" , last_name ) FROM UNNEST ( authors ) ) AS author_names FROM ` dimensions - ai . data_analytics . publications ` WHERE id = 'pub.1132070778' ) SELECT id , ARRAY_TO_STRING ( author_names , '; ' ) AS authors_list FROM author_array","title":"Query"},{"location":"queries/03/#results","text":"[ { \"id\" : \"pub.1132070778\" , \"authors_list\" : \"O Gr\u00e5n\u00e4s; A Mocellin; E S Cardoso; F Burmeister; C Caleman; O Bj\u00f6rneholm; A Naves de Brito\" } ]","title":"Results"},{"location":"queries/04/","text":"4. Generate a list of publication categories by flattening/concatenating nested data Level: Medium This query requires basic knowledge of SQL and the Dimensions data model Description This query returns a table with a single row. One field contains the Dimensions publication ID, and the other contains a string of all categories associated with the publication, separated by semicolons. It's very similar to the publication authors query . You may also be interested in the tutorial about working with nested fields . Query WITH categories AS ( SELECT id , ARRAY ( SELECT name FROM UNNEST ( category_for . first_level . FULL ) ) AS category_names FROM ` dimensions - ai . data_analytics . publications ` WHERE id = 'pub.1132070778' ) SELECT id , ARRAY_TO_STRING ( category_names , '; ' ) AS categories_list FROM categories Results [ { \"id\" : \"pub.1132070778\" , \"categories_list\" : \"Physical Sciences; Chemical Sciences\" } ]","title":"4. Generate a list of publication categories by flattening/concatenating nested data"},{"location":"queries/04/#4-generate-a-list-of-publication-categories-by-flatteningconcatenating-nested-data","text":"Level: Medium This query requires basic knowledge of SQL and the Dimensions data model","title":"4. Generate a list of publication categories by flattening/concatenating nested data"},{"location":"queries/04/#description","text":"This query returns a table with a single row. One field contains the Dimensions publication ID, and the other contains a string of all categories associated with the publication, separated by semicolons. It's very similar to the publication authors query . You may also be interested in the tutorial about working with nested fields .","title":"Description"},{"location":"queries/04/#query","text":"WITH categories AS ( SELECT id , ARRAY ( SELECT name FROM UNNEST ( category_for . first_level . FULL ) ) AS category_names FROM ` dimensions - ai . data_analytics . publications ` WHERE id = 'pub.1132070778' ) SELECT id , ARRAY_TO_STRING ( category_names , '; ' ) AS categories_list FROM categories","title":"Query"},{"location":"queries/04/#results","text":"[ { \"id\" : \"pub.1132070778\" , \"categories_list\" : \"Physical Sciences; Chemical Sciences\" } ]","title":"Results"},{"location":"queries/05/","text":"5. Number of publications per SDG category Level: Easy This query is suitable for new users of Dimensions on Google BigQuery Description Many publications in the Dimensions database are classified under Sustainable Development Goals (SDGs) . This query returns the top five most commonly applied SDG classifications and the total number of publications in each one. Query SELECT COUNT ( p . id ) AS tot , sdg . name FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( category_sdg . full ) sdg GROUP BY sdg . name ORDER BY tot DESC LIMIT 5 Breaking it down This query is short but wades through a complex data structure. While the author names query has to deal with an array of structs, this one has to parse a struct of arrays : Refer to the schema documentation for the details, but if we want to access the names of the SDG categories relevant to a single publication, we have to drill through multiple layers: The publications table uses a single row to represent a single publication. Publications with an SDG categorization have a struct in the category_sdg field with two keys: codes and full . We can access this by name, so category_sdg.full will give us the relevant entry for a publication. However, category_sdg.full is an array . Each entry in the category_sdg.full array is another struct, with three fields: code , id and name . We want the names. We can get through the first struct by getting the full field by name. From there, we need to do something more complex: CROSS JOIN UNNEST ( category_sdg . full ) sdg This line performs a cross join . The less-technical explanation for what happens here is that, since category_sdg.full is an array, using a cross join with the publications table creates a new field called sdg , and each row of the publications table is repeated, once for each value for sdg . A quick demonstration: WITHOUT UNNEST() : id category_sdg.full pub.123 sdg1, sdg2, sdg3 pub.987 sdg4, sdg1 WITH UNNEST() : id sdg pub.123 sdg1 pub.123 sdg2 pub.123 sdg3 pub.987 sdg4 pub.987 sdg1 So after this clause: CROSS JOIN UNNEST ( category_sdg . full ) sdg we have a new field, sdg , that has the nested fields associated with an individual SDG : code , id and name . Since we want name , that's what we refer to in the final query: SELECT COUNT ( p . id ) AS tot , sdg . name FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( category_sdg . full ) sdg GROUP BY sdg . name ORDER BY tot DESC LIMIT 5 We then count the number of IDs associated with each SDG name by using a GROUP BY clause. Results [ { \"tot\" : \"1577950\" , \"name\" : \"Affordable and Clean Energy\" }, { \"tot\" : \"1455575\" , \"name\" : \"Good Health and Well Being\" }, { \"tot\" : \"769875\" , \"name\" : \"Peace, Justice and Strong Institutions\" }, { \"tot\" : \"633369\" , \"name\" : \"Quality Education\" }, { \"tot\" : \"507003\" , \"name\" : \"Climate Action\" } ]","title":"5. Number of publications per SDG category"},{"location":"queries/05/#5-number-of-publications-per-sdg-category","text":"Level: Easy This query is suitable for new users of Dimensions on Google BigQuery","title":"5. Number of publications per SDG category"},{"location":"queries/05/#description","text":"Many publications in the Dimensions database are classified under Sustainable Development Goals (SDGs) . This query returns the top five most commonly applied SDG classifications and the total number of publications in each one.","title":"Description"},{"location":"queries/05/#query","text":"SELECT COUNT ( p . id ) AS tot , sdg . name FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( category_sdg . full ) sdg GROUP BY sdg . name ORDER BY tot DESC LIMIT 5","title":"Query"},{"location":"queries/05/#breaking-it-down","text":"This query is short but wades through a complex data structure. While the author names query has to deal with an array of structs, this one has to parse a struct of arrays : Refer to the schema documentation for the details, but if we want to access the names of the SDG categories relevant to a single publication, we have to drill through multiple layers: The publications table uses a single row to represent a single publication. Publications with an SDG categorization have a struct in the category_sdg field with two keys: codes and full . We can access this by name, so category_sdg.full will give us the relevant entry for a publication. However, category_sdg.full is an array . Each entry in the category_sdg.full array is another struct, with three fields: code , id and name . We want the names. We can get through the first struct by getting the full field by name. From there, we need to do something more complex: CROSS JOIN UNNEST ( category_sdg . full ) sdg This line performs a cross join . The less-technical explanation for what happens here is that, since category_sdg.full is an array, using a cross join with the publications table creates a new field called sdg , and each row of the publications table is repeated, once for each value for sdg . A quick demonstration: WITHOUT UNNEST() : id category_sdg.full pub.123 sdg1, sdg2, sdg3 pub.987 sdg4, sdg1 WITH UNNEST() : id sdg pub.123 sdg1 pub.123 sdg2 pub.123 sdg3 pub.987 sdg4 pub.987 sdg1 So after this clause: CROSS JOIN UNNEST ( category_sdg . full ) sdg we have a new field, sdg , that has the nested fields associated with an individual SDG : code , id and name . Since we want name , that's what we refer to in the final query: SELECT COUNT ( p . id ) AS tot , sdg . name FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( category_sdg . full ) sdg GROUP BY sdg . name ORDER BY tot DESC LIMIT 5 We then count the number of IDs associated with each SDG name by using a GROUP BY clause.","title":"Breaking it down"},{"location":"queries/05/#results","text":"[ { \"tot\" : \"1577950\" , \"name\" : \"Affordable and Clean Energy\" }, { \"tot\" : \"1455575\" , \"name\" : \"Good Health and Well Being\" }, { \"tot\" : \"769875\" , \"name\" : \"Peace, Justice and Strong Institutions\" }, { \"tot\" : \"633369\" , \"name\" : \"Quality Education\" }, { \"tot\" : \"507003\" , \"name\" : \"Climate Action\" } ]","title":"Results"},{"location":"queries/06/","text":"6. Publications count per FoR category, total and percentage against total Level: Advanced This query requires a good understanding of SQL and the Dimensions data model Description Many publications in the Dimensions database are classified under ANZSRC Field of Research codes . This query returns the total number of publications classified under each, plus the percentage of all publications in Dimensions with that classification. Query SELECT cat . name , COUNT ( p . id ) AS pubs_global , ROUND ( ( COUNT ( p . id ) * 100 / ( SELECT COUNT ( * ) FROM ` dimensions - ai . data_analytics . publications ` ) ), 2 ) AS pubs_global_pc FROM ` dimensions - ai . data_analytics . publications ` p , UNNEST ( category_for . first_level . full ) cat GROUP BY cat . name ORDER BY pubs_global_pc DESC , cat . name Breaking it down This query looks more complicated than it is. The main component could be summarized using this query: SELECT cat . name , COUNT ( p . id ) AS pubs_global FROM ` dimensions - ai . data_analytics . publications ` p , UNNEST ( category_for . first_level . full ) cat GROUP BY cat . name This query works exactly like the \"publications per SDG\" query , and there's a full breakdown there explaining how we unnest structs full of arrays full of structs. The main take-away is that we extract the names of all the first-level FOR codes, then count the number of publications listed under each one. That leaves only one more SELECT statement: ROUND ( ( COUNT ( p . id ) * 100 / ( SELECT COUNT ( * ) FROM ` dimensions - ai . data_analytics . publications ` ) ), 2 ) AS pubs_global_pc This piece of the query just counts how many total records are in the publications table: SELECT COUNT ( * ) FROM ` dimensions - ai . data_analytics . publications ` And this next piece of the query takes the total number of publications in a single classification and divides it by that total. The * 100 piece converts the decimal into a percentage: COUNT ( p . id ) * 100 / ( SELECT COUNT ( * ) FROM ` dimensions - ai . data_analytics . publications ` ) The outer-most call, to the ROUND() function, states that the function should return the percentage rounded to two decimal places. Results [ { \"name\" : \"Medical and Health Sciences\" , \"pubs_global\" : \"30145537\" , \"pubs_global_pc\" : \"25.49\" }, { \"name\" : \"Engineering\" , \"pubs_global\" : \"12388815\" , \"pubs_global_pc\" : \"10.48\" }, { \"name\" : \"Biological Sciences\" , \"pubs_global\" : \"9009961\" , \"pubs_global_pc\" : \"7.62\" }, { \"name\" : \"Chemical Sciences\" , \"pubs_global\" : \"7876669\" , \"pubs_global_pc\" : \"6.66\" }, { \"name\" : \"Physical Sciences\" , \"pubs_global\" : \"6149858\" , \"pubs_global_pc\" : \"5.2\" }, { \"name\" : \"Information and Computing Sciences\" , \"pubs_global\" : \"5236596\" , \"pubs_global_pc\" : \"4.43\" }, { \"name\" : \"Mathematical Sciences\" , \"pubs_global\" : \"5040655\" , \"pubs_global_pc\" : \"4.26\" }, { \"name\" : \"Psychology and Cognitive Sciences\" , \"pubs_global\" : \"3871992\" , \"pubs_global_pc\" : \"3.27\" }, { \"name\" : \"Studies in Human Society\" , \"pubs_global\" : \"3414299\" , \"pubs_global_pc\" : \"2.89\" }, { \"name\" : \"Language, Communication and Culture\" , \"pubs_global\" : \"2531296\" , \"pubs_global_pc\" : \"2.14\" }, { \"name\" : \"History and Archaeology\" , \"pubs_global\" : \"2357976\" , \"pubs_global_pc\" : \"1.99\" }, { \"name\" : \"Agricultural and Veterinary Sciences\" , \"pubs_global\" : \"2108659\" , \"pubs_global_pc\" : \"1.78\" }, { \"name\" : \"Earth Sciences\" , \"pubs_global\" : \"2059783\" , \"pubs_global_pc\" : \"1.74\" }, { \"name\" : \"Technology\" , \"pubs_global\" : \"1956256\" , \"pubs_global_pc\" : \"1.65\" }, { \"name\" : \"Commerce, Management, Tourism and Services\" , \"pubs_global\" : \"1830245\" , \"pubs_global_pc\" : \"1.55\" }, { \"name\" : \"Education\" , \"pubs_global\" : \"1838328\" , \"pubs_global_pc\" : \"1.55\" }, { \"name\" : \"Economics\" , \"pubs_global\" : \"1751713\" , \"pubs_global_pc\" : \"1.48\" }, { \"name\" : \"Philosophy and Religious Studies\" , \"pubs_global\" : \"1680088\" , \"pubs_global_pc\" : \"1.42\" }, { \"name\" : \"Environmental Sciences\" , \"pubs_global\" : \"1375226\" , \"pubs_global_pc\" : \"1.16\" }, { \"name\" : \"Law and Legal Studies\" , \"pubs_global\" : \"902366\" , \"pubs_global_pc\" : \"0.76\" }, { \"name\" : \"Studies in Creative Arts and Writing\" , \"pubs_global\" : \"644962\" , \"pubs_global_pc\" : \"0.55\" }, { \"name\" : \"Built Environment and Design\" , \"pubs_global\" : \"491404\" , \"pubs_global_pc\" : \"0.42\" } ]","title":"6. Publications count per FoR category, total and percentage against total"},{"location":"queries/06/#6-publications-count-per-for-category-total-and-percentage-against-total","text":"Level: Advanced This query requires a good understanding of SQL and the Dimensions data model","title":"6. Publications count per FoR category, total and percentage against total"},{"location":"queries/06/#description","text":"Many publications in the Dimensions database are classified under ANZSRC Field of Research codes . This query returns the total number of publications classified under each, plus the percentage of all publications in Dimensions with that classification.","title":"Description"},{"location":"queries/06/#query","text":"SELECT cat . name , COUNT ( p . id ) AS pubs_global , ROUND ( ( COUNT ( p . id ) * 100 / ( SELECT COUNT ( * ) FROM ` dimensions - ai . data_analytics . publications ` ) ), 2 ) AS pubs_global_pc FROM ` dimensions - ai . data_analytics . publications ` p , UNNEST ( category_for . first_level . full ) cat GROUP BY cat . name ORDER BY pubs_global_pc DESC , cat . name","title":"Query"},{"location":"queries/06/#breaking-it-down","text":"This query looks more complicated than it is. The main component could be summarized using this query: SELECT cat . name , COUNT ( p . id ) AS pubs_global FROM ` dimensions - ai . data_analytics . publications ` p , UNNEST ( category_for . first_level . full ) cat GROUP BY cat . name This query works exactly like the \"publications per SDG\" query , and there's a full breakdown there explaining how we unnest structs full of arrays full of structs. The main take-away is that we extract the names of all the first-level FOR codes, then count the number of publications listed under each one. That leaves only one more SELECT statement: ROUND ( ( COUNT ( p . id ) * 100 / ( SELECT COUNT ( * ) FROM ` dimensions - ai . data_analytics . publications ` ) ), 2 ) AS pubs_global_pc This piece of the query just counts how many total records are in the publications table: SELECT COUNT ( * ) FROM ` dimensions - ai . data_analytics . publications ` And this next piece of the query takes the total number of publications in a single classification and divides it by that total. The * 100 piece converts the decimal into a percentage: COUNT ( p . id ) * 100 / ( SELECT COUNT ( * ) FROM ` dimensions - ai . data_analytics . publications ` ) The outer-most call, to the ROUND() function, states that the function should return the percentage rounded to two decimal places.","title":"Breaking it down"},{"location":"queries/06/#results","text":"[ { \"name\" : \"Medical and Health Sciences\" , \"pubs_global\" : \"30145537\" , \"pubs_global_pc\" : \"25.49\" }, { \"name\" : \"Engineering\" , \"pubs_global\" : \"12388815\" , \"pubs_global_pc\" : \"10.48\" }, { \"name\" : \"Biological Sciences\" , \"pubs_global\" : \"9009961\" , \"pubs_global_pc\" : \"7.62\" }, { \"name\" : \"Chemical Sciences\" , \"pubs_global\" : \"7876669\" , \"pubs_global_pc\" : \"6.66\" }, { \"name\" : \"Physical Sciences\" , \"pubs_global\" : \"6149858\" , \"pubs_global_pc\" : \"5.2\" }, { \"name\" : \"Information and Computing Sciences\" , \"pubs_global\" : \"5236596\" , \"pubs_global_pc\" : \"4.43\" }, { \"name\" : \"Mathematical Sciences\" , \"pubs_global\" : \"5040655\" , \"pubs_global_pc\" : \"4.26\" }, { \"name\" : \"Psychology and Cognitive Sciences\" , \"pubs_global\" : \"3871992\" , \"pubs_global_pc\" : \"3.27\" }, { \"name\" : \"Studies in Human Society\" , \"pubs_global\" : \"3414299\" , \"pubs_global_pc\" : \"2.89\" }, { \"name\" : \"Language, Communication and Culture\" , \"pubs_global\" : \"2531296\" , \"pubs_global_pc\" : \"2.14\" }, { \"name\" : \"History and Archaeology\" , \"pubs_global\" : \"2357976\" , \"pubs_global_pc\" : \"1.99\" }, { \"name\" : \"Agricultural and Veterinary Sciences\" , \"pubs_global\" : \"2108659\" , \"pubs_global_pc\" : \"1.78\" }, { \"name\" : \"Earth Sciences\" , \"pubs_global\" : \"2059783\" , \"pubs_global_pc\" : \"1.74\" }, { \"name\" : \"Technology\" , \"pubs_global\" : \"1956256\" , \"pubs_global_pc\" : \"1.65\" }, { \"name\" : \"Commerce, Management, Tourism and Services\" , \"pubs_global\" : \"1830245\" , \"pubs_global_pc\" : \"1.55\" }, { \"name\" : \"Education\" , \"pubs_global\" : \"1838328\" , \"pubs_global_pc\" : \"1.55\" }, { \"name\" : \"Economics\" , \"pubs_global\" : \"1751713\" , \"pubs_global_pc\" : \"1.48\" }, { \"name\" : \"Philosophy and Religious Studies\" , \"pubs_global\" : \"1680088\" , \"pubs_global_pc\" : \"1.42\" }, { \"name\" : \"Environmental Sciences\" , \"pubs_global\" : \"1375226\" , \"pubs_global_pc\" : \"1.16\" }, { \"name\" : \"Law and Legal Studies\" , \"pubs_global\" : \"902366\" , \"pubs_global_pc\" : \"0.76\" }, { \"name\" : \"Studies in Creative Arts and Writing\" , \"pubs_global\" : \"644962\" , \"pubs_global_pc\" : \"0.55\" }, { \"name\" : \"Built Environment and Design\" , \"pubs_global\" : \"491404\" , \"pubs_global_pc\" : \"0.42\" } ]","title":"Results"},{"location":"queries/07/","text":"7. Finding Journals using string matching Level: Easy This query is suitable for new users of Dimensions on Google BigQuery Description Returns data on how many publications have been published by journals that include a set of characters in the journal's title. Each row contains basic metadata about a single journal, plus a count of total publications indexed by Dimensions. Query SELECT COUNT ( id ) AS pubs , journal . id , journal . title , journal . issn , journal . eissn , publisher . name FROM ` dimensions - ai . data_analytics . publications ` WHERE LOWER ( journal . title ) LIKE '%medicine%' GROUP BY 2 , 3 , 4 , 5 , 6 ORDER BY pubs DESC LIMIT 20 Breaking it down WHERE LOWER(journal.title) LIKE '%medicine%' is a trick to do a case-insensitive substring search: LIKE '%medicine%' searches for any string that contains the characters medicine , in that order; the % characters indicate any other characters can show up on either side. Using LOWER(journal.title) here converts the entire journal title to lowercase before doing the string comparison , which means \"Medicine\" will be a match, as will \"MEDICINE,\" \"medicine,\" and so on. Results [ { \"pubs\" : \"168838\" , \"id\" : \"jour.1014075\" , \"title\" : \"New England Journal of Medicine\" , \"issn\" : \"0028-4793\" , \"eissn\" : \"1533-4406\" , \"name\" : \"Massachusetts Medical Society\" }, { \"pubs\" : \"84137\" , \"id\" : \"jour.1011551\" , \"title\" : \"Medicine & Science in Sports & Exercise\" , \"issn\" : \"0195-9131\" , \"eissn\" : \"1530-0315\" , \"name\" : \"Wolters Kluwer\" }, { \"pubs\" : \"58776\" , \"id\" : \"jour.1017222\" , \"title\" : \"Annals of Internal Medicine\" , \"issn\" : \"0003-4819\" , \"eissn\" : \"1539-3704\" , \"name\" : \"American College of Physicians\" }, { \"pubs\" : \"52827\" , \"id\" : \"jour.1312267\" , \"title\" : \"Journal of the Royal Society of Medicine\" , \"issn\" : \"0141-0768\" , \"eissn\" : \"1758-1095\" , \"name\" : \"SAGE Publications\" }, { \"pubs\" : \"52384\" , \"id\" : \"jour.1017256\" , \"title\" : \"JAMA Internal Medicine\" , \"issn\" : \"2168-6106\" , \"eissn\" : \"2168-6114\" , \"name\" : \"American Medical Association (AMA)\" }, { \"pubs\" : \"47157\" , \"id\" : \"jour.1027092\" , \"title\" : \"Experimental Biology and Medicine\" , \"issn\" : \"1535-3702\" , \"eissn\" : \"1535-3699\" , \"name\" : \"SAGE Publications\" }, { \"pubs\" : \"46459\" , \"id\" : \"jour.1016342\" , \"title\" : \"Critical Care Medicine\" , \"issn\" : \"0090-3493\" , \"eissn\" : \"1530-0293\" , \"name\" : \"Wolters Kluwer\" }, { \"pubs\" : \"37666\" , \"id\" : \"jour.1057918\" , \"title\" : \"Journal of Molecular Medicine\" , \"issn\" : \"0946-2716\" , \"eissn\" : \"1432-1440\" , \"name\" : \"Springer Nature\" }, { \"pubs\" : \"34891\" , \"id\" : \"jour.1017275\" , \"title\" : \"Arizona Medicine\" , \"issn\" : \"0093-0415\" , \"eissn\" : \"1476-2978\" , \"name\" : null }, { \"pubs\" : \"31166\" , \"id\" : \"jour.1014535\" , \"title\" : \"The American Journal of Medicine\" , \"issn\" : \"0002-9343\" , \"eissn\" : \"1555-7162\" , \"name\" : \"Elsevier\" }, { \"pubs\" : \"29793\" , \"id\" : \"jour.1017863\" , \"title\" : \"Oral Surgery Oral Medicine Oral Pathology and Oral Radiology\" , \"issn\" : \"2212-4403\" , \"eissn\" : \"2212-4411\" , \"name\" : \"Elsevier\" }, { \"pubs\" : \"28529\" , \"id\" : \"jour.1090935\" , \"title\" : \"Annals of Emergency Medicine\" , \"issn\" : \"0196-0644\" , \"eissn\" : \"1097-6760\" , \"name\" : \"Elsevier\" }, { \"pubs\" : \"27453\" , \"id\" : \"jour.1077253\" , \"title\" : \"Medicine\" , \"issn\" : \"0025-7974\" , \"eissn\" : \"1536-5964\" , \"name\" : \"Wolters Kluwer\" }, { \"pubs\" : \"25713\" , \"id\" : \"jour.1017316\" , \"title\" : \"Bulletin of Experimental Biology and Medicine\" , \"issn\" : \"0007-4888\" , \"eissn\" : \"1573-8221\" , \"name\" : \"Springer Nature\" }, { \"pubs\" : \"24861\" , \"id\" : \"jour.1077126\" , \"title\" : \"Journal of Experimental Medicine\" , \"issn\" : \"0022-1007\" , \"eissn\" : \"1540-9538\" , \"name\" : \"Rockefeller University Press\" }, { \"pubs\" : \"24370\" , \"id\" : \"jour.1319882\" , \"title\" : \"Journal of Internal Medicine\" , \"issn\" : \"0954-6820\" , \"eissn\" : \"1365-2796\" , \"name\" : \"Wiley\" }, { \"pubs\" : \"23679\" , \"id\" : \"jour.1017748\" , \"title\" : \"Academic Medicine\" , \"issn\" : \"1040-2446\" , \"eissn\" : \"1938-808X\" , \"name\" : \"Wolters Kluwer\" }, { \"pubs\" : \"22723\" , \"id\" : \"jour.1017031\" , \"title\" : \"American Journal of Respiratory and Critical Care Medicine\" , \"issn\" : \"1073-449X\" , \"eissn\" : \"1535-4970\" , \"name\" : \"American Thoracic Society\" }, { \"pubs\" : \"22340\" , \"id\" : \"jour.1036793\" , \"title\" : \"Military Medicine\" , \"issn\" : \"0026-4075\" , \"eissn\" : \"1930-613X\" , \"name\" : \"Oxford University Press (OUP)\" }, { \"pubs\" : \"21837\" , \"id\" : \"jour.1017021\" , \"title\" : \"American Journal of Tropical Medicine and Hygiene\" , \"issn\" : \"0002-9637\" , \"eissn\" : \"1476-1645\" , \"name\" : \"American Society of Tropical Medicine and Hygiene\" } ]","title":"7. Finding Journals using string matching"},{"location":"queries/07/#7-finding-journals-using-string-matching","text":"Level: Easy This query is suitable for new users of Dimensions on Google BigQuery","title":"7. Finding Journals using string matching"},{"location":"queries/07/#description","text":"Returns data on how many publications have been published by journals that include a set of characters in the journal's title. Each row contains basic metadata about a single journal, plus a count of total publications indexed by Dimensions.","title":"Description"},{"location":"queries/07/#query","text":"SELECT COUNT ( id ) AS pubs , journal . id , journal . title , journal . issn , journal . eissn , publisher . name FROM ` dimensions - ai . data_analytics . publications ` WHERE LOWER ( journal . title ) LIKE '%medicine%' GROUP BY 2 , 3 , 4 , 5 , 6 ORDER BY pubs DESC LIMIT 20","title":"Query"},{"location":"queries/07/#breaking-it-down","text":"WHERE LOWER(journal.title) LIKE '%medicine%' is a trick to do a case-insensitive substring search: LIKE '%medicine%' searches for any string that contains the characters medicine , in that order; the % characters indicate any other characters can show up on either side. Using LOWER(journal.title) here converts the entire journal title to lowercase before doing the string comparison , which means \"Medicine\" will be a match, as will \"MEDICINE,\" \"medicine,\" and so on.","title":"Breaking it down"},{"location":"queries/07/#results","text":"[ { \"pubs\" : \"168838\" , \"id\" : \"jour.1014075\" , \"title\" : \"New England Journal of Medicine\" , \"issn\" : \"0028-4793\" , \"eissn\" : \"1533-4406\" , \"name\" : \"Massachusetts Medical Society\" }, { \"pubs\" : \"84137\" , \"id\" : \"jour.1011551\" , \"title\" : \"Medicine & Science in Sports & Exercise\" , \"issn\" : \"0195-9131\" , \"eissn\" : \"1530-0315\" , \"name\" : \"Wolters Kluwer\" }, { \"pubs\" : \"58776\" , \"id\" : \"jour.1017222\" , \"title\" : \"Annals of Internal Medicine\" , \"issn\" : \"0003-4819\" , \"eissn\" : \"1539-3704\" , \"name\" : \"American College of Physicians\" }, { \"pubs\" : \"52827\" , \"id\" : \"jour.1312267\" , \"title\" : \"Journal of the Royal Society of Medicine\" , \"issn\" : \"0141-0768\" , \"eissn\" : \"1758-1095\" , \"name\" : \"SAGE Publications\" }, { \"pubs\" : \"52384\" , \"id\" : \"jour.1017256\" , \"title\" : \"JAMA Internal Medicine\" , \"issn\" : \"2168-6106\" , \"eissn\" : \"2168-6114\" , \"name\" : \"American Medical Association (AMA)\" }, { \"pubs\" : \"47157\" , \"id\" : \"jour.1027092\" , \"title\" : \"Experimental Biology and Medicine\" , \"issn\" : \"1535-3702\" , \"eissn\" : \"1535-3699\" , \"name\" : \"SAGE Publications\" }, { \"pubs\" : \"46459\" , \"id\" : \"jour.1016342\" , \"title\" : \"Critical Care Medicine\" , \"issn\" : \"0090-3493\" , \"eissn\" : \"1530-0293\" , \"name\" : \"Wolters Kluwer\" }, { \"pubs\" : \"37666\" , \"id\" : \"jour.1057918\" , \"title\" : \"Journal of Molecular Medicine\" , \"issn\" : \"0946-2716\" , \"eissn\" : \"1432-1440\" , \"name\" : \"Springer Nature\" }, { \"pubs\" : \"34891\" , \"id\" : \"jour.1017275\" , \"title\" : \"Arizona Medicine\" , \"issn\" : \"0093-0415\" , \"eissn\" : \"1476-2978\" , \"name\" : null }, { \"pubs\" : \"31166\" , \"id\" : \"jour.1014535\" , \"title\" : \"The American Journal of Medicine\" , \"issn\" : \"0002-9343\" , \"eissn\" : \"1555-7162\" , \"name\" : \"Elsevier\" }, { \"pubs\" : \"29793\" , \"id\" : \"jour.1017863\" , \"title\" : \"Oral Surgery Oral Medicine Oral Pathology and Oral Radiology\" , \"issn\" : \"2212-4403\" , \"eissn\" : \"2212-4411\" , \"name\" : \"Elsevier\" }, { \"pubs\" : \"28529\" , \"id\" : \"jour.1090935\" , \"title\" : \"Annals of Emergency Medicine\" , \"issn\" : \"0196-0644\" , \"eissn\" : \"1097-6760\" , \"name\" : \"Elsevier\" }, { \"pubs\" : \"27453\" , \"id\" : \"jour.1077253\" , \"title\" : \"Medicine\" , \"issn\" : \"0025-7974\" , \"eissn\" : \"1536-5964\" , \"name\" : \"Wolters Kluwer\" }, { \"pubs\" : \"25713\" , \"id\" : \"jour.1017316\" , \"title\" : \"Bulletin of Experimental Biology and Medicine\" , \"issn\" : \"0007-4888\" , \"eissn\" : \"1573-8221\" , \"name\" : \"Springer Nature\" }, { \"pubs\" : \"24861\" , \"id\" : \"jour.1077126\" , \"title\" : \"Journal of Experimental Medicine\" , \"issn\" : \"0022-1007\" , \"eissn\" : \"1540-9538\" , \"name\" : \"Rockefeller University Press\" }, { \"pubs\" : \"24370\" , \"id\" : \"jour.1319882\" , \"title\" : \"Journal of Internal Medicine\" , \"issn\" : \"0954-6820\" , \"eissn\" : \"1365-2796\" , \"name\" : \"Wiley\" }, { \"pubs\" : \"23679\" , \"id\" : \"jour.1017748\" , \"title\" : \"Academic Medicine\" , \"issn\" : \"1040-2446\" , \"eissn\" : \"1938-808X\" , \"name\" : \"Wolters Kluwer\" }, { \"pubs\" : \"22723\" , \"id\" : \"jour.1017031\" , \"title\" : \"American Journal of Respiratory and Critical Care Medicine\" , \"issn\" : \"1073-449X\" , \"eissn\" : \"1535-4970\" , \"name\" : \"American Thoracic Society\" }, { \"pubs\" : \"22340\" , \"id\" : \"jour.1036793\" , \"title\" : \"Military Medicine\" , \"issn\" : \"0026-4075\" , \"eissn\" : \"1930-613X\" , \"name\" : \"Oxford University Press (OUP)\" }, { \"pubs\" : \"21837\" , \"id\" : \"jour.1017021\" , \"title\" : \"American Journal of Tropical Medicine and Hygiene\" , \"issn\" : \"0002-9637\" , \"eissn\" : \"1476-1645\" , \"name\" : \"American Society of Tropical Medicine and Hygiene\" } ]","title":"Results"},{"location":"queries/08/","text":"8. Finding articles matching a specific affiliation string Level: Medium This query requires basic knowledge of SQL and the Dimensions data model Description This query returns a list of publications and affiliations associated with a single institution. Each line represents a single affiliation string, and includes the publication ID, the institution ID, and the affiliation string as reported by the journal. Results are filtered to include only a single institution, specified by GRID ID ( grid.69566.3a ), and affiliation strings that include the phrase \"school of medicine\" . For more details about working with nested fields, see the tutorial page on the topic . Query SELECT p . id , aff . grid_id , aff . raw_affiliation FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( authors ) auth CROSS JOIN UNNEST ( auth . affiliations_address ) aff WHERE year = 2020 AND aff . grid_id = \"grid.69566.3a\" -- Sendai, Japan AND LOWER ( aff . raw_affiliation ) LIKE \"%school of medicine%\" Results [ { \"id\" : \"pub.1120198400\" , \"grid_id\" : \"grid.69566.3a\" , \"raw_affiliation\" : \"Department of Neurosurgery, Tohoku University Graduate School of Medicine, Sendai, Miyagi, Japan\" }, { \"id\" : \"pub.1117164397\" , \"grid_id\" : \"grid.69566.3a\" , \"raw_affiliation\" : \"Division of Cardiovascular Surgery, Tohoku University Graduate School of Medicine, 1-1 Seiryo-machi, Aoba-ku, Sendai, Miyagi, Japan.\" }, { \"id\" : \"pub.1120113207\" , \"grid_id\" : \"grid.69566.3a\" , \"raw_affiliation\" : \"Division of Internal Medicine and Hypertension Unit Division of Cardiology, Department of Medical Sciences, University of Torino, Torino Division of Internal Medicine, Department of Medicine, University of Udine, Udine, Italy Division of Clinical Hypertension, Endocrinology and Metabolism, Tohoku University Graduate School of Medicine, Sendai, Japan.\" }, { \"id\" : \"pub.1119863526\" , \"grid_id\" : \"grid.69566.3a\" , \"raw_affiliation\" : \"Division of Emergency and Critical Care Medicine, Tohoku University Graduate School of Medicine, Japan.\" }, // many thousands more records... ] 8.1 Variant: get unique publication records with affiliation count SELECT COUNT ( aff ) AS matching_affiliations , id , title . preferred AS title FROM ` dimensions - ai . data_analytics . publications ` , UNNEST ( authors ) auth , UNNEST ( auth . affiliations_address ) AS aff WHERE year = 2020 AND aff . grid_id = \"grid.69566.3a\" AND LOWER ( aff . raw_affiliation ) LIKE \"%school of medicine%\" GROUP BY id , title Results from variant [ { \"matching_affiliations\" : \"3\" , \"id\" : \"pub.1123153684\" , \"title\" : \"Management following endoscopic resection in elderly patients with early\u2010stage upper gastrointestinal neoplasia\" }, { \"matching_affiliations\" : \"1\" , \"id\" : \"pub.1124283456\" , \"title\" : \"Unique Sex Steroid Profiles in Estrogen-Producing Adrenocortical Adenoma Associated with Bilateral Hyperaldosteronism\" }, { \"matching_affiliations\" : \"5\" , \"id\" : \"pub.1124295695\" , \"title\" : \"Clinical implication of myocardial FDG uptake pattern in oncologic PET: retrospective comparison study with stress myocardial perfusion imaging as the reference standard\" }, { \"matching_affiliations\" : \"7\" , \"id\" : \"pub.1124238412\" , \"title\" : \"Keap1 deletion accelerates mutant K-ras/p53-driven cholangiocarcinoma\" }, // many more results... ]","title":"8. Finding articles matching a specific affiliation string"},{"location":"queries/08/#8-finding-articles-matching-a-specific-affiliation-string","text":"Level: Medium This query requires basic knowledge of SQL and the Dimensions data model","title":"8. Finding articles matching a specific affiliation string"},{"location":"queries/08/#description","text":"This query returns a list of publications and affiliations associated with a single institution. Each line represents a single affiliation string, and includes the publication ID, the institution ID, and the affiliation string as reported by the journal. Results are filtered to include only a single institution, specified by GRID ID ( grid.69566.3a ), and affiliation strings that include the phrase \"school of medicine\" . For more details about working with nested fields, see the tutorial page on the topic .","title":"Description"},{"location":"queries/08/#query","text":"SELECT p . id , aff . grid_id , aff . raw_affiliation FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( authors ) auth CROSS JOIN UNNEST ( auth . affiliations_address ) aff WHERE year = 2020 AND aff . grid_id = \"grid.69566.3a\" -- Sendai, Japan AND LOWER ( aff . raw_affiliation ) LIKE \"%school of medicine%\"","title":"Query"},{"location":"queries/08/#results","text":"[ { \"id\" : \"pub.1120198400\" , \"grid_id\" : \"grid.69566.3a\" , \"raw_affiliation\" : \"Department of Neurosurgery, Tohoku University Graduate School of Medicine, Sendai, Miyagi, Japan\" }, { \"id\" : \"pub.1117164397\" , \"grid_id\" : \"grid.69566.3a\" , \"raw_affiliation\" : \"Division of Cardiovascular Surgery, Tohoku University Graduate School of Medicine, 1-1 Seiryo-machi, Aoba-ku, Sendai, Miyagi, Japan.\" }, { \"id\" : \"pub.1120113207\" , \"grid_id\" : \"grid.69566.3a\" , \"raw_affiliation\" : \"Division of Internal Medicine and Hypertension Unit Division of Cardiology, Department of Medical Sciences, University of Torino, Torino Division of Internal Medicine, Department of Medicine, University of Udine, Udine, Italy Division of Clinical Hypertension, Endocrinology and Metabolism, Tohoku University Graduate School of Medicine, Sendai, Japan.\" }, { \"id\" : \"pub.1119863526\" , \"grid_id\" : \"grid.69566.3a\" , \"raw_affiliation\" : \"Division of Emergency and Critical Care Medicine, Tohoku University Graduate School of Medicine, Japan.\" }, // many thousands more records... ]","title":"Results"},{"location":"queries/08/#81-variant-get-unique-publication-records-with-affiliation-count","text":"SELECT COUNT ( aff ) AS matching_affiliations , id , title . preferred AS title FROM ` dimensions - ai . data_analytics . publications ` , UNNEST ( authors ) auth , UNNEST ( auth . affiliations_address ) AS aff WHERE year = 2020 AND aff . grid_id = \"grid.69566.3a\" AND LOWER ( aff . raw_affiliation ) LIKE \"%school of medicine%\" GROUP BY id , title","title":"8.1 Variant: get unique publication records with affiliation count"},{"location":"queries/08/#results-from-variant","text":"[ { \"matching_affiliations\" : \"3\" , \"id\" : \"pub.1123153684\" , \"title\" : \"Management following endoscopic resection in elderly patients with early\u2010stage upper gastrointestinal neoplasia\" }, { \"matching_affiliations\" : \"1\" , \"id\" : \"pub.1124283456\" , \"title\" : \"Unique Sex Steroid Profiles in Estrogen-Producing Adrenocortical Adenoma Associated with Bilateral Hyperaldosteronism\" }, { \"matching_affiliations\" : \"5\" , \"id\" : \"pub.1124295695\" , \"title\" : \"Clinical implication of myocardial FDG uptake pattern in oncologic PET: retrospective comparison study with stress myocardial perfusion imaging as the reference standard\" }, { \"matching_affiliations\" : \"7\" , \"id\" : \"pub.1124238412\" , \"title\" : \"Keap1 deletion accelerates mutant K-ras/p53-driven cholangiocarcinoma\" }, // many more results... ]","title":"Results from variant"},{"location":"queries/09/","text":"9. Top publications by Altmetric score and research organization Level: Easy This query is suitable for new users of Dimensions on Google BigQuery Description Retrieve publications for a selected research organization (using its GRID identifier ) and sort them using their Altmetric Attention Score. Query SELECT id , title . preferred as title , ARRAY_LENGTH ( authors ) as authors , -- include number of authors altmetrics . score as altmetrics_score FROM ` dimensions - ai . data_analytics . publications ` WHERE year = 2020 AND 'grid.4991.5' in UNNEST ( research_orgs ) -- a sample grid ID ORDER BY altmetrics . score DESC LIMIT 5 -- Get top 5 only Results [ { \"id\" : \"pub.1130340155\" , \"title\" : \"Two metres or one: what is the evidence for physical distancing in covid-19?\" , \"authors\" : \"6\" , \"altmetrics_score\" : \"15978\" }, { \"id\" : \"pub.1129493369\" , \"title\" : \"Safety and immunogenicity of the ChAdOx1 nCoV-19 vaccine against SARS-CoV-2: a preliminary report of a phase 1/2, single-blind, randomised controlled trial\" , \"authors\" : \"366\" , \"altmetrics_score\" : \"15612\" }, { \"id\" : \"pub.1133359801\" , \"title\" : \"Safety and efficacy of the ChAdOx1 nCoV-19 vaccine (AZD1222) against SARS-CoV-2: an interim analysis of four randomised controlled trials in Brazil, South Africa, and the UK\" , \"authors\" : \"766\" , \"altmetrics_score\" : \"12292\" }, { \"id\" : \"pub.1127239818\" , \"title\" : \"Remdesivir in adults with severe COVID-19: a randomised, double-blind, placebo-controlled, multicentre trial\" , \"authors\" : \"46\" , \"altmetrics_score\" : \"12036\" }, { \"id\" : \"pub.1131721397\" , \"title\" : \"Scientific consensus on the COVID-19 pandemic: we need to act now\" , \"authors\" : \"31\" , \"altmetrics_score\" : \"10534\" } ]","title":"9. Top publications by Altmetric score and research organization"},{"location":"queries/09/#9-top-publications-by-altmetric-score-and-research-organization","text":"Level: Easy This query is suitable for new users of Dimensions on Google BigQuery","title":"9. Top publications by Altmetric score and research organization"},{"location":"queries/09/#description","text":"Retrieve publications for a selected research organization (using its GRID identifier ) and sort them using their Altmetric Attention Score.","title":"Description"},{"location":"queries/09/#query","text":"SELECT id , title . preferred as title , ARRAY_LENGTH ( authors ) as authors , -- include number of authors altmetrics . score as altmetrics_score FROM ` dimensions - ai . data_analytics . publications ` WHERE year = 2020 AND 'grid.4991.5' in UNNEST ( research_orgs ) -- a sample grid ID ORDER BY altmetrics . score DESC LIMIT 5 -- Get top 5 only","title":"Query"},{"location":"queries/09/#results","text":"[ { \"id\" : \"pub.1130340155\" , \"title\" : \"Two metres or one: what is the evidence for physical distancing in covid-19?\" , \"authors\" : \"6\" , \"altmetrics_score\" : \"15978\" }, { \"id\" : \"pub.1129493369\" , \"title\" : \"Safety and immunogenicity of the ChAdOx1 nCoV-19 vaccine against SARS-CoV-2: a preliminary report of a phase 1/2, single-blind, randomised controlled trial\" , \"authors\" : \"366\" , \"altmetrics_score\" : \"15612\" }, { \"id\" : \"pub.1133359801\" , \"title\" : \"Safety and efficacy of the ChAdOx1 nCoV-19 vaccine (AZD1222) against SARS-CoV-2: an interim analysis of four randomised controlled trials in Brazil, South Africa, and the UK\" , \"authors\" : \"766\" , \"altmetrics_score\" : \"12292\" }, { \"id\" : \"pub.1127239818\" , \"title\" : \"Remdesivir in adults with severe COVID-19: a randomised, double-blind, placebo-controlled, multicentre trial\" , \"authors\" : \"46\" , \"altmetrics_score\" : \"12036\" }, { \"id\" : \"pub.1131721397\" , \"title\" : \"Scientific consensus on the COVID-19 pandemic: we need to act now\" , \"authors\" : \"31\" , \"altmetrics_score\" : \"10534\" } ]","title":"Results"},{"location":"queries/10/","text":"10. Select publications matching selected concepts Level: Medium This query requires basic knowledge of SQL and the Dimensions data model Description This query counts the number of publications about a set of tropical diseases. It filters publications by selecting only those that either refer to those diseases in the title, or that have been tagged with those diseases as concepts within the Dimensions database. Once publications have been found, the counts are broken down both by year and by publisher; the final list shows the top 10 publisher-years in which the most papers were published about those diseases. Query SELECT publisher . NAME AS publisher , year , COUNT ( * ) AS num_pub FROM ` dimensions - ai . data_analytics . publications ` , UNNEST ( concepts ) c WHERE ( LOWER ( c . concept ) IN UNNEST ([ \"buruli ulcer\" , \"mycobacterium\" , \"mycolactone\" , \"bairnsdale ulcer\" ]) OR REGEXP_CONTAINS ( title . preferred , r \"(?i)/buruli ulcer|mycobacterium|mycolactone|bairnsdale ulcer/\" )) AND year >= 2010 AND publisher IS NOT NULL GROUP BY publisher , year ORDER BY num_pub DESC , year , publisher LIMIT 10 Results [ { \"publisher\" : \"Elsevier\" , \"year\" : \"2020\" , \"num_pub\" : \"31602\" }, { \"publisher\" : \"Elsevier\" , \"year\" : \"2018\" , \"num_pub\" : \"29639\" }, { \"publisher\" : \"Elsevier\" , \"year\" : \"2019\" , \"num_pub\" : \"28941\" }, { \"publisher\" : \"Elsevier\" , \"year\" : \"2017\" , \"num_pub\" : \"28415\" }, { \"publisher\" : \"Elsevier\" , \"year\" : \"2015\" , \"num_pub\" : \"27299\" }, { \"publisher\" : \"Elsevier\" , \"year\" : \"2011\" , \"num_pub\" : \"25757\" }, { \"publisher\" : \"Elsevier\" , \"year\" : \"2016\" , \"num_pub\" : \"25149\" }, { \"publisher\" : \"Elsevier\" , \"year\" : \"2013\" , \"num_pub\" : \"23205\" }, { \"publisher\" : \"Elsevier\" , \"year\" : \"2014\" , \"num_pub\" : \"22952\" }, { \"publisher\" : \"Springer Nature\" , \"year\" : \"2019\" , \"num_pub\" : \"22072\" } ]","title":"10. Select publications matching selected concepts"},{"location":"queries/10/#10-select-publications-matching-selected-concepts","text":"Level: Medium This query requires basic knowledge of SQL and the Dimensions data model","title":"10. Select publications matching selected concepts"},{"location":"queries/10/#description","text":"This query counts the number of publications about a set of tropical diseases. It filters publications by selecting only those that either refer to those diseases in the title, or that have been tagged with those diseases as concepts within the Dimensions database. Once publications have been found, the counts are broken down both by year and by publisher; the final list shows the top 10 publisher-years in which the most papers were published about those diseases.","title":"Description"},{"location":"queries/10/#query","text":"SELECT publisher . NAME AS publisher , year , COUNT ( * ) AS num_pub FROM ` dimensions - ai . data_analytics . publications ` , UNNEST ( concepts ) c WHERE ( LOWER ( c . concept ) IN UNNEST ([ \"buruli ulcer\" , \"mycobacterium\" , \"mycolactone\" , \"bairnsdale ulcer\" ]) OR REGEXP_CONTAINS ( title . preferred , r \"(?i)/buruli ulcer|mycobacterium|mycolactone|bairnsdale ulcer/\" )) AND year >= 2010 AND publisher IS NOT NULL GROUP BY publisher , year ORDER BY num_pub DESC , year , publisher LIMIT 10","title":"Query"},{"location":"queries/10/#results","text":"[ { \"publisher\" : \"Elsevier\" , \"year\" : \"2020\" , \"num_pub\" : \"31602\" }, { \"publisher\" : \"Elsevier\" , \"year\" : \"2018\" , \"num_pub\" : \"29639\" }, { \"publisher\" : \"Elsevier\" , \"year\" : \"2019\" , \"num_pub\" : \"28941\" }, { \"publisher\" : \"Elsevier\" , \"year\" : \"2017\" , \"num_pub\" : \"28415\" }, { \"publisher\" : \"Elsevier\" , \"year\" : \"2015\" , \"num_pub\" : \"27299\" }, { \"publisher\" : \"Elsevier\" , \"year\" : \"2011\" , \"num_pub\" : \"25757\" }, { \"publisher\" : \"Elsevier\" , \"year\" : \"2016\" , \"num_pub\" : \"25149\" }, { \"publisher\" : \"Elsevier\" , \"year\" : \"2013\" , \"num_pub\" : \"23205\" }, { \"publisher\" : \"Elsevier\" , \"year\" : \"2014\" , \"num_pub\" : \"22952\" }, { \"publisher\" : \"Springer Nature\" , \"year\" : \"2019\" , \"num_pub\" : \"22072\" } ]","title":"Results"},{"location":"queries/11/","text":"11. Count of corresponding authors by publisher Level: Easy This query is suitable for new users of Dimensions on Google BigQuery Description This query counts the number of unique corresponding authors that appear on publications from each publisher. The results list publishers with the count of unique researcher IDs . Query SELECT COUNT ( DISTINCT researcher_id ) AS tot , publisher . name FROM ` dimensions - ai . data_analytics . publications ` , UNNEST ( authors ) aff WHERE aff . corresponding IS TRUE AND publisher . name IS NOT NULL AND year >= 2010 GROUP BY publisher . name ORDER BY tot DESC LIMIT 10 Results [ { \"tot\" : \"1717859\" , \"name\" : \"Springer Nature\" }, { \"tot\" : \"1716636\" , \"name\" : \"Elsevier\" }, { \"tot\" : \"303497\" , \"name\" : \"Institute of Electrical and Electronics Engineers (IEEE)\" }, { \"tot\" : \"287259\" , \"name\" : \"SAGE Publications\" }, { \"tot\" : \"262973\" , \"name\" : \"MDPI\" }, { \"tot\" : \"141491\" , \"name\" : \"Hindawi\" }, { \"tot\" : \"122421\" , \"name\" : \"Public Library of Science (PLoS)\" }, { \"tot\" : \"84153\" , \"name\" : \"Cold Spring Harbor Laboratory\" }, { \"tot\" : \"75136\" , \"name\" : \"Frontiers\" }, { \"tot\" : \"68176\" , \"name\" : \"Pleiades Publishing\" } ]","title":"11. Count of corresponding authors by publisher"},{"location":"queries/11/#11-count-of-corresponding-authors-by-publisher","text":"Level: Easy This query is suitable for new users of Dimensions on Google BigQuery","title":"11. Count of corresponding authors by publisher"},{"location":"queries/11/#description","text":"This query counts the number of unique corresponding authors that appear on publications from each publisher. The results list publishers with the count of unique researcher IDs .","title":"Description"},{"location":"queries/11/#query","text":"SELECT COUNT ( DISTINCT researcher_id ) AS tot , publisher . name FROM ` dimensions - ai . data_analytics . publications ` , UNNEST ( authors ) aff WHERE aff . corresponding IS TRUE AND publisher . name IS NOT NULL AND year >= 2010 GROUP BY publisher . name ORDER BY tot DESC LIMIT 10","title":"Query"},{"location":"queries/11/#results","text":"[ { \"tot\" : \"1717859\" , \"name\" : \"Springer Nature\" }, { \"tot\" : \"1716636\" , \"name\" : \"Elsevier\" }, { \"tot\" : \"303497\" , \"name\" : \"Institute of Electrical and Electronics Engineers (IEEE)\" }, { \"tot\" : \"287259\" , \"name\" : \"SAGE Publications\" }, { \"tot\" : \"262973\" , \"name\" : \"MDPI\" }, { \"tot\" : \"141491\" , \"name\" : \"Hindawi\" }, { \"tot\" : \"122421\" , \"name\" : \"Public Library of Science (PLoS)\" }, { \"tot\" : \"84153\" , \"name\" : \"Cold Spring Harbor Laboratory\" }, { \"tot\" : \"75136\" , \"name\" : \"Frontiers\" }, { \"tot\" : \"68176\" , \"name\" : \"Pleiades Publishing\" } ]","title":"Results"},{"location":"queries/12/","text":"12. Counting new vs recurring authors, for a specific journal Level: Advanced This query requires a good understanding of SQL and the Dimensions data model Description This query evaluates a single journal (specified by journal ID - e.g. jour.1115214 ) and counts the number of authors per year that it has published. Authors are split into two categories: new authors who have never appeared in the journal before, and \"recurring\" authors who have already written at least one previous article in the journal. Note Because the query starts in 2011, some \"recurring\" authors are never counted as new authors : If an author publishes one paper each in, say, 2007 and 2014, they will appear as a recurring author in 2014, but the year in which they would be a \"new\" author is not displayed. Query WITH authoryear AS ( -- how many papers has each individual researcher published in -- the specified journal? Broken down by year. SELECT pubs . year , author . researcher_id , COUNT ( pubs . id ) AS numpubs FROM ` dimensions - ai . data_analytics . publications ` AS pubs CROSS JOIN UNNEST ( pubs . authors ) AS author WHERE author . researcher_id IS NOT NULL AND journal . id = \"jour.1115214\" -- Nature BioTechnology GROUP BY author . researcher_id , pubs . year ), authorfirst AS ( -- For each author, what year is their FIRST publication in -- the specified journal? SELECT researcher_id , MIN ( year ) AS minyear FROM authoryear GROUP BY researcher_id ), authorsummary AS ( -- Modify the author-level list of publications per -- year by adding a new field, \"firstyear\", that indicates -- whether this is the year in which they are \"new.\" SELECT ay . * , IF ( ay . year = af . minyear , TRUE , FALSE ) AS firstyear FROM authoryear ay INNER JOIN authorfirst af ON af . researcher_id = ay . researcher_id ), numauthors AS ( -- For each year, total up the new and recurring authors SELECT year , firstyear , COUNT ( DISTINCT researcher_id ) AS numresearchers FROM authorsummary WHERE year > 2010 GROUP BY year , firstyear ) -- Finally, we rearrange the \"numauthors\" subquery so -- each year in the specified range only has a SINGLE ROW, -- indicating both the new and recurring authors. SELECT year , SUM ( CASE WHEN firstyear THEN numresearchers ELSE 0 END ) AS num_first , SUM ( CASE WHEN NOT firstyear THEN numresearchers ELSE 0 END ) AS num_recurring FROM numauthors GROUP BY year ORDER BY year Results [ { \"year\" : \"2011\" , \"num_first\" : \"1041\" , \"num_recurring\" : \"352\" }, { \"year\" : \"2012\" , \"num_first\" : \"859\" , \"num_recurring\" : \"374\" }, { \"year\" : \"2013\" , \"num_first\" : \"927\" , \"num_recurring\" : \"347\" }, { \"year\" : \"2014\" , \"num_first\" : \"1088\" , \"num_recurring\" : \"338\" }, { \"year\" : \"2015\" , \"num_first\" : \"1044\" , \"num_recurring\" : \"392\" }, { \"year\" : \"2016\" , \"num_first\" : \"1319\" , \"num_recurring\" : \"350\" }, { \"year\" : \"2017\" , \"num_first\" : \"1074\" , \"num_recurring\" : \"404\" }, { \"year\" : \"2018\" , \"num_first\" : \"1111\" , \"num_recurring\" : \"419\" }, { \"year\" : \"2019\" , \"num_first\" : \"1219\" , \"num_recurring\" : \"447\" }, { \"year\" : \"2020\" , \"num_first\" : \"1611\" , \"num_recurring\" : \"570\" }, { \"year\" : \"2021\" , \"num_first\" : \"411\" , \"num_recurring\" : \"189\" } ]","title":"12. Counting new vs recurring authors, for a specific journal"},{"location":"queries/12/#12-counting-new-vs-recurring-authors-for-a-specific-journal","text":"Level: Advanced This query requires a good understanding of SQL and the Dimensions data model","title":"12. Counting new vs recurring authors, for a specific journal"},{"location":"queries/12/#description","text":"This query evaluates a single journal (specified by journal ID - e.g. jour.1115214 ) and counts the number of authors per year that it has published. Authors are split into two categories: new authors who have never appeared in the journal before, and \"recurring\" authors who have already written at least one previous article in the journal. Note Because the query starts in 2011, some \"recurring\" authors are never counted as new authors : If an author publishes one paper each in, say, 2007 and 2014, they will appear as a recurring author in 2014, but the year in which they would be a \"new\" author is not displayed.","title":"Description"},{"location":"queries/12/#query","text":"WITH authoryear AS ( -- how many papers has each individual researcher published in -- the specified journal? Broken down by year. SELECT pubs . year , author . researcher_id , COUNT ( pubs . id ) AS numpubs FROM ` dimensions - ai . data_analytics . publications ` AS pubs CROSS JOIN UNNEST ( pubs . authors ) AS author WHERE author . researcher_id IS NOT NULL AND journal . id = \"jour.1115214\" -- Nature BioTechnology GROUP BY author . researcher_id , pubs . year ), authorfirst AS ( -- For each author, what year is their FIRST publication in -- the specified journal? SELECT researcher_id , MIN ( year ) AS minyear FROM authoryear GROUP BY researcher_id ), authorsummary AS ( -- Modify the author-level list of publications per -- year by adding a new field, \"firstyear\", that indicates -- whether this is the year in which they are \"new.\" SELECT ay . * , IF ( ay . year = af . minyear , TRUE , FALSE ) AS firstyear FROM authoryear ay INNER JOIN authorfirst af ON af . researcher_id = ay . researcher_id ), numauthors AS ( -- For each year, total up the new and recurring authors SELECT year , firstyear , COUNT ( DISTINCT researcher_id ) AS numresearchers FROM authorsummary WHERE year > 2010 GROUP BY year , firstyear ) -- Finally, we rearrange the \"numauthors\" subquery so -- each year in the specified range only has a SINGLE ROW, -- indicating both the new and recurring authors. SELECT year , SUM ( CASE WHEN firstyear THEN numresearchers ELSE 0 END ) AS num_first , SUM ( CASE WHEN NOT firstyear THEN numresearchers ELSE 0 END ) AS num_recurring FROM numauthors GROUP BY year ORDER BY year","title":"Query"},{"location":"queries/12/#results","text":"[ { \"year\" : \"2011\" , \"num_first\" : \"1041\" , \"num_recurring\" : \"352\" }, { \"year\" : \"2012\" , \"num_first\" : \"859\" , \"num_recurring\" : \"374\" }, { \"year\" : \"2013\" , \"num_first\" : \"927\" , \"num_recurring\" : \"347\" }, { \"year\" : \"2014\" , \"num_first\" : \"1088\" , \"num_recurring\" : \"338\" }, { \"year\" : \"2015\" , \"num_first\" : \"1044\" , \"num_recurring\" : \"392\" }, { \"year\" : \"2016\" , \"num_first\" : \"1319\" , \"num_recurring\" : \"350\" }, { \"year\" : \"2017\" , \"num_first\" : \"1074\" , \"num_recurring\" : \"404\" }, { \"year\" : \"2018\" , \"num_first\" : \"1111\" , \"num_recurring\" : \"419\" }, { \"year\" : \"2019\" , \"num_first\" : \"1219\" , \"num_recurring\" : \"447\" }, { \"year\" : \"2020\" , \"num_first\" : \"1611\" , \"num_recurring\" : \"570\" }, { \"year\" : \"2021\" , \"num_first\" : \"411\" , \"num_recurring\" : \"189\" } ]","title":"Results"},{"location":"queries/13/","text":"13. Funding by journal Level: Medium This query requires basic knowledge of SQL and the Dimensions data model Description This query looks at all publications from a single specified journal and counts the total number of grants associated with those publications. The results list each funding agency with a count of how many papers it has been linked to, combined with the number of grants from that agency that were referenced by those papers. Query WITH funding AS ( SELECT funding . grid_id AS funders , COUNT ( id ) AS pubs , COUNT ( funding . grant_id ) AS grants FROM ` dimensions - ai . data_analytics . publications ` , UNNEST ( funding_details ) AS funding WHERE journal . id = \"jour.1113716\" -- nature medicine GROUP BY funders ) SELECT funding . * , grid . name FROM funding INNER JOIN ` dimensions - ai . data_analytics . grid ` grid ON funding . funders = grid . id ORDER BY pubs DESC , grants DESC LIMIT 10 Results [ { \"funders\" : \"grid.48336.3a\" , \"pubs\" : \"2727\" , \"grants\" : \"2510\" , \"name\" : \"National Cancer Institute\" }, { \"funders\" : \"grid.419681.3\" , \"pubs\" : \"2043\" , \"grants\" : \"1910\" , \"name\" : \"National Institute of Allergy and Infectious Diseases\" }, { \"funders\" : \"grid.419635.c\" , \"pubs\" : \"1642\" , \"grants\" : \"1584\" , \"name\" : \"National Institute of Diabetes and Digestive and Kidney Diseases\" }, { \"funders\" : \"grid.279885.9\" , \"pubs\" : \"1641\" , \"grants\" : \"1554\" , \"name\" : \"National Heart Lung and Blood Institute\" }, { \"funders\" : \"grid.416870.c\" , \"pubs\" : \"717\" , \"grants\" : \"673\" , \"name\" : \"National Institute of Neurological Disorders and Stroke\" }, { \"funders\" : \"grid.419475.a\" , \"pubs\" : \"585\" , \"grants\" : \"553\" , \"name\" : \"National Institute on Aging\" }, { \"funders\" : \"grid.14105.31\" , \"pubs\" : \"547\" , \"grants\" : \"431\" , \"name\" : \"Medical Research Council\" }, { \"funders\" : \"grid.54432.34\" , \"pubs\" : \"512\" , \"grants\" : \"447\" , \"name\" : \"Japan Society for the Promotion of Science\" }, { \"funders\" : \"grid.280785.0\" , \"pubs\" : \"465\" , \"grants\" : \"446\" , \"name\" : \"National Institute of General Medical Sciences\" }, { \"funders\" : \"grid.270680.b\" , \"pubs\" : \"410\" , \"grants\" : \"187\" , \"name\" : \"European Commission\" } ]","title":"13. Funding by journal"},{"location":"queries/13/#13-funding-by-journal","text":"Level: Medium This query requires basic knowledge of SQL and the Dimensions data model","title":"13. Funding by journal"},{"location":"queries/13/#description","text":"This query looks at all publications from a single specified journal and counts the total number of grants associated with those publications. The results list each funding agency with a count of how many papers it has been linked to, combined with the number of grants from that agency that were referenced by those papers.","title":"Description"},{"location":"queries/13/#query","text":"WITH funding AS ( SELECT funding . grid_id AS funders , COUNT ( id ) AS pubs , COUNT ( funding . grant_id ) AS grants FROM ` dimensions - ai . data_analytics . publications ` , UNNEST ( funding_details ) AS funding WHERE journal . id = \"jour.1113716\" -- nature medicine GROUP BY funders ) SELECT funding . * , grid . name FROM funding INNER JOIN ` dimensions - ai . data_analytics . grid ` grid ON funding . funders = grid . id ORDER BY pubs DESC , grants DESC LIMIT 10","title":"Query"},{"location":"queries/13/#results","text":"[ { \"funders\" : \"grid.48336.3a\" , \"pubs\" : \"2727\" , \"grants\" : \"2510\" , \"name\" : \"National Cancer Institute\" }, { \"funders\" : \"grid.419681.3\" , \"pubs\" : \"2043\" , \"grants\" : \"1910\" , \"name\" : \"National Institute of Allergy and Infectious Diseases\" }, { \"funders\" : \"grid.419635.c\" , \"pubs\" : \"1642\" , \"grants\" : \"1584\" , \"name\" : \"National Institute of Diabetes and Digestive and Kidney Diseases\" }, { \"funders\" : \"grid.279885.9\" , \"pubs\" : \"1641\" , \"grants\" : \"1554\" , \"name\" : \"National Heart Lung and Blood Institute\" }, { \"funders\" : \"grid.416870.c\" , \"pubs\" : \"717\" , \"grants\" : \"673\" , \"name\" : \"National Institute of Neurological Disorders and Stroke\" }, { \"funders\" : \"grid.419475.a\" , \"pubs\" : \"585\" , \"grants\" : \"553\" , \"name\" : \"National Institute on Aging\" }, { \"funders\" : \"grid.14105.31\" , \"pubs\" : \"547\" , \"grants\" : \"431\" , \"name\" : \"Medical Research Council\" }, { \"funders\" : \"grid.54432.34\" , \"pubs\" : \"512\" , \"grants\" : \"447\" , \"name\" : \"Japan Society for the Promotion of Science\" }, { \"funders\" : \"grid.280785.0\" , \"pubs\" : \"465\" , \"grants\" : \"446\" , \"name\" : \"National Institute of General Medical Sciences\" }, { \"funders\" : \"grid.270680.b\" , \"pubs\" : \"410\" , \"grants\" : \"187\" , \"name\" : \"European Commission\" } ]","title":"Results"},{"location":"queries/14/","text":"14. Extracting complex publications records Level: Medium This query requires basic knowledge of SQL and the Dimensions data model Description The query below combines various techniques in order to extract full publication metadata records that include both single-value metadata and unpacked lists. Note: we use LEFT JOIN clauses in order to ensure we obtain all records, not just the ones that have non-null values in the nested objects. Query SELECT p . id , p . title . preferred AS title , p . doi , p . year , COALESCE ( p . journal . title , p . proceedings_title . preferred , p . book_title . preferred , p . book_series_title . preferred ) AS venue , p . type , p . date AS date_publication , p . date_inserted , p . altmetrics . score AS altmetrics_score , p . metrics . times_cited , grid . id AS gridid , grid . name AS gridname , grid . address . country AS gridcountry , grid . address . city AS gridcity , open_access_categories , cat_for . name AS category_for , FROM ` dimensions - ai . data_analytics . publications ` p LEFT JOIN UNNEST ( research_orgs ) AS research_orgs_grids LEFT JOIN ` dimensions - ai . data_analytics . grid ` grid ON grid . id = research_orgs_grids LEFT JOIN UNNEST ( p . open_access_categories_v2 ) AS open_access_categories LEFT JOIN UNNEST ( p . category_for . first_level . full ) AS cat_for WHERE EXTRACT ( YEAR FROM date_inserted ) >= 2020 Results [ { \"id\" : \"pub.1124854415\" , \"title\" : \"Gabinetto armonico pieno d'istromenti sonori\" , \"doi\" : \"10.5479/sil.744616.39088011251444\" , \"year\" : \"1722\" , \"venue\" : null , \"type\" : \"monograph\" , \"date_publication\" : \"1722\" , \"date_inserted\" : \"2020-02-15 01:10:52 UTC\" , \"altmetrics_score\" : null , \"times_cited\" : \"3\" , \"gridid\" : null , \"gridname\" : null , \"gridcountry\" : null , \"gridcity\" : null , \"open_access_categories\" : \"oa_all\" , \"category_for\" : null }, { \"id\" : \"pub.1124854415\" , \"title\" : \"Gabinetto armonico pieno d'istromenti sonori\" , \"doi\" : \"10.5479/sil.744616.39088011251444\" , \"year\" : \"1722\" , \"venue\" : null , \"type\" : \"monograph\" , \"date_publication\" : \"1722\" , \"date_inserted\" : \"2020-02-15 01:10:52 UTC\" , \"altmetrics_score\" : null , \"times_cited\" : \"3\" , \"gridid\" : null , \"gridname\" : null , \"gridcountry\" : null , \"gridcity\" : null , \"open_access_categories\" : \"bronze\" , \"category_for\" : null }, // many more entries here... ]","title":"14. Extracting complex publications records"},{"location":"queries/14/#14-extracting-complex-publications-records","text":"Level: Medium This query requires basic knowledge of SQL and the Dimensions data model","title":"14. Extracting complex publications records"},{"location":"queries/14/#description","text":"The query below combines various techniques in order to extract full publication metadata records that include both single-value metadata and unpacked lists. Note: we use LEFT JOIN clauses in order to ensure we obtain all records, not just the ones that have non-null values in the nested objects.","title":"Description"},{"location":"queries/14/#query","text":"SELECT p . id , p . title . preferred AS title , p . doi , p . year , COALESCE ( p . journal . title , p . proceedings_title . preferred , p . book_title . preferred , p . book_series_title . preferred ) AS venue , p . type , p . date AS date_publication , p . date_inserted , p . altmetrics . score AS altmetrics_score , p . metrics . times_cited , grid . id AS gridid , grid . name AS gridname , grid . address . country AS gridcountry , grid . address . city AS gridcity , open_access_categories , cat_for . name AS category_for , FROM ` dimensions - ai . data_analytics . publications ` p LEFT JOIN UNNEST ( research_orgs ) AS research_orgs_grids LEFT JOIN ` dimensions - ai . data_analytics . grid ` grid ON grid . id = research_orgs_grids LEFT JOIN UNNEST ( p . open_access_categories_v2 ) AS open_access_categories LEFT JOIN UNNEST ( p . category_for . first_level . full ) AS cat_for WHERE EXTRACT ( YEAR FROM date_inserted ) >= 2020","title":"Query"},{"location":"queries/14/#results","text":"[ { \"id\" : \"pub.1124854415\" , \"title\" : \"Gabinetto armonico pieno d'istromenti sonori\" , \"doi\" : \"10.5479/sil.744616.39088011251444\" , \"year\" : \"1722\" , \"venue\" : null , \"type\" : \"monograph\" , \"date_publication\" : \"1722\" , \"date_inserted\" : \"2020-02-15 01:10:52 UTC\" , \"altmetrics_score\" : null , \"times_cited\" : \"3\" , \"gridid\" : null , \"gridname\" : null , \"gridcountry\" : null , \"gridcity\" : null , \"open_access_categories\" : \"oa_all\" , \"category_for\" : null }, { \"id\" : \"pub.1124854415\" , \"title\" : \"Gabinetto armonico pieno d'istromenti sonori\" , \"doi\" : \"10.5479/sil.744616.39088011251444\" , \"year\" : \"1722\" , \"venue\" : null , \"type\" : \"monograph\" , \"date_publication\" : \"1722\" , \"date_inserted\" : \"2020-02-15 01:10:52 UTC\" , \"altmetrics_score\" : null , \"times_cited\" : \"3\" , \"gridid\" : null , \"gridname\" : null , \"gridcountry\" : null , \"gridcity\" : null , \"open_access_categories\" : \"bronze\" , \"category_for\" : null }, // many more entries here... ]","title":"Results"},{"location":"queries/15/","text":"15. Top N publications by citations percentile Level: Advanced This query requires a good understanding of SQL and the Dimensions data model Description This query sorts all engineering publications from 2020 by their total citations and returns those in the top 1%. Engineering publications are determined by evaluating Field of Research classifications that are applied to the publications. \"09\" is the top-level code assigned to \"Engineering.\" Query WITH pubs AS ( SELECT p . id as id , p . title . preferred as title , p . citations_count as citations , FROM ` dimensions - ai . data_analytics . publications ` p WHERE year = 2020 AND \"09\" IN UNNEST ( category_for . first_level . codes ) ), ranked_pubs AS ( SELECT p . * , PERCENT_RANK () OVER ( ORDER BY p . citations DESC ) citation_percentile FROM pubs p ) SELECT * FROM ranked_pubs WHERE citation_percentile <= 0 . 01 ORDER BY citation_percentile ASC Results [ { \"id\" : \"pub.1129408972\" , \"title\" : \"Estimation of total flavonoid content in propolis by two complementary colometric methods\" , \"citations\" : \"1014\" , \"citation_percentile\" : \"0.0\" }, { \"id\" : \"pub.1122861707\" , \"title\" : \"Mercury 4.0: from visualization to analysis, design and prediction\" , \"citations\" : \"517\" , \"citation_percentile\" : \"1.4502085399880502E-6\" }, { \"id\" : \"pub.1126110231\" , \"title\" : \"Covid-19: automatic detection from X-ray images utilizing transfer learning with convolutional neural networks\" , \"citations\" : \"373\" , \"citation_percentile\" : \"2.9004170799761005E-6\" }, { \"id\" : \"pub.1125814051\" , \"title\" : \"Analysis and forecast of COVID-19 spreading in China, Italy and France\" , \"citations\" : \"348\" , \"citation_percentile\" : \"4.350625619964151E-6\" }, { \"id\" : \"pub.1121839330\" , \"title\" : \"A Vision of 6G Wireless Systems: Applications, Trends, Technologies, and Open Research Problems\" , \"citations\" : \"327\" , \"citation_percentile\" : \"5.800834159952201E-6\" }, { \"id\" : \"pub.1125821215\" , \"title\" : \"The Role of Telehealth in Reducing the Mental Health Burden from COVID-19\" , \"citations\" : \"307\" , \"citation_percentile\" : \"7.251042699940251E-6\" }, // many more entries here... ]","title":"15. Top N publications by citations percentile"},{"location":"queries/15/#15-top-n-publications-by-citations-percentile","text":"Level: Advanced This query requires a good understanding of SQL and the Dimensions data model","title":"15. Top N publications by citations percentile"},{"location":"queries/15/#description","text":"This query sorts all engineering publications from 2020 by their total citations and returns those in the top 1%. Engineering publications are determined by evaluating Field of Research classifications that are applied to the publications. \"09\" is the top-level code assigned to \"Engineering.\"","title":"Description"},{"location":"queries/15/#query","text":"WITH pubs AS ( SELECT p . id as id , p . title . preferred as title , p . citations_count as citations , FROM ` dimensions - ai . data_analytics . publications ` p WHERE year = 2020 AND \"09\" IN UNNEST ( category_for . first_level . codes ) ), ranked_pubs AS ( SELECT p . * , PERCENT_RANK () OVER ( ORDER BY p . citations DESC ) citation_percentile FROM pubs p ) SELECT * FROM ranked_pubs WHERE citation_percentile <= 0 . 01 ORDER BY citation_percentile ASC","title":"Query"},{"location":"queries/15/#results","text":"[ { \"id\" : \"pub.1129408972\" , \"title\" : \"Estimation of total flavonoid content in propolis by two complementary colometric methods\" , \"citations\" : \"1014\" , \"citation_percentile\" : \"0.0\" }, { \"id\" : \"pub.1122861707\" , \"title\" : \"Mercury 4.0: from visualization to analysis, design and prediction\" , \"citations\" : \"517\" , \"citation_percentile\" : \"1.4502085399880502E-6\" }, { \"id\" : \"pub.1126110231\" , \"title\" : \"Covid-19: automatic detection from X-ray images utilizing transfer learning with convolutional neural networks\" , \"citations\" : \"373\" , \"citation_percentile\" : \"2.9004170799761005E-6\" }, { \"id\" : \"pub.1125814051\" , \"title\" : \"Analysis and forecast of COVID-19 spreading in China, Italy and France\" , \"citations\" : \"348\" , \"citation_percentile\" : \"4.350625619964151E-6\" }, { \"id\" : \"pub.1121839330\" , \"title\" : \"A Vision of 6G Wireless Systems: Applications, Trends, Technologies, and Open Research Problems\" , \"citations\" : \"327\" , \"citation_percentile\" : \"5.800834159952201E-6\" }, { \"id\" : \"pub.1125821215\" , \"title\" : \"The Role of Telehealth in Reducing the Mental Health Burden from COVID-19\" , \"citations\" : \"307\" , \"citation_percentile\" : \"7.251042699940251E-6\" }, // many more entries here... ]","title":"Results"},{"location":"queries/16/","text":"16. Citations by journal, for a specific publisher Level: Advanced This query requires a good understanding of SQL and the Dimensions data model Description This query returns a list of journals that have cited a publisher's articles in 2020, ordered by how many citations appeared in each journal. Query WITH publisher_pubs AS ( -- get a list of all publication IDs associated with a single publisher SELECT id FROM ` dimensions - ai . data_analytics . publications ` WHERE publisher . id = \"pblshr.1000340\" -- Public Library of Science (PLoS) AND type = \"article\" ) -- then find all publications that CITE that publisher's papers SELECT COUNT ( p . id ) as tot , p . journal . title as journal FROM ` dimensions - ai . data_analytics . publications ` p , UNNEST ( p . reference_ids ) r WHERE p . year = 2020 AND p . type = \"article\" -- restrict to articles with a published year of 2020 AND p . publisher . id <> \"pblshr.1000340\" -- where the publisher is not the same as the pusblisher above AND r IN ( SELECT id FROM publisher_pubs ) -- the publication must reference a publishers publication GROUP BY journal ORDER BY tot DESC LIMIT 10 Results [ { \"tot\" : \"26309\" , \"journal\" : \"Scientific Reports\" }, { \"tot\" : \"18911\" , \"journal\" : \"International Journal of Molecular Sciences\" }, { \"tot\" : \"8533\" , \"journal\" : \"Frontiers in Microbiology\" }, { \"tot\" : \"7787\" , \"journal\" : \"Frontiers in Immunology\" }, { \"tot\" : \"6999\" , \"journal\" : \"International Journal of Environmental Research and Public Health\" }, { \"tot\" : \"6446\" , \"journal\" : \"Nature Communications\" }, { \"tot\" : \"6199\" , \"journal\" : \"Cells\" }, { \"tot\" : \"5706\" , \"journal\" : \"Cancers\" }, { \"tot\" : \"5036\" , \"journal\" : \"Microorganisms\" }, { \"tot\" : \"5019\" , \"journal\" : \"Nutrients\" } ]","title":"16. Citations by journal, for a specific publisher"},{"location":"queries/16/#16-citations-by-journal-for-a-specific-publisher","text":"Level: Advanced This query requires a good understanding of SQL and the Dimensions data model","title":"16. Citations by journal, for a specific publisher"},{"location":"queries/16/#description","text":"This query returns a list of journals that have cited a publisher's articles in 2020, ordered by how many citations appeared in each journal.","title":"Description"},{"location":"queries/16/#query","text":"WITH publisher_pubs AS ( -- get a list of all publication IDs associated with a single publisher SELECT id FROM ` dimensions - ai . data_analytics . publications ` WHERE publisher . id = \"pblshr.1000340\" -- Public Library of Science (PLoS) AND type = \"article\" ) -- then find all publications that CITE that publisher's papers SELECT COUNT ( p . id ) as tot , p . journal . title as journal FROM ` dimensions - ai . data_analytics . publications ` p , UNNEST ( p . reference_ids ) r WHERE p . year = 2020 AND p . type = \"article\" -- restrict to articles with a published year of 2020 AND p . publisher . id <> \"pblshr.1000340\" -- where the publisher is not the same as the pusblisher above AND r IN ( SELECT id FROM publisher_pubs ) -- the publication must reference a publishers publication GROUP BY journal ORDER BY tot DESC LIMIT 10","title":"Query"},{"location":"queries/16/#results","text":"[ { \"tot\" : \"26309\" , \"journal\" : \"Scientific Reports\" }, { \"tot\" : \"18911\" , \"journal\" : \"International Journal of Molecular Sciences\" }, { \"tot\" : \"8533\" , \"journal\" : \"Frontiers in Microbiology\" }, { \"tot\" : \"7787\" , \"journal\" : \"Frontiers in Immunology\" }, { \"tot\" : \"6999\" , \"journal\" : \"International Journal of Environmental Research and Public Health\" }, { \"tot\" : \"6446\" , \"journal\" : \"Nature Communications\" }, { \"tot\" : \"6199\" , \"journal\" : \"Cells\" }, { \"tot\" : \"5706\" , \"journal\" : \"Cancers\" }, { \"tot\" : \"5036\" , \"journal\" : \"Microorganisms\" }, { \"tot\" : \"5019\" , \"journal\" : \"Nutrients\" } ]","title":"Results"},{"location":"queries/17/","text":"17. One-degree citation network for a single publication Level: Advanced This query requires a good understanding of SQL and the Dimensions data model Description This query generates a basic (incoming) citation network for a single publication (the \"root node\"). \"Level 1\" publications in the query are publications that are citing the root publication. \"Level 2\" publications are citing Level 1 publications. Each row describes a vertex in the network and what year the citation occurred. Query WITH level1 AS ( SELECT \"pub.1099396382\" as citation_from , citations . id AS citation_to , 1 AS level , citations . year as citation_year FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( citations ) AS citations WHERE p . id = \"pub.1099396382\" -- starting node defined here ), level2 AS ( SELECT l . citation_to AS citation_from , citations . id AS citation_to , 2 AS level , citations . year AS citation_year FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( citations ) as citations , level1 l where p . id = l . citation_to ) SELECT * from level1 UNION ALL SELECT * from level2 Results [ { \"citation_from\" : \"pub.1084215961\" , \"citation_to\" : \"pub.1135701707\" , \"level\" : \"2\" , \"citation_year\" : \"2021\" }, { \"citation_from\" : \"pub.1084215961\" , \"citation_to\" : \"pub.1126671825\" , \"level\" : \"2\" , \"citation_year\" : \"2020\" }, { \"citation_from\" : \"pub.1084215961\" , \"citation_to\" : \"pub.1101037901\" , \"level\" : \"2\" , \"citation_year\" : \"2018\" }, { \"citation_from\" : \"pub.1084215961\" , \"citation_to\" : \"pub.1120764290\" , \"level\" : \"2\" , \"citation_year\" : \"2019\" }, { \"citation_from\" : \"pub.1084215961\" , \"citation_to\" : \"pub.1103943561\" , \"level\" : \"2\" , \"citation_year\" : \"2018\" }, // many more entries here... ] 17.1 Variant: one-degree references network for a single publication We could use the same approach in order to build a references network (=outgoing citations). This can be achieved via the publications field references_ids . WITH level1 AS ( SELECT \"pub.1099396382\" as references_from , reference AS reference_to , 1 AS level FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( reference_ids ) AS reference WHERE p . id = \"pub.1099396382\" -- starting node defined here ), level2 AS ( SELECT l . reference_to AS reference_from , reference AS reference_to , 2 AS level FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( reference_ids ) as reference , level1 l where p . id = l . reference_to ) SELECT * from level1 UNION ALL SELECT * from level2","title":"17. One-degree citation network for a single publication"},{"location":"queries/17/#17-one-degree-citation-network-for-a-single-publication","text":"Level: Advanced This query requires a good understanding of SQL and the Dimensions data model","title":"17. One-degree citation network for a single publication"},{"location":"queries/17/#description","text":"This query generates a basic (incoming) citation network for a single publication (the \"root node\"). \"Level 1\" publications in the query are publications that are citing the root publication. \"Level 2\" publications are citing Level 1 publications. Each row describes a vertex in the network and what year the citation occurred.","title":"Description"},{"location":"queries/17/#query","text":"WITH level1 AS ( SELECT \"pub.1099396382\" as citation_from , citations . id AS citation_to , 1 AS level , citations . year as citation_year FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( citations ) AS citations WHERE p . id = \"pub.1099396382\" -- starting node defined here ), level2 AS ( SELECT l . citation_to AS citation_from , citations . id AS citation_to , 2 AS level , citations . year AS citation_year FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( citations ) as citations , level1 l where p . id = l . citation_to ) SELECT * from level1 UNION ALL SELECT * from level2","title":"Query"},{"location":"queries/17/#results","text":"[ { \"citation_from\" : \"pub.1084215961\" , \"citation_to\" : \"pub.1135701707\" , \"level\" : \"2\" , \"citation_year\" : \"2021\" }, { \"citation_from\" : \"pub.1084215961\" , \"citation_to\" : \"pub.1126671825\" , \"level\" : \"2\" , \"citation_year\" : \"2020\" }, { \"citation_from\" : \"pub.1084215961\" , \"citation_to\" : \"pub.1101037901\" , \"level\" : \"2\" , \"citation_year\" : \"2018\" }, { \"citation_from\" : \"pub.1084215961\" , \"citation_to\" : \"pub.1120764290\" , \"level\" : \"2\" , \"citation_year\" : \"2019\" }, { \"citation_from\" : \"pub.1084215961\" , \"citation_to\" : \"pub.1103943561\" , \"level\" : \"2\" , \"citation_year\" : \"2018\" }, // many more entries here... ]","title":"Results"},{"location":"queries/17/#171-variant-one-degree-references-network-for-a-single-publication","text":"We could use the same approach in order to build a references network (=outgoing citations). This can be achieved via the publications field references_ids . WITH level1 AS ( SELECT \"pub.1099396382\" as references_from , reference AS reference_to , 1 AS level FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( reference_ids ) AS reference WHERE p . id = \"pub.1099396382\" -- starting node defined here ), level2 AS ( SELECT l . reference_to AS reference_from , reference AS reference_to , 2 AS level FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( reference_ids ) as reference , level1 l where p . id = l . reference_to ) SELECT * from level1 UNION ALL SELECT * from level2","title":"17.1 Variant: one-degree references network for a single publication"},{"location":"queries/18/","text":"18. Incoming citations for a journal Level: Medium This query requires basic knowledge of SQL and the Dimensions data model Description This query lists incoming citations per year for a single journal. Results are split out by year and by the type of publication that cited the journal (article, book, etc). Note There is an important clause in the SELECT statement that changes the behavior of this query: If you use COUNT(DISTINCT id) , the query counts unique publications that cited the selected journal. If you use COUNT(id) instead, this counts citations : If one publication cites multiple papers from a single journal, the latter query will count each citation separately. Query SELECT COUNT ( DISTINCT id ) AS totcount , year , type FROM ` dimensions - ai . data_analytics . publications ` WHERE id IN ( SELECT citing_pubs . id FROM ` dimensions - ai . data_analytics . publications ` , UNNEST ( citations ) AS citing_pubs WHERE journal . id = \"jour.1115214\" -- Nature Biotechnology ) AND year >= 2005 GROUP BY year , type ORDER BY year , type Results [ { \"totcount\" : \"13064\" , \"year\" : \"2005\" , \"type\" : \"article\" }, { \"totcount\" : \"12\" , \"year\" : \"2005\" , \"type\" : \"book\" }, { \"totcount\" : \"1492\" , \"year\" : \"2005\" , \"type\" : \"chapter\" }, { \"totcount\" : \"23\" , \"year\" : \"2005\" , \"type\" : \"monograph\" }, { \"totcount\" : \"192\" , \"year\" : \"2005\" , \"type\" : \"proceeding\" }, // more entries here... ]","title":"18. Incoming citations for a journal"},{"location":"queries/18/#18-incoming-citations-for-a-journal","text":"Level: Medium This query requires basic knowledge of SQL and the Dimensions data model","title":"18. Incoming citations for a journal"},{"location":"queries/18/#description","text":"This query lists incoming citations per year for a single journal. Results are split out by year and by the type of publication that cited the journal (article, book, etc). Note There is an important clause in the SELECT statement that changes the behavior of this query: If you use COUNT(DISTINCT id) , the query counts unique publications that cited the selected journal. If you use COUNT(id) instead, this counts citations : If one publication cites multiple papers from a single journal, the latter query will count each citation separately.","title":"Description"},{"location":"queries/18/#query","text":"SELECT COUNT ( DISTINCT id ) AS totcount , year , type FROM ` dimensions - ai . data_analytics . publications ` WHERE id IN ( SELECT citing_pubs . id FROM ` dimensions - ai . data_analytics . publications ` , UNNEST ( citations ) AS citing_pubs WHERE journal . id = \"jour.1115214\" -- Nature Biotechnology ) AND year >= 2005 GROUP BY year , type ORDER BY year , type","title":"Query"},{"location":"queries/18/#results","text":"[ { \"totcount\" : \"13064\" , \"year\" : \"2005\" , \"type\" : \"article\" }, { \"totcount\" : \"12\" , \"year\" : \"2005\" , \"type\" : \"book\" }, { \"totcount\" : \"1492\" , \"year\" : \"2005\" , \"type\" : \"chapter\" }, { \"totcount\" : \"23\" , \"year\" : \"2005\" , \"type\" : \"monograph\" }, { \"totcount\" : \"192\" , \"year\" : \"2005\" , \"type\" : \"proceeding\" }, // more entries here... ]","title":"Results"},{"location":"queries/19/","text":"19. Outgoing citations from a journal Level: Medium This query requires basic knowledge of SQL and the Dimensions data model Description This query counts outgoing citations per year from a single journal. Results are broken down by year and by the type of publication being cited (article, book, etc). Note There is an important clause in the SELECT statement that changes the behavior of this query: If you use COUNT(DISTINCT id) , the query counts unique publications that have been cited in the selected journal. If you use COUNT(id) instead, this counts citations : If one publication it cited by multiple papers in a single journal, the latter query will count each citation separately. Query SELECT COUNT ( DISTINCT id ) AS totcount , year , type FROM ` dimensions - ai . data_analytics . publications ` WHERE id IN ( SELECT DISTINCT reference_pubs FROM ` dimensions - ai . data_analytics . publications ` , UNNEST ( reference_ids ) AS reference_pubs WHERE journal . id = \"jour.1115214\" -- Nature Biotechnology ) AND year >= 2005 GROUP BY year , type ORDER BY year , type Results [ { \"totcount\" : \"3757\" , \"year\" : \"2005\" , \"type\" : \"article\" }, { \"totcount\" : \"12\" , \"year\" : \"2005\" , \"type\" : \"book\" }, { \"totcount\" : \"60\" , \"year\" : \"2005\" , \"type\" : \"chapter\" }, { \"totcount\" : \"9\" , \"year\" : \"2005\" , \"type\" : \"monograph\" }, { \"totcount\" : \"8\" , \"year\" : \"2005\" , \"type\" : \"proceeding\" }, // more entries here... ]","title":"19. Outgoing citations from a journal"},{"location":"queries/19/#19-outgoing-citations-from-a-journal","text":"Level: Medium This query requires basic knowledge of SQL and the Dimensions data model","title":"19. Outgoing citations from a journal"},{"location":"queries/19/#description","text":"This query counts outgoing citations per year from a single journal. Results are broken down by year and by the type of publication being cited (article, book, etc). Note There is an important clause in the SELECT statement that changes the behavior of this query: If you use COUNT(DISTINCT id) , the query counts unique publications that have been cited in the selected journal. If you use COUNT(id) instead, this counts citations : If one publication it cited by multiple papers in a single journal, the latter query will count each citation separately.","title":"Description"},{"location":"queries/19/#query","text":"SELECT COUNT ( DISTINCT id ) AS totcount , year , type FROM ` dimensions - ai . data_analytics . publications ` WHERE id IN ( SELECT DISTINCT reference_pubs FROM ` dimensions - ai . data_analytics . publications ` , UNNEST ( reference_ids ) AS reference_pubs WHERE journal . id = \"jour.1115214\" -- Nature Biotechnology ) AND year >= 2005 GROUP BY year , type ORDER BY year , type","title":"Query"},{"location":"queries/19/#results","text":"[ { \"totcount\" : \"3757\" , \"year\" : \"2005\" , \"type\" : \"article\" }, { \"totcount\" : \"12\" , \"year\" : \"2005\" , \"type\" : \"book\" }, { \"totcount\" : \"60\" , \"year\" : \"2005\" , \"type\" : \"chapter\" }, { \"totcount\" : \"9\" , \"year\" : \"2005\" , \"type\" : \"monograph\" }, { \"totcount\" : \"8\" , \"year\" : \"2005\" , \"type\" : \"proceeding\" }, // more entries here... ]","title":"Results"},{"location":"queries/20/","text":"20. International collaboration of an organisation in a field Level: Medium This query requires basic knowledge of SQL and the Dimensions data model Description This query looks at international collaborations by year, with additional filters for institution and Field of Research . The pubcounts subquery counts the total number of relevant papers that have authors from multiple countries, then the final query divides this number by the total number of relevant papers in that category. Query WITH pubcounts AS ( SELECT year , COUNTIF ( ARRAY_LENGTH ( p . research_org_countries ) > 1 ) AS intl , COUNTIF ( ARRAY_LENGTH ( p . research_org_countries ) <= 1 ) AS domestic FROM ` dimensions - ai . data_analytics . publications ` p WHERE year >= 2015 AND \"0601\" in UNNEST ( category_for . second_level . codes ) -- field defined here AND \"grid.4991.5\" in UNNEST ( research_orgs ) -- org defined here GROUP BY year ORDER BY year DESC ) SELECT pubcounts . year , pubcounts . intl , pubcounts . domestic , ROUND ( ( pubcounts . intl * 100 ) / ( pubcounts . domestic + pubcounts . intl ) , 1 ) AS percentagecollab FROM pubcounts ORDER BY year DESC Results [ { \"year\" : \"2021\" , \"intl\" : \"184\" , \"domestic\" : \"92\" , \"percentagecollab\" : \"66.7\" }, { \"year\" : \"2020\" , \"intl\" : \"606\" , \"domestic\" : \"307\" , \"percentagecollab\" : \"66.4\" }, { \"year\" : \"2019\" , \"intl\" : \"534\" , \"domestic\" : \"262\" , \"percentagecollab\" : \"67.1\" }, { \"year\" : \"2018\" , \"intl\" : \"471\" , \"domestic\" : \"246\" , \"percentagecollab\" : \"65.7\" }, { \"year\" : \"2017\" , \"intl\" : \"460\" , \"domestic\" : \"277\" , \"percentagecollab\" : \"62.4\" }, { \"year\" : \"2016\" , \"intl\" : \"422\" , \"domestic\" : \"235\" , \"percentagecollab\" : \"64.2\" }, { \"year\" : \"2015\" , \"intl\" : \"369\" , \"domestic\" : \"268\" , \"percentagecollab\" : \"57.9\" } ]","title":"20. International collaboration of an organisation in a field"},{"location":"queries/20/#20-international-collaboration-of-an-organisation-in-a-field","text":"Level: Medium This query requires basic knowledge of SQL and the Dimensions data model","title":"20. International collaboration of an organisation in a field"},{"location":"queries/20/#description","text":"This query looks at international collaborations by year, with additional filters for institution and Field of Research . The pubcounts subquery counts the total number of relevant papers that have authors from multiple countries, then the final query divides this number by the total number of relevant papers in that category.","title":"Description"},{"location":"queries/20/#query","text":"WITH pubcounts AS ( SELECT year , COUNTIF ( ARRAY_LENGTH ( p . research_org_countries ) > 1 ) AS intl , COUNTIF ( ARRAY_LENGTH ( p . research_org_countries ) <= 1 ) AS domestic FROM ` dimensions - ai . data_analytics . publications ` p WHERE year >= 2015 AND \"0601\" in UNNEST ( category_for . second_level . codes ) -- field defined here AND \"grid.4991.5\" in UNNEST ( research_orgs ) -- org defined here GROUP BY year ORDER BY year DESC ) SELECT pubcounts . year , pubcounts . intl , pubcounts . domestic , ROUND ( ( pubcounts . intl * 100 ) / ( pubcounts . domestic + pubcounts . intl ) , 1 ) AS percentagecollab FROM pubcounts ORDER BY year DESC","title":"Query"},{"location":"queries/20/#results","text":"[ { \"year\" : \"2021\" , \"intl\" : \"184\" , \"domestic\" : \"92\" , \"percentagecollab\" : \"66.7\" }, { \"year\" : \"2020\" , \"intl\" : \"606\" , \"domestic\" : \"307\" , \"percentagecollab\" : \"66.4\" }, { \"year\" : \"2019\" , \"intl\" : \"534\" , \"domestic\" : \"262\" , \"percentagecollab\" : \"67.1\" }, { \"year\" : \"2018\" , \"intl\" : \"471\" , \"domestic\" : \"246\" , \"percentagecollab\" : \"65.7\" }, { \"year\" : \"2017\" , \"intl\" : \"460\" , \"domestic\" : \"277\" , \"percentagecollab\" : \"62.4\" }, { \"year\" : \"2016\" , \"intl\" : \"422\" , \"domestic\" : \"235\" , \"percentagecollab\" : \"64.2\" }, { \"year\" : \"2015\" , \"intl\" : \"369\" , \"domestic\" : \"268\" , \"percentagecollab\" : \"57.9\" } ]","title":"Results"},{"location":"queries/21/","text":"21. International collaboration rate of individuals, with context Level: Advanced This query requires a good understanding of SQL and the Dimensions data model Description This query determines the yearly proportion of publications from a single author that include international collaborators. It also calculates the same rate for the author's current institution (for papers in the same field), and the author's current country. A few highlights: We can simplify the query by collecting all the author-specific data up front, in the researcher_details and researcher_field subqueries, and referring to it later simply as something like (SELECT org FROM researcher_details) . When we calculate the percentage of papers that are international collaborations, it would be much simpler to simply write (intl*100) / (intl + domestic) . However, in situations where there are zero papers returned for that particular category, this will return an error because the query would call for dividing by zero. We can avoid this by using the COALESCE function . The COUNTIF function is used multiple times here\u2014it can be helpful in situations where you want to maintain separate counts for different conditionals without using COUNT and lots of separate subqueries. Query WITH researcher_details AS ( -- grab the basic metadata about the selected researcher SELECT r . id , r . current_research_org AS org , grid . address . country FROM ` dimensions - ai . data_analytics . researchers ` r INNER JOIN ` dimensions - ai . data_analytics . grid ` grid ON r . current_research_org = grid . id WHERE r . id = \"ur.0761121015.96\" -- researcher defined here ), researcher_field AS ( -- determines the field of research code in which -- the researcher has most frequently authored papers SELECT for2 , COUNT ( DISTINCT p . id ) FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( category_for . second_level . codes ) for2 WHERE ( SELECT id FROM researcher_details ) IN UNNEST ( researcher_ids ) GROUP BY 1 ORDER BY 2 DESC LIMIT 1 ), counts_researcher AS ( -- count how many publications from the selected researcher -- include authors from multiple countries SELECT year , COUNTIF ( ARRAY_LENGTH ( p . research_org_countries ) > 1 ) AS intl , COUNTIF ( ARRAY_LENGTH ( p . research_org_countries ) <= 1 ) AS domestic FROM ` dimensions - ai . data_analytics . publications ` p WHERE year >= 2015 AND ( SELECT id FROM researcher_details ) IN UNNEST ( researcher_ids ) GROUP BY year ), counts_org AS ( -- Count how many publications from the selected researcher's -- CURRENT ORGANIZATION that include authors from multiple countries. -- We count only publications in the author's primary field of -- research, and EXCLUDE papers they co-authored. SELECT year , COUNTIF ( ARRAY_LENGTH ( p . research_org_countries ) > 1 ) AS intl , COUNTIF ( ARRAY_LENGTH ( p . research_org_countries ) <= 1 ) AS domestic FROM ` dimensions - ai . data_analytics . publications ` p WHERE year >= 2015 AND ( SELECT org FROM researcher_details ) IN UNNEST ( research_orgs ) AND ( SELECT for2 FROM researcher_field ) IN UNNEST ( category_for . second_level . codes ) AND ( SELECT id FROM researcher_details ) NOT IN UNNEST ( researcher_ids ) GROUP BY year ), counts_country AS ( -- Count how many publications from the selected researcher's -- current COUNTRY that include authors from multiple countries. -- We count only publications in the author's primary field of -- research, and EXCLUDE papers they co-authored. SELECT year , COUNTIF ( ARRAY_LENGTH ( p . research_org_countries ) > 1 ) AS intl , COUNTIF ( ARRAY_LENGTH ( p . research_org_countries ) <= 1 ) AS domestic FROM ` dimensions - ai . data_analytics . publications ` p WHERE year >= 2015 AND ( SELECT country FROM researcher_details ) IN UNNEST ( research_org_country_names ) AND ( SELECT for2 FROM researcher_field ) IN UNNEST ( category_for . second_level . codes ) AND ( SELECT id FROM researcher_details ) NOT IN UNNEST ( researcher_ids ) GROUP BY year ), raw_percents AS ( -- Divide international collabs by total collabs in each category SELECT researcher . year , ( researcher . intl * 100 ) / COALESCE ( researcher . intl + researcher . domestic , 1 ) AS intl_researcher , ( org . intl * 100 ) / COALESCE ( org . intl + org . domestic , 1 ) AS intl_org , ( country . intl * 100 ) / COALESCE ( country . intl + country . domestic , 1 ) AS intl_country , FROM counts_researcher researcher LEFT JOIN counts_org org ON researcher . year = org . year LEFT JOIN counts_country country ON researcher . year = country . year ORDER BY researcher . year DESC ) -- Pull the percentages from the raw_percents table and round them SELECT year , ROUND ( intl_researcher , 1 ) AS intl_researcher , ROUND ( intl_org , 1 ) AS intl_org , ROUND ( intl_country , 1 ) AS intl_country FROM raw_percents Results [ { \"year\" : \"2021\" , \"intl_researcher\" : \"44.4\" , \"intl_org\" : \"53.8\" , \"intl_country\" : \"59.0\" }, { \"year\" : \"2020\" , \"intl_researcher\" : \"50.0\" , \"intl_org\" : \"54.7\" , \"intl_country\" : \"48.7\" }, { \"year\" : \"2019\" , \"intl_researcher\" : \"53.6\" , \"intl_org\" : \"48.9\" , \"intl_country\" : \"45.8\" }, { \"year\" : \"2018\" , \"intl_researcher\" : \"57.6\" , \"intl_org\" : \"49.5\" , \"intl_country\" : \"42.5\" }, { \"year\" : \"2017\" , \"intl_researcher\" : \"53.3\" , \"intl_org\" : \"42.9\" , \"intl_country\" : \"43.4\" }, { \"year\" : \"2016\" , \"intl_researcher\" : \"40.6\" , \"intl_org\" : \"37.4\" , \"intl_country\" : \"39.4\" }, { \"year\" : \"2015\" , \"intl_researcher\" : \"38.5\" , \"intl_org\" : \"41.5\" , \"intl_country\" : \"40.2\" } ]","title":"21. International collaboration rate of individuals, with context"},{"location":"queries/21/#21-international-collaboration-rate-of-individuals-with-context","text":"Level: Advanced This query requires a good understanding of SQL and the Dimensions data model","title":"21. International collaboration rate of individuals, with context"},{"location":"queries/21/#description","text":"This query determines the yearly proportion of publications from a single author that include international collaborators. It also calculates the same rate for the author's current institution (for papers in the same field), and the author's current country. A few highlights: We can simplify the query by collecting all the author-specific data up front, in the researcher_details and researcher_field subqueries, and referring to it later simply as something like (SELECT org FROM researcher_details) . When we calculate the percentage of papers that are international collaborations, it would be much simpler to simply write (intl*100) / (intl + domestic) . However, in situations where there are zero papers returned for that particular category, this will return an error because the query would call for dividing by zero. We can avoid this by using the COALESCE function . The COUNTIF function is used multiple times here\u2014it can be helpful in situations where you want to maintain separate counts for different conditionals without using COUNT and lots of separate subqueries.","title":"Description"},{"location":"queries/21/#query","text":"WITH researcher_details AS ( -- grab the basic metadata about the selected researcher SELECT r . id , r . current_research_org AS org , grid . address . country FROM ` dimensions - ai . data_analytics . researchers ` r INNER JOIN ` dimensions - ai . data_analytics . grid ` grid ON r . current_research_org = grid . id WHERE r . id = \"ur.0761121015.96\" -- researcher defined here ), researcher_field AS ( -- determines the field of research code in which -- the researcher has most frequently authored papers SELECT for2 , COUNT ( DISTINCT p . id ) FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( category_for . second_level . codes ) for2 WHERE ( SELECT id FROM researcher_details ) IN UNNEST ( researcher_ids ) GROUP BY 1 ORDER BY 2 DESC LIMIT 1 ), counts_researcher AS ( -- count how many publications from the selected researcher -- include authors from multiple countries SELECT year , COUNTIF ( ARRAY_LENGTH ( p . research_org_countries ) > 1 ) AS intl , COUNTIF ( ARRAY_LENGTH ( p . research_org_countries ) <= 1 ) AS domestic FROM ` dimensions - ai . data_analytics . publications ` p WHERE year >= 2015 AND ( SELECT id FROM researcher_details ) IN UNNEST ( researcher_ids ) GROUP BY year ), counts_org AS ( -- Count how many publications from the selected researcher's -- CURRENT ORGANIZATION that include authors from multiple countries. -- We count only publications in the author's primary field of -- research, and EXCLUDE papers they co-authored. SELECT year , COUNTIF ( ARRAY_LENGTH ( p . research_org_countries ) > 1 ) AS intl , COUNTIF ( ARRAY_LENGTH ( p . research_org_countries ) <= 1 ) AS domestic FROM ` dimensions - ai . data_analytics . publications ` p WHERE year >= 2015 AND ( SELECT org FROM researcher_details ) IN UNNEST ( research_orgs ) AND ( SELECT for2 FROM researcher_field ) IN UNNEST ( category_for . second_level . codes ) AND ( SELECT id FROM researcher_details ) NOT IN UNNEST ( researcher_ids ) GROUP BY year ), counts_country AS ( -- Count how many publications from the selected researcher's -- current COUNTRY that include authors from multiple countries. -- We count only publications in the author's primary field of -- research, and EXCLUDE papers they co-authored. SELECT year , COUNTIF ( ARRAY_LENGTH ( p . research_org_countries ) > 1 ) AS intl , COUNTIF ( ARRAY_LENGTH ( p . research_org_countries ) <= 1 ) AS domestic FROM ` dimensions - ai . data_analytics . publications ` p WHERE year >= 2015 AND ( SELECT country FROM researcher_details ) IN UNNEST ( research_org_country_names ) AND ( SELECT for2 FROM researcher_field ) IN UNNEST ( category_for . second_level . codes ) AND ( SELECT id FROM researcher_details ) NOT IN UNNEST ( researcher_ids ) GROUP BY year ), raw_percents AS ( -- Divide international collabs by total collabs in each category SELECT researcher . year , ( researcher . intl * 100 ) / COALESCE ( researcher . intl + researcher . domestic , 1 ) AS intl_researcher , ( org . intl * 100 ) / COALESCE ( org . intl + org . domestic , 1 ) AS intl_org , ( country . intl * 100 ) / COALESCE ( country . intl + country . domestic , 1 ) AS intl_country , FROM counts_researcher researcher LEFT JOIN counts_org org ON researcher . year = org . year LEFT JOIN counts_country country ON researcher . year = country . year ORDER BY researcher . year DESC ) -- Pull the percentages from the raw_percents table and round them SELECT year , ROUND ( intl_researcher , 1 ) AS intl_researcher , ROUND ( intl_org , 1 ) AS intl_org , ROUND ( intl_country , 1 ) AS intl_country FROM raw_percents","title":"Query"},{"location":"queries/21/#results","text":"[ { \"year\" : \"2021\" , \"intl_researcher\" : \"44.4\" , \"intl_org\" : \"53.8\" , \"intl_country\" : \"59.0\" }, { \"year\" : \"2020\" , \"intl_researcher\" : \"50.0\" , \"intl_org\" : \"54.7\" , \"intl_country\" : \"48.7\" }, { \"year\" : \"2019\" , \"intl_researcher\" : \"53.6\" , \"intl_org\" : \"48.9\" , \"intl_country\" : \"45.8\" }, { \"year\" : \"2018\" , \"intl_researcher\" : \"57.6\" , \"intl_org\" : \"49.5\" , \"intl_country\" : \"42.5\" }, { \"year\" : \"2017\" , \"intl_researcher\" : \"53.3\" , \"intl_org\" : \"42.9\" , \"intl_country\" : \"43.4\" }, { \"year\" : \"2016\" , \"intl_researcher\" : \"40.6\" , \"intl_org\" : \"37.4\" , \"intl_country\" : \"39.4\" }, { \"year\" : \"2015\" , \"intl_researcher\" : \"38.5\" , \"intl_org\" : \"41.5\" , \"intl_country\" : \"40.2\" } ]","title":"Results"},{"location":"queries/22/","text":"22. Incoming citations for a single publication, by journal Level: Medium This query requires basic knowledge of SQL and the Dimensions data model Description This query counts incoming citations for a single publication. Results are grouped by journal, and include the publisher of each journal in the list. The publications table has a citations field that includes the publication IDs of all incoming citations for a given paper. We fetch that list in the citing subquery below, then query the publications table for information about all the IDs in that list. The COALESCE function is used here to minimize the number of null fields in the final results\u2014if an incoming citation is published in a book rather than a journal, for example, then the journal.title field will be NULL , and the boook_title.preferred field is likely to have the value we want. Occasionally, the publisher field is unavailable, so we use COALESCE(p.publisher.name, \"(unknown)\") to make sure there aren't any blank fields. Note The list of citing publications is determined by the clause WHERE p.id='pub.1113640622' . This can be changed to be as broad or narrow as you wish\u2014changing it to something like WHERE journal.title='eLife' , for example, would return incoming citations to an entire journal rather than a single paper. Query WITH citing AS ( SELECT citing_pubs . id FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( citations ) AS citing_pubs WHERE p . id = 'pub.1113640622' -- publication of interest here ) SELECT COALESCE ( p . journal . title , CONCAT ( p . book_title . preferred , ' (book)' ), p . proceedings_title . preferred , CONCAT ( p . title . preferred , ' (book)' ) -- some books have this field instead of book_title ) AS journal , COALESCE ( p . publisher . name , \"(unknown)\" ) AS publisher , p . type AS pubtype , COUNT ( p . id ) AS citations FROM ` dimensions - ai . data_analytics . publications ` p WHERE p . id IN ( SELECT id FROM citing ) GROUP BY 1 , 2 , 3 ORDER BY 4 DESC Results [ { \"journal\" : \"bioRxiv\" , \"publisher\" : \"Cold Spring Harbor Laboratory\" , \"pubtype\" : \"preprint\" , \"citations\" : \"15\" }, { \"journal\" : \"PLOS Biology\" , \"publisher\" : \"Public Library of Science (PLoS)\" , \"pubtype\" : \"article\" , \"citations\" : \"5\" }, { \"journal\" : \"eLife\" , \"publisher\" : \"eLife\" , \"pubtype\" : \"article\" , \"citations\" : \"3\" }, { \"journal\" : \"medRxiv\" , \"publisher\" : \"Cold Spring Harbor Laboratory\" , \"pubtype\" : \"preprint\" , \"citations\" : \"3\" }, { \"journal\" : \"Scientometrics\" , \"publisher\" : \"Springer Nature\" , \"pubtype\" : \"article\" , \"citations\" : \"3\" }, // more entries here... ]","title":"22. Incoming citations for a single publication, by journal"},{"location":"queries/22/#22-incoming-citations-for-a-single-publication-by-journal","text":"Level: Medium This query requires basic knowledge of SQL and the Dimensions data model","title":"22. Incoming citations for a single publication, by journal"},{"location":"queries/22/#description","text":"This query counts incoming citations for a single publication. Results are grouped by journal, and include the publisher of each journal in the list. The publications table has a citations field that includes the publication IDs of all incoming citations for a given paper. We fetch that list in the citing subquery below, then query the publications table for information about all the IDs in that list. The COALESCE function is used here to minimize the number of null fields in the final results\u2014if an incoming citation is published in a book rather than a journal, for example, then the journal.title field will be NULL , and the boook_title.preferred field is likely to have the value we want. Occasionally, the publisher field is unavailable, so we use COALESCE(p.publisher.name, \"(unknown)\") to make sure there aren't any blank fields. Note The list of citing publications is determined by the clause WHERE p.id='pub.1113640622' . This can be changed to be as broad or narrow as you wish\u2014changing it to something like WHERE journal.title='eLife' , for example, would return incoming citations to an entire journal rather than a single paper.","title":"Description"},{"location":"queries/22/#query","text":"WITH citing AS ( SELECT citing_pubs . id FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( citations ) AS citing_pubs WHERE p . id = 'pub.1113640622' -- publication of interest here ) SELECT COALESCE ( p . journal . title , CONCAT ( p . book_title . preferred , ' (book)' ), p . proceedings_title . preferred , CONCAT ( p . title . preferred , ' (book)' ) -- some books have this field instead of book_title ) AS journal , COALESCE ( p . publisher . name , \"(unknown)\" ) AS publisher , p . type AS pubtype , COUNT ( p . id ) AS citations FROM ` dimensions - ai . data_analytics . publications ` p WHERE p . id IN ( SELECT id FROM citing ) GROUP BY 1 , 2 , 3 ORDER BY 4 DESC","title":"Query"},{"location":"queries/22/#results","text":"[ { \"journal\" : \"bioRxiv\" , \"publisher\" : \"Cold Spring Harbor Laboratory\" , \"pubtype\" : \"preprint\" , \"citations\" : \"15\" }, { \"journal\" : \"PLOS Biology\" , \"publisher\" : \"Public Library of Science (PLoS)\" , \"pubtype\" : \"article\" , \"citations\" : \"5\" }, { \"journal\" : \"eLife\" , \"publisher\" : \"eLife\" , \"pubtype\" : \"article\" , \"citations\" : \"3\" }, { \"journal\" : \"medRxiv\" , \"publisher\" : \"Cold Spring Harbor Laboratory\" , \"pubtype\" : \"preprint\" , \"citations\" : \"3\" }, { \"journal\" : \"Scientometrics\" , \"publisher\" : \"Springer Nature\" , \"pubtype\" : \"article\" , \"citations\" : \"3\" }, // more entries here... ]","title":"Results"},{"location":"queries/23/","text":"23. Citing authors by country Level: Medium This query requires basic knowledge of SQL and the Dimensions data model Description This query counts incoming citations for a single publication. The final results count authors , rather than publications, and group counts by the country of each author's current affiliation. The strategy is similar to query 22 , which groups citations by journal: the publications table has a citations field that includes the publication IDs of all incoming citations for a given paper. We fetch that list in the citing subquery below, then query the publications table to get a list of authors for all the publications citing the paper of interest. We join the researchers table to get each author's current affiliation. In the final query, we use the grid table to associate each author affiliation to a single country , then group all results by those countries. Note The list of citing publications is determined by the clause WHERE p.id='pub.1113640622' . This can be changed to be as broad or narrow as you wish\u2014changing it to something like WHERE journal.title='eLife' , for example, would return incoming citations to an entire journal rather than a single paper. Query WITH citing AS ( SELECT citing_pubs . id FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( citations ) AS citing_pubs WHERE p . id = 'pub.1113640622' -- publication of interest ), people_and_grids as ( SELECT COUNT ( DISTINCT auth . researcher_id ) AS people , res . current_research_org AS gridid FROM ` dimensions - ai . data_analytics . publications ` pubs CROSS JOIN UNNEST ( authors ) as auth INNER JOIN ` dimensions - ai . data_analytics . researchers ` res ON res . id = auth . researcher_id WHERE pubs . id IN ( SELECT id FROM citing ) GROUP BY gridid ) SELECT people , address . country FROM people_and_grids INNER JOIN ` dimensions - ai . data_analytics . grid ` gridinfo ON gridinfo . id = people_and_grids . gridid ORDER BY people DESC Results [ { \"people\" : \"10\" , \"country\" : \"Brazil\" }, { \"people\" : \"5\" , \"country\" : \"United States\" }, { \"people\" : \"5\" , \"country\" : \"United States\" }, { \"people\" : \"5\" , \"country\" : \"United States\" }, { \"people\" : \"4\" , \"country\" : \"Croatia\" }, // more results here... ]","title":"23. Citing authors by country"},{"location":"queries/23/#23-citing-authors-by-country","text":"Level: Medium This query requires basic knowledge of SQL and the Dimensions data model","title":"23. Citing authors by country"},{"location":"queries/23/#description","text":"This query counts incoming citations for a single publication. The final results count authors , rather than publications, and group counts by the country of each author's current affiliation. The strategy is similar to query 22 , which groups citations by journal: the publications table has a citations field that includes the publication IDs of all incoming citations for a given paper. We fetch that list in the citing subquery below, then query the publications table to get a list of authors for all the publications citing the paper of interest. We join the researchers table to get each author's current affiliation. In the final query, we use the grid table to associate each author affiliation to a single country , then group all results by those countries. Note The list of citing publications is determined by the clause WHERE p.id='pub.1113640622' . This can be changed to be as broad or narrow as you wish\u2014changing it to something like WHERE journal.title='eLife' , for example, would return incoming citations to an entire journal rather than a single paper.","title":"Description"},{"location":"queries/23/#query","text":"WITH citing AS ( SELECT citing_pubs . id FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( citations ) AS citing_pubs WHERE p . id = 'pub.1113640622' -- publication of interest ), people_and_grids as ( SELECT COUNT ( DISTINCT auth . researcher_id ) AS people , res . current_research_org AS gridid FROM ` dimensions - ai . data_analytics . publications ` pubs CROSS JOIN UNNEST ( authors ) as auth INNER JOIN ` dimensions - ai . data_analytics . researchers ` res ON res . id = auth . researcher_id WHERE pubs . id IN ( SELECT id FROM citing ) GROUP BY gridid ) SELECT people , address . country FROM people_and_grids INNER JOIN ` dimensions - ai . data_analytics . grid ` gridinfo ON gridinfo . id = people_and_grids . gridid ORDER BY people DESC","title":"Query"},{"location":"queries/23/#results","text":"[ { \"people\" : \"10\" , \"country\" : \"Brazil\" }, { \"people\" : \"5\" , \"country\" : \"United States\" }, { \"people\" : \"5\" , \"country\" : \"United States\" }, { \"people\" : \"5\" , \"country\" : \"United States\" }, { \"people\" : \"4\" , \"country\" : \"Croatia\" }, // more results here... ]","title":"Results"},{"location":"queries/24/","text":"24. Organizations and sub-organizations Level: Medium This query requires basic knowledge of SQL and the Dimensions data model Description This query shows how to extract information about a GRID organization together with all of its sub-organizations. Many organizations in the GRID database include parent-child relationships. For example, grid.495456.f (the United States Department of the Air Force page) has both parent and children institutions, so one can use the hierarchy when querying related data e.g. the total number of publications for each of these organizations. The query below shows how to leverage the organization_recursive_child_ids field in the grid table in order to achieve that. This field is prepopulated with all children institutions GRID IDs (recursively), hence it makes it easier to run this type of analyses. Query WITH hierarchy AS ( SELECT g . id AS parent , g . name AS parent_name , children , g2 . name AS children_name , FROM ` dimensions - ai . data_analytics . grid ` g CROSS JOIN UNNEST ( organization_recursive_child_ids ) AS children INNER JOIN ` dimensions - ai . data_analytics . grid ` g2 ON g2 . id = children WHERE g . id = \"grid.495456.f\" -- United States Department of the Air Force ) SELECT hierarchy . * , COUNT ( DISTINCT p . id ) as pubs FROM hierarchy INNER JOIN ` dimensions - ai . data_analytics . publications ` p on hierarchy . children in UNNEST ( p . research_orgs ) GROUP by 1 , 2 , 3 , 4 Breaking it down The key part of the query uses a CROSS JOIN on the organization_recursive_child_ids field to retrieve all the descendants of the chosen organization: SELECT g . id AS parent , children , FROM ` dimensions - ai . data_analytics . grid ` g CROSS JOIN UNNEST ( organization_recursive_child_ids ) AS children WHERE g . id = \"grid.495456.f\" Furthermore, in order to get more organization metadata e.g. the name, an inner self-join is introduced: SELECT g . id AS parent , g . name AS parent_name , children , g2 . name AS children_name , FROM ` dimensions - ai . data_analytics . grid ` g CROSS JOIN UNNEST ( organization_recursive_child_ids ) AS children INNER JOIN ` dimensions - ai . data_analytics . grid ` g2 ON g2 . id = children WHERE g . id = \"grid.495456.f\" The final step is to join also the publications table, so to get the total publications count for each organization. WITH hierarchy AS ( -- the grid query above ) SELECT hierarchy . * , COUNT ( DISTINCT p . id ) as pubs FROM hierarchy INNER JOIN ` dimensions - ai . data_analytics . publications ` p on hierarchy . children in UNNEST ( p . research_orgs ) GROUP by 1 , 2 , 3 , 4 Results [ { \"parent\" : \"grid.495456.f\" , \"parent_name\" : \"United States Department of the Air Force\" , \"children\" : \"grid.494596.3\" , \"children_name\" : \"Edwards Air Force Base\" , \"pubs\" : \"467\" }, { \"parent\" : \"grid.495456.f\" , \"parent_name\" : \"United States Department of the Air Force\" , \"children\" : \"grid.461685.8\" , \"children_name\" : \"Joint Base San Antonio\" , \"pubs\" : \"1031\" }, { \"parent\" : \"grid.495456.f\" , \"parent_name\" : \"United States Department of the Air Force\" , \"children\" : \"grid.265457.7\" , \"children_name\" : \"United States Air Force Academy\" , \"pubs\" : \"3137\" }, { \"parent\" : \"grid.495456.f\" , \"parent_name\" : \"United States Department of the Air Force\" , \"children\" : \"grid.431316.2\" , \"children_name\" : \"Grand Forks Air Force Base\" , \"pubs\" : \"4\" }, { \"parent\" : \"grid.495456.f\" , \"parent_name\" : \"United States Department of the Air Force\" , \"children\" : \"grid.499282.c\" , \"children_name\" : \"Maxwell Air Force Base\" , \"pubs\" : \"201\" }, { \"parent\" : \"grid.495456.f\" , \"parent_name\" : \"United States Department of the Air Force\" , \"children\" : \"grid.417730.6\" , \"children_name\" : \"United States Air Force Research Laboratory\" , \"pubs\" : \"24279\" }, { \"parent\" : \"grid.495456.f\" , \"parent_name\" : \"United States Department of the Air Force\" , \"children\" : \"grid.453002.0\" , \"children_name\" : \"United States Air Force\" , \"pubs\" : \"2545\" }, { \"parent\" : \"grid.495456.f\" , \"parent_name\" : \"United States Department of the Air Force\" , \"children\" : \"grid.461677.5\" , \"children_name\" : \"Eglin Air Force Base\" , \"pubs\" : \"575\" }, { \"parent\" : \"grid.495456.f\" , \"parent_name\" : \"United States Department of the Air Force\" , \"children\" : \"grid.507554.6\" , \"children_name\" : \"United States Air Force Office of Scientific Research\" , \"pubs\" : \"543\" }, { \"parent\" : \"grid.495456.f\" , \"parent_name\" : \"United States Department of the Air Force\" , \"children\" : \"grid.465246.7\" , \"children_name\" : \"Air University\" , \"pubs\" : \"47\" }, { \"parent\" : \"grid.495456.f\" , \"parent_name\" : \"United States Department of the Air Force\" , \"children\" : \"grid.472535.2\" , \"children_name\" : \"Kirtland Air Force Base\" , \"pubs\" : \"801\" }, { \"parent\" : \"grid.495456.f\" , \"parent_name\" : \"United States Department of the Air Force\" , \"children\" : \"grid.461680.d\" , \"children_name\" : \"Hanscom Air Force Base\" , \"pubs\" : \"400\" }, { \"parent\" : \"grid.495456.f\" , \"parent_name\" : \"United States Department of the Air Force\" , \"children\" : \"grid.427848.5\" , \"children_name\" : \"Air Force Institute of Technology\" , \"pubs\" : \"4028\" } // more results here... ]","title":"24. Organizations and sub-organizations"},{"location":"queries/24/#24-organizations-and-sub-organizations","text":"Level: Medium This query requires basic knowledge of SQL and the Dimensions data model","title":"24. Organizations and sub-organizations"},{"location":"queries/24/#description","text":"This query shows how to extract information about a GRID organization together with all of its sub-organizations. Many organizations in the GRID database include parent-child relationships. For example, grid.495456.f (the United States Department of the Air Force page) has both parent and children institutions, so one can use the hierarchy when querying related data e.g. the total number of publications for each of these organizations. The query below shows how to leverage the organization_recursive_child_ids field in the grid table in order to achieve that. This field is prepopulated with all children institutions GRID IDs (recursively), hence it makes it easier to run this type of analyses.","title":"Description"},{"location":"queries/24/#query","text":"WITH hierarchy AS ( SELECT g . id AS parent , g . name AS parent_name , children , g2 . name AS children_name , FROM ` dimensions - ai . data_analytics . grid ` g CROSS JOIN UNNEST ( organization_recursive_child_ids ) AS children INNER JOIN ` dimensions - ai . data_analytics . grid ` g2 ON g2 . id = children WHERE g . id = \"grid.495456.f\" -- United States Department of the Air Force ) SELECT hierarchy . * , COUNT ( DISTINCT p . id ) as pubs FROM hierarchy INNER JOIN ` dimensions - ai . data_analytics . publications ` p on hierarchy . children in UNNEST ( p . research_orgs ) GROUP by 1 , 2 , 3 , 4","title":"Query"},{"location":"queries/24/#breaking-it-down","text":"The key part of the query uses a CROSS JOIN on the organization_recursive_child_ids field to retrieve all the descendants of the chosen organization: SELECT g . id AS parent , children , FROM ` dimensions - ai . data_analytics . grid ` g CROSS JOIN UNNEST ( organization_recursive_child_ids ) AS children WHERE g . id = \"grid.495456.f\" Furthermore, in order to get more organization metadata e.g. the name, an inner self-join is introduced: SELECT g . id AS parent , g . name AS parent_name , children , g2 . name AS children_name , FROM ` dimensions - ai . data_analytics . grid ` g CROSS JOIN UNNEST ( organization_recursive_child_ids ) AS children INNER JOIN ` dimensions - ai . data_analytics . grid ` g2 ON g2 . id = children WHERE g . id = \"grid.495456.f\" The final step is to join also the publications table, so to get the total publications count for each organization. WITH hierarchy AS ( -- the grid query above ) SELECT hierarchy . * , COUNT ( DISTINCT p . id ) as pubs FROM hierarchy INNER JOIN ` dimensions - ai . data_analytics . publications ` p on hierarchy . children in UNNEST ( p . research_orgs ) GROUP by 1 , 2 , 3 , 4","title":"Breaking it down"},{"location":"queries/24/#results","text":"[ { \"parent\" : \"grid.495456.f\" , \"parent_name\" : \"United States Department of the Air Force\" , \"children\" : \"grid.494596.3\" , \"children_name\" : \"Edwards Air Force Base\" , \"pubs\" : \"467\" }, { \"parent\" : \"grid.495456.f\" , \"parent_name\" : \"United States Department of the Air Force\" , \"children\" : \"grid.461685.8\" , \"children_name\" : \"Joint Base San Antonio\" , \"pubs\" : \"1031\" }, { \"parent\" : \"grid.495456.f\" , \"parent_name\" : \"United States Department of the Air Force\" , \"children\" : \"grid.265457.7\" , \"children_name\" : \"United States Air Force Academy\" , \"pubs\" : \"3137\" }, { \"parent\" : \"grid.495456.f\" , \"parent_name\" : \"United States Department of the Air Force\" , \"children\" : \"grid.431316.2\" , \"children_name\" : \"Grand Forks Air Force Base\" , \"pubs\" : \"4\" }, { \"parent\" : \"grid.495456.f\" , \"parent_name\" : \"United States Department of the Air Force\" , \"children\" : \"grid.499282.c\" , \"children_name\" : \"Maxwell Air Force Base\" , \"pubs\" : \"201\" }, { \"parent\" : \"grid.495456.f\" , \"parent_name\" : \"United States Department of the Air Force\" , \"children\" : \"grid.417730.6\" , \"children_name\" : \"United States Air Force Research Laboratory\" , \"pubs\" : \"24279\" }, { \"parent\" : \"grid.495456.f\" , \"parent_name\" : \"United States Department of the Air Force\" , \"children\" : \"grid.453002.0\" , \"children_name\" : \"United States Air Force\" , \"pubs\" : \"2545\" }, { \"parent\" : \"grid.495456.f\" , \"parent_name\" : \"United States Department of the Air Force\" , \"children\" : \"grid.461677.5\" , \"children_name\" : \"Eglin Air Force Base\" , \"pubs\" : \"575\" }, { \"parent\" : \"grid.495456.f\" , \"parent_name\" : \"United States Department of the Air Force\" , \"children\" : \"grid.507554.6\" , \"children_name\" : \"United States Air Force Office of Scientific Research\" , \"pubs\" : \"543\" }, { \"parent\" : \"grid.495456.f\" , \"parent_name\" : \"United States Department of the Air Force\" , \"children\" : \"grid.465246.7\" , \"children_name\" : \"Air University\" , \"pubs\" : \"47\" }, { \"parent\" : \"grid.495456.f\" , \"parent_name\" : \"United States Department of the Air Force\" , \"children\" : \"grid.472535.2\" , \"children_name\" : \"Kirtland Air Force Base\" , \"pubs\" : \"801\" }, { \"parent\" : \"grid.495456.f\" , \"parent_name\" : \"United States Department of the Air Force\" , \"children\" : \"grid.461680.d\" , \"children_name\" : \"Hanscom Air Force Base\" , \"pubs\" : \"400\" }, { \"parent\" : \"grid.495456.f\" , \"parent_name\" : \"United States Department of the Air Force\" , \"children\" : \"grid.427848.5\" , \"children_name\" : \"Air Force Institute of Technology\" , \"pubs\" : \"4028\" } // more results here... ]","title":"Results"},{"location":"queries/25/","text":"25. Grants for an organization Level: Easy This query is suitable for new users of Dimensions on Google BigQuery Description This query counts all grants received by a selected GRID organization and sums up the total amount of funding received, based on the grants start_year . Query SELECT COUNT ( * ) AS total_grants , SUM ( funding_usd ) AS total_grants_amount_usd FROM ` dimensions - ai . data_analytics . grants ` WHERE \"grid.10837.3d\" IN UNNEST ( research_orgs ) AND ( start_year >= 2009 AND start_year <= 2020 ) Results [ { \"total_grants\" : \"731\" , \"total_grants_amount_usd\" : \"8.4692966E8\" } ]","title":"25. Grants for an organization"},{"location":"queries/25/#25-grants-for-an-organization","text":"Level: Easy This query is suitable for new users of Dimensions on Google BigQuery","title":"25. Grants for an organization"},{"location":"queries/25/#description","text":"This query counts all grants received by a selected GRID organization and sums up the total amount of funding received, based on the grants start_year .","title":"Description"},{"location":"queries/25/#query","text":"SELECT COUNT ( * ) AS total_grants , SUM ( funding_usd ) AS total_grants_amount_usd FROM ` dimensions - ai . data_analytics . grants ` WHERE \"grid.10837.3d\" IN UNNEST ( research_orgs ) AND ( start_year >= 2009 AND start_year <= 2020 )","title":"Query"},{"location":"queries/25/#results","text":"[ { \"total_grants\" : \"731\" , \"total_grants_amount_usd\" : \"8.4692966E8\" } ]","title":"Results"},{"location":"queries/26/","text":"26. Field Citation Ratio (FCR) median average Level: Medium This query requires basic knowledge of SQL and the Dimensions data model Description This query calculates the Field Citation Ratio (FCR) mean per year for publications from a chosen country (eg 'CA' ). FCR Mean is the average Field Citation Ratio (FCR), which indicates the relative citation performance of an article, when compared to similarly-aged articles in its Fields of Research (FoR) category. To calculate the geometric mean, we use the following approach, as documented in Thelwall & Fairclough (2015) : For a set of documents, all citation counts are incremented by 1. We calculate the natural log of the citations counts. We add these values together, and divide by the number of documents. We calculate the exponential of this value (reversing the log effect). We reduce the final value by 1. For more background, see this article: What is the FCR? How is it calculated? . Note The equivalent Dimensions API query is: search publications where research_org_countries = \"CA\" return year aggregate fcr_gavg sort by fcr_gavg Query SELECT year , COUNT ( * ) AS pub_count , ( EXP ( AVG ( LN ( metrics . field_citation_ratio + 1 ))) - 1 ) AS fcr_gavg FROM ` dimensions - ai . data_analytics . publications ` AS p WHERE 'CA' IN UNNEST ( research_org_countries ) AND year >= 2000 AND year <= 2019 GROUP BY year ORDER BY year DESC Results [ { \"year\" : \"2019\" , \"pub_count\" : \"126595\" , \"fcr_gavg\" : \"1.895202772875376\" }, { \"year\" : \"2018\" , \"pub_count\" : \"123072\" , \"fcr_gavg\" : \"2.063853669997279\" }, { \"year\" : \"2017\" , \"pub_count\" : \"116099\" , \"fcr_gavg\" : \"2.173716507769935\" }, { \"year\" : \"2016\" , \"pub_count\" : \"110619\" , \"fcr_gavg\" : \"2.2466482612818988\" }, { \"year\" : \"2015\" , \"pub_count\" : \"105632\" , \"fcr_gavg\" : \"2.3125283272558983\" }, { \"year\" : \"2014\" , \"pub_count\" : \"103433\" , \"fcr_gavg\" : \"2.3687156780522907\" }, { \"year\" : \"2013\" , \"pub_count\" : \"98650\" , \"fcr_gavg\" : \"2.467124347845802\" }, { \"year\" : \"2012\" , \"pub_count\" : \"94561\" , \"fcr_gavg\" : \"2.544932622059771\" }, { \"year\" : \"2011\" , \"pub_count\" : \"90036\" , \"fcr_gavg\" : \"2.5889138063645207\" }, { \"year\" : \"2010\" , \"pub_count\" : \"86903\" , \"fcr_gavg\" : \"2.6670704464809525\" }, { \"year\" : \"2009\" , \"pub_count\" : \"83592\" , \"fcr_gavg\" : \"2.686271282515282\" }, { \"year\" : \"2008\" , \"pub_count\" : \"79437\" , \"fcr_gavg\" : \"2.622504341868477\" }, { \"year\" : \"2007\" , \"pub_count\" : \"72631\" , \"fcr_gavg\" : \"2.6134419550710426\" }, { \"year\" : \"2006\" , \"pub_count\" : \"70521\" , \"fcr_gavg\" : \"2.5591136625055593\" }, { \"year\" : \"2005\" , \"pub_count\" : \"63057\" , \"fcr_gavg\" : \"2.6001407619739907\" }, { \"year\" : \"2004\" , \"pub_count\" : \"55570\" , \"fcr_gavg\" : \"2.6729901969921546\" }, { \"year\" : \"2003\" , \"pub_count\" : \"50762\" , \"fcr_gavg\" : \"2.6458690167701433\" }, { \"year\" : \"2002\" , \"pub_count\" : \"46301\" , \"fcr_gavg\" : \"2.5733709228189774\" }, { \"year\" : \"2001\" , \"pub_count\" : \"42605\" , \"fcr_gavg\" : \"2.7140322564560413\" }, { \"year\" : \"2000\" , \"pub_count\" : \"41724\" , \"fcr_gavg\" : \"2.6536040582685607\" } ]","title":"26. Field Citation Ratio (FCR) median average"},{"location":"queries/26/#26-field-citation-ratio-fcr-median-average","text":"Level: Medium This query requires basic knowledge of SQL and the Dimensions data model","title":"26. Field Citation Ratio (FCR) median average"},{"location":"queries/26/#description","text":"This query calculates the Field Citation Ratio (FCR) mean per year for publications from a chosen country (eg 'CA' ). FCR Mean is the average Field Citation Ratio (FCR), which indicates the relative citation performance of an article, when compared to similarly-aged articles in its Fields of Research (FoR) category. To calculate the geometric mean, we use the following approach, as documented in Thelwall & Fairclough (2015) : For a set of documents, all citation counts are incremented by 1. We calculate the natural log of the citations counts. We add these values together, and divide by the number of documents. We calculate the exponential of this value (reversing the log effect). We reduce the final value by 1. For more background, see this article: What is the FCR? How is it calculated? . Note The equivalent Dimensions API query is: search publications where research_org_countries = \"CA\" return year aggregate fcr_gavg sort by fcr_gavg","title":"Description"},{"location":"queries/26/#query","text":"SELECT year , COUNT ( * ) AS pub_count , ( EXP ( AVG ( LN ( metrics . field_citation_ratio + 1 ))) - 1 ) AS fcr_gavg FROM ` dimensions - ai . data_analytics . publications ` AS p WHERE 'CA' IN UNNEST ( research_org_countries ) AND year >= 2000 AND year <= 2019 GROUP BY year ORDER BY year DESC","title":"Query"},{"location":"queries/26/#results","text":"[ { \"year\" : \"2019\" , \"pub_count\" : \"126595\" , \"fcr_gavg\" : \"1.895202772875376\" }, { \"year\" : \"2018\" , \"pub_count\" : \"123072\" , \"fcr_gavg\" : \"2.063853669997279\" }, { \"year\" : \"2017\" , \"pub_count\" : \"116099\" , \"fcr_gavg\" : \"2.173716507769935\" }, { \"year\" : \"2016\" , \"pub_count\" : \"110619\" , \"fcr_gavg\" : \"2.2466482612818988\" }, { \"year\" : \"2015\" , \"pub_count\" : \"105632\" , \"fcr_gavg\" : \"2.3125283272558983\" }, { \"year\" : \"2014\" , \"pub_count\" : \"103433\" , \"fcr_gavg\" : \"2.3687156780522907\" }, { \"year\" : \"2013\" , \"pub_count\" : \"98650\" , \"fcr_gavg\" : \"2.467124347845802\" }, { \"year\" : \"2012\" , \"pub_count\" : \"94561\" , \"fcr_gavg\" : \"2.544932622059771\" }, { \"year\" : \"2011\" , \"pub_count\" : \"90036\" , \"fcr_gavg\" : \"2.5889138063645207\" }, { \"year\" : \"2010\" , \"pub_count\" : \"86903\" , \"fcr_gavg\" : \"2.6670704464809525\" }, { \"year\" : \"2009\" , \"pub_count\" : \"83592\" , \"fcr_gavg\" : \"2.686271282515282\" }, { \"year\" : \"2008\" , \"pub_count\" : \"79437\" , \"fcr_gavg\" : \"2.622504341868477\" }, { \"year\" : \"2007\" , \"pub_count\" : \"72631\" , \"fcr_gavg\" : \"2.6134419550710426\" }, { \"year\" : \"2006\" , \"pub_count\" : \"70521\" , \"fcr_gavg\" : \"2.5591136625055593\" }, { \"year\" : \"2005\" , \"pub_count\" : \"63057\" , \"fcr_gavg\" : \"2.6001407619739907\" }, { \"year\" : \"2004\" , \"pub_count\" : \"55570\" , \"fcr_gavg\" : \"2.6729901969921546\" }, { \"year\" : \"2003\" , \"pub_count\" : \"50762\" , \"fcr_gavg\" : \"2.6458690167701433\" }, { \"year\" : \"2002\" , \"pub_count\" : \"46301\" , \"fcr_gavg\" : \"2.5733709228189774\" }, { \"year\" : \"2001\" , \"pub_count\" : \"42605\" , \"fcr_gavg\" : \"2.7140322564560413\" }, { \"year\" : \"2000\" , \"pub_count\" : \"41724\" , \"fcr_gavg\" : \"2.6536040582685607\" } ]","title":"Results"},{"location":"queries/27/","text":"27. List of corresponding authors Level: Easy This query is suitable for new users of Dimensions on Google BigQuery Description Extract corresponding authors for the Nature Medicine journal. Query SELECT id , doi , title . preferred , a . first_name , a . last_name , a . corresponding , journal . title AS journal_title FROM ` dimensions - ai . data_analytics . publications ` , UNNEST ( authors ) AS a WHERE journal . id = \"jour.1113716\" AND a . corresponding = TRUE LIMIT 10 Results [ { \"id\" : \"pub.1000366392\" , \"doi\" : \"10.1038/74704\" , \"preferred\" : \"Inhibitory Fc receptors modulate in vivo cytoxicity against tumor targets\" , \"first_name\" : \"Jeffrey V.\" , \"last_name\" : \"Ravetch\" , \"corresponding\" : true , \"journal_title\" : \"Nature Medicine\" }, { \"id\" : \"pub.1002332484\" , \"doi\" : \"10.1038/74689\" , \"preferred\" : \"The tyrosine kinase p56lck is essential in coxsackievirus B3-mediated heart disease\" , \"first_name\" : \"Josef M.\" , \"last_name\" : \"Penninger\" , \"corresponding\" : true , \"journal_title\" : \"Nature Medicine\" }, { \"id\" : \"pub.1002696559\" , \"doi\" : \"10.1038/75068\" , \"preferred\" : \"Blockade of interleukin 6 trans signaling suppresses T-cell resistance against apoptosis in chronic intestinal inflammation: Evidence in Crohn disease and experimental colitis in vivo\" , \"first_name\" : \"M.F.\" , \"last_name\" : \"Neurath\" , \"corresponding\" : true , \"journal_title\" : \"Nature Medicine\" }, { \"id\" : \"pub.1001207508\" , \"doi\" : \"10.1038/74918\" , \"preferred\" : \"Human neural progenitor cells: better blue than green?\" , \"first_name\" : \"Alberto\" , \"last_name\" : \"Mart\u00ednez-Serrano\" , \"corresponding\" : true , \"journal_title\" : \"Nature Medicine\" }, { \"id\" : \"pub.1000887404\" , \"doi\" : \"10.1038/73213\" , \"preferred\" : \"Transdermal monitoring of glucose and other analytes using ultrasound\" , \"first_name\" : \"Joseph\" , \"last_name\" : \"Kost\" , \"corresponding\" : true , \"journal_title\" : \"Nature Medicine\" }, { \"id\" : \"pub.1000887404\" , \"doi\" : \"10.1038/73213\" , \"preferred\" : \"Transdermal monitoring of glucose and other analytes using ultrasound\" , \"first_name\" : \"Robert\" , \"last_name\" : \"Langer\" , \"corresponding\" : true , \"journal_title\" : \"Nature Medicine\" }, { \"id\" : \"pub.1000556369\" , \"doi\" : \"10.1038/71527\" , \"preferred\" : \"PR39, a peptide regulator of angiogenesis\" , \"first_name\" : \"Michael\" , \"last_name\" : \"Simons\" , \"corresponding\" : true , \"journal_title\" : \"Nature Medicine\" }, { \"id\" : \"pub.1001854662\" , \"doi\" : \"10.1038/72262\" , \"preferred\" : \"Protection from septic shock by neutralization of macrophage migration inhibitory factor\" , \"first_name\" : \"Thierry\" , \"last_name\" : \"Calandra\" , \"corresponding\" : true , \"journal_title\" : \"Nature Medicine\" }, { \"id\" : \"pub.1000791818\" , \"doi\" : \"10.1038/76267\" , \"preferred\" : \"Immunologic \u2018ignorance\u2019 of vascularized organ transplants in the absence of secondary lymphoid tissue\" , \"first_name\" : \"Fadi G.\" , \"last_name\" : \"Lakkis\" , \"corresponding\" : true , \"journal_title\" : \"Nature Medicine\" }, { \"id\" : \"pub.1002229158\" , \"doi\" : \"10.1038/72329\" , \"preferred\" : \"Molecular mimicry mediated by MHC class Ib molecules after infection with Gram-negative pathogens\" , \"first_name\" : \"Mark J.\" , \"last_name\" : \"Soloski\" , \"corresponding\" : true , \"journal_title\" : \"Nature Medicine\" } ]","title":"27. List of corresponding authors"},{"location":"queries/27/#27-list-of-corresponding-authors","text":"Level: Easy This query is suitable for new users of Dimensions on Google BigQuery","title":"27. List of corresponding authors"},{"location":"queries/27/#description","text":"Extract corresponding authors for the Nature Medicine journal.","title":"Description"},{"location":"queries/27/#query","text":"SELECT id , doi , title . preferred , a . first_name , a . last_name , a . corresponding , journal . title AS journal_title FROM ` dimensions - ai . data_analytics . publications ` , UNNEST ( authors ) AS a WHERE journal . id = \"jour.1113716\" AND a . corresponding = TRUE LIMIT 10","title":"Query"},{"location":"queries/27/#results","text":"[ { \"id\" : \"pub.1000366392\" , \"doi\" : \"10.1038/74704\" , \"preferred\" : \"Inhibitory Fc receptors modulate in vivo cytoxicity against tumor targets\" , \"first_name\" : \"Jeffrey V.\" , \"last_name\" : \"Ravetch\" , \"corresponding\" : true , \"journal_title\" : \"Nature Medicine\" }, { \"id\" : \"pub.1002332484\" , \"doi\" : \"10.1038/74689\" , \"preferred\" : \"The tyrosine kinase p56lck is essential in coxsackievirus B3-mediated heart disease\" , \"first_name\" : \"Josef M.\" , \"last_name\" : \"Penninger\" , \"corresponding\" : true , \"journal_title\" : \"Nature Medicine\" }, { \"id\" : \"pub.1002696559\" , \"doi\" : \"10.1038/75068\" , \"preferred\" : \"Blockade of interleukin 6 trans signaling suppresses T-cell resistance against apoptosis in chronic intestinal inflammation: Evidence in Crohn disease and experimental colitis in vivo\" , \"first_name\" : \"M.F.\" , \"last_name\" : \"Neurath\" , \"corresponding\" : true , \"journal_title\" : \"Nature Medicine\" }, { \"id\" : \"pub.1001207508\" , \"doi\" : \"10.1038/74918\" , \"preferred\" : \"Human neural progenitor cells: better blue than green?\" , \"first_name\" : \"Alberto\" , \"last_name\" : \"Mart\u00ednez-Serrano\" , \"corresponding\" : true , \"journal_title\" : \"Nature Medicine\" }, { \"id\" : \"pub.1000887404\" , \"doi\" : \"10.1038/73213\" , \"preferred\" : \"Transdermal monitoring of glucose and other analytes using ultrasound\" , \"first_name\" : \"Joseph\" , \"last_name\" : \"Kost\" , \"corresponding\" : true , \"journal_title\" : \"Nature Medicine\" }, { \"id\" : \"pub.1000887404\" , \"doi\" : \"10.1038/73213\" , \"preferred\" : \"Transdermal monitoring of glucose and other analytes using ultrasound\" , \"first_name\" : \"Robert\" , \"last_name\" : \"Langer\" , \"corresponding\" : true , \"journal_title\" : \"Nature Medicine\" }, { \"id\" : \"pub.1000556369\" , \"doi\" : \"10.1038/71527\" , \"preferred\" : \"PR39, a peptide regulator of angiogenesis\" , \"first_name\" : \"Michael\" , \"last_name\" : \"Simons\" , \"corresponding\" : true , \"journal_title\" : \"Nature Medicine\" }, { \"id\" : \"pub.1001854662\" , \"doi\" : \"10.1038/72262\" , \"preferred\" : \"Protection from septic shock by neutralization of macrophage migration inhibitory factor\" , \"first_name\" : \"Thierry\" , \"last_name\" : \"Calandra\" , \"corresponding\" : true , \"journal_title\" : \"Nature Medicine\" }, { \"id\" : \"pub.1000791818\" , \"doi\" : \"10.1038/76267\" , \"preferred\" : \"Immunologic \u2018ignorance\u2019 of vascularized organ transplants in the absence of secondary lymphoid tissue\" , \"first_name\" : \"Fadi G.\" , \"last_name\" : \"Lakkis\" , \"corresponding\" : true , \"journal_title\" : \"Nature Medicine\" }, { \"id\" : \"pub.1002229158\" , \"doi\" : \"10.1038/72329\" , \"preferred\" : \"Molecular mimicry mediated by MHC class Ib molecules after infection with Gram-negative pathogens\" , \"first_name\" : \"Mark J.\" , \"last_name\" : \"Soloski\" , \"corresponding\" : true , \"journal_title\" : \"Nature Medicine\" } ]","title":"Results"},{"location":"queries/28/","text":"28. Researcher collaborations Level: Medium This query requires basic knowledge of SQL and the Dimensions data model Description This query generates two-author pairs and counts how many publications are shared between them. The WHERE clause can be used to define a subset of the Dimensions publication dataset to examine\u2014without that, the query will generate co-authorship counts for every author of all 120+ million publications. Note Each two-author pair will have two entries in the results: One for (Researcher 1, Researcher 2) and another for (Researcher 2, Researcher 1) . If you want to prevent duplicates, adding something like WHERE researcher1_id > researcher2_id will arbitrarily pick one of the combinations to display. Query SELECT , CONCAT ( r1 . first_name , \" \" , r1 . last_name ) AS researcher1 , g1 . name AS researcher1_org , CONCAT ( r2 . first_name , \" \" , r2 . last_name ) AS researcher2 , g2 . name AS researcher2_org , COUNT ( p . id ) AS collaborations FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( researcher_ids ) researcher1_id CROSS JOIN UNNEST ( researcher_ids ) researcher2_id INNER JOIN dimensions - ai . data_analytics . researchers r1 ON researcher1_id = r1 . id INNER JOIN dimensions - ai . data_analytics . researchers r2 ON researcher2_id = r2 . id INNER JOIN dimensions - ai . data_analytics . grid g1 ON r1 . current_research_org = g1 . id INNER JOIN dimensions - ai . data_analytics . grid g2 ON r2 . current_research_org = g2 . id WHERE AND researcher1_id <> researcher2_id ---- Here is where you can add filters for which -- publications to evaluate p . year >= 2019 AND '0604' IN UNNEST ( category_for . second_level . codes ) -- genetics GROUP BY 1 , 2 , 3 , 4 ORDER BY 5 DESC Results Row researcher1 researcher1_org researcher2 researcher2_org collaborations 0 Vasileios A Bampidis International Hellenic University Roberto Edoardo Villa University of Milan 67 1 Roberto Edoardo Villa University of Milan Vasileios A Bampidis International Hellenic University 67 2 Alexander Sergeevich Galushko Agrophysical Research Institute Jan Kuever Leibniz Institute for Materials Engineering 66 3 Jan Kuever Leibniz Institute for Materials Engineering Alexander Sergeevich Galushko Agrophysical Research Institute 66 4 Jerome I Rotter Harbor\u2013UCLA Medical Center Kent D Taylor Harbor\u2013UCLA Medical Center 65","title":"28. Researcher collaborations"},{"location":"queries/28/#28-researcher-collaborations","text":"Level: Medium This query requires basic knowledge of SQL and the Dimensions data model","title":"28. Researcher collaborations"},{"location":"queries/28/#description","text":"This query generates two-author pairs and counts how many publications are shared between them. The WHERE clause can be used to define a subset of the Dimensions publication dataset to examine\u2014without that, the query will generate co-authorship counts for every author of all 120+ million publications. Note Each two-author pair will have two entries in the results: One for (Researcher 1, Researcher 2) and another for (Researcher 2, Researcher 1) . If you want to prevent duplicates, adding something like WHERE researcher1_id > researcher2_id will arbitrarily pick one of the combinations to display.","title":"Description"},{"location":"queries/28/#query","text":"SELECT , CONCAT ( r1 . first_name , \" \" , r1 . last_name ) AS researcher1 , g1 . name AS researcher1_org , CONCAT ( r2 . first_name , \" \" , r2 . last_name ) AS researcher2 , g2 . name AS researcher2_org , COUNT ( p . id ) AS collaborations FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( researcher_ids ) researcher1_id CROSS JOIN UNNEST ( researcher_ids ) researcher2_id INNER JOIN dimensions - ai . data_analytics . researchers r1 ON researcher1_id = r1 . id INNER JOIN dimensions - ai . data_analytics . researchers r2 ON researcher2_id = r2 . id INNER JOIN dimensions - ai . data_analytics . grid g1 ON r1 . current_research_org = g1 . id INNER JOIN dimensions - ai . data_analytics . grid g2 ON r2 . current_research_org = g2 . id WHERE AND researcher1_id <> researcher2_id ---- Here is where you can add filters for which -- publications to evaluate p . year >= 2019 AND '0604' IN UNNEST ( category_for . second_level . codes ) -- genetics GROUP BY 1 , 2 , 3 , 4 ORDER BY 5 DESC","title":"Query"},{"location":"queries/28/#results","text":"Row researcher1 researcher1_org researcher2 researcher2_org collaborations 0 Vasileios A Bampidis International Hellenic University Roberto Edoardo Villa University of Milan 67 1 Roberto Edoardo Villa University of Milan Vasileios A Bampidis International Hellenic University 67 2 Alexander Sergeevich Galushko Agrophysical Research Institute Jan Kuever Leibniz Institute for Materials Engineering 66 3 Jan Kuever Leibniz Institute for Materials Engineering Alexander Sergeevich Galushko Agrophysical Research Institute 66 4 Jerome I Rotter Harbor\u2013UCLA Medical Center Kent D Taylor Harbor\u2013UCLA Medical Center 65","title":"Results"},{"location":"queries/29/","text":"29. Institutions collaborations Level: Medium This query requires basic knowledge of SQL and the Dimensions data model Description This query generates pairs of institutions and counts how many publications are shared between authors from those institutions. For example, if authors from the University of Cambridge published 15 papers with authors from the University of Maribor, the Cambridge/Maribor collaborations count would be 15. This does not account for number of authors from these institutions\u2014each publication is counted once per pair of institutions . The WHERE clause can be used to define a subset of the Dimensions publication dataset to examine\u2014without that, the query will generate co-authorship counts for every author of all 120+ million publications. Note Each two-institution pair will have two entries in the results: One for (Institution 1, Institution 2) and another for (Institution 2, Institution 1) . If you want to prevent duplicates, adding something like WHERE org1_id > org2_id will arbitrarily pick one of the combinations to display. Query SELECT g1 . name AS org1 , g2 . name AS org2 , COUNT ( p . id ) AS collaborations FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( research_orgs ) org1_id CROSS JOIN UNNEST ( research_orgs ) org2_id INNER JOIN dimensions - ai . data_analytics . grid g1 ON org1_id = g1 . id INNER JOIN dimensions - ai . data_analytics . grid g2 ON org2_id = g2 . id WHERE org1_id <> org2_id ---- Here is where you can add filters for which -- publications to evaluate AND p . year >= 2019 AND '2101' IN UNNEST ( p . category_for . second_level . codes ) -- Archaeology GROUP BY 1 , 2 ORDER BY 3 DESC Results Row org1 org2 collaborations 0 Rovira i Virgili University Catalan Institute of Human Paleoecology and Social Evolution 444 1 Catalan Institute of Human Paleoecology and Social Evolution Rovira i Virgili University 444 2 Institute of Vertebrate Paleontology and Paleoanthropology University of Chinese Academy of Sciences 134 3 University of Chinese Academy of Sciences Institute of Vertebrate Paleontology and Paleoanthropology 134 4 Rovira i Virgili University National Research Center on Human Evolution 113","title":"29. Institutions collaborations"},{"location":"queries/29/#29-institutions-collaborations","text":"Level: Medium This query requires basic knowledge of SQL and the Dimensions data model","title":"29. Institutions collaborations"},{"location":"queries/29/#description","text":"This query generates pairs of institutions and counts how many publications are shared between authors from those institutions. For example, if authors from the University of Cambridge published 15 papers with authors from the University of Maribor, the Cambridge/Maribor collaborations count would be 15. This does not account for number of authors from these institutions\u2014each publication is counted once per pair of institutions . The WHERE clause can be used to define a subset of the Dimensions publication dataset to examine\u2014without that, the query will generate co-authorship counts for every author of all 120+ million publications. Note Each two-institution pair will have two entries in the results: One for (Institution 1, Institution 2) and another for (Institution 2, Institution 1) . If you want to prevent duplicates, adding something like WHERE org1_id > org2_id will arbitrarily pick one of the combinations to display.","title":"Description"},{"location":"queries/29/#query","text":"SELECT g1 . name AS org1 , g2 . name AS org2 , COUNT ( p . id ) AS collaborations FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( research_orgs ) org1_id CROSS JOIN UNNEST ( research_orgs ) org2_id INNER JOIN dimensions - ai . data_analytics . grid g1 ON org1_id = g1 . id INNER JOIN dimensions - ai . data_analytics . grid g2 ON org2_id = g2 . id WHERE org1_id <> org2_id ---- Here is where you can add filters for which -- publications to evaluate AND p . year >= 2019 AND '2101' IN UNNEST ( p . category_for . second_level . codes ) -- Archaeology GROUP BY 1 , 2 ORDER BY 3 DESC","title":"Query"},{"location":"queries/29/#results","text":"Row org1 org2 collaborations 0 Rovira i Virgili University Catalan Institute of Human Paleoecology and Social Evolution 444 1 Catalan Institute of Human Paleoecology and Social Evolution Rovira i Virgili University 444 2 Institute of Vertebrate Paleontology and Paleoanthropology University of Chinese Academy of Sciences 134 3 University of Chinese Academy of Sciences Institute of Vertebrate Paleontology and Paleoanthropology 134 4 Rovira i Virgili University National Research Center on Human Evolution 113","title":"Results"},{"location":"queries/30/","text":"30. Publication volume growth rate Level: Advanced This query requires a good understanding of SQL and the Dimensions data model Description This query calculates the growth rate of the number of publications in a particular field over time. Using annual numbers can make visualizations almost impossible to read, since year-to-year numbers can be noisy and include large swings in either direction. To avoid this, the query below uses a sliding five-year window : For example, the publication count for 2005 would include all of the publications between 2001 and 2005 . The other way the results are smoothed is in our choice of comparison: Rather than comparing the 2005 total to the 2004 total, we compare 2005 to the previous 5-year window, which ended in 2000 . Both of these strategies can be adjusted in the query: To adjust the \"width\" of the window, modify the line that says 4 PRECEDING to whatever number of years works best for your data. To adjust which windows are compared to get the growth rate, adjust the line that says LAG(running_total, 5) by changing the 5 to a different value. For example, a 5 here means we compare the 2005 total to the 2000 total, but, changing this to LAG(running_total, 1) would compare 2005 to 2004 . Unusual features There are a few components of this query that may not be intuitive, or use a complicated syntax: The SUM(num) OVER ... clause is part of a window function that includes the num field of the previous four rows (ordered by year). The BigQuery documentation has more information about using functions like SUM() OVER . The LAG(running_total, 5) clause does something similar, but instead of adding the previous four rows together, it only retrieves the value from the running_total field from the row five positions higher when ordered by year. This is called a \"navigation function\" and is also discussed in the BigQuery documentation. The allyears subquery is a clunky workaround for situations in which a particular year has no publications of interest. The pub_counts subquery returns a row for each year, and a count of publications in that year, but a year only appears if there's at least one publication. Since we're counting rows in the SUM and LAG functions described above, it would be a big problem if we're calculating a \"five-year window\" that actually stretches over eight years because three years in the window have no publications. allyears returns the exact same numbers as the pubcounts subquery, but it guarantees every year will have a row. The start and end years for this step are defined in the params subquery. Ideally, we could just use the first and last years of the publications in the list, but BigQuery doesn't support \"correlated subqueries\" that reference each other, so this simpler method is used here instead. The line that includes COALESCE(NULLIF(prev_total, 0), 1) is a bit of a hack. Ideally, the rate field would be calculated simply using (running_total - prev_total) / prev_total . However, there may be cases where prev_total is zero, which would throw an error for dividing by zero. Because there is no function for \"change this value if it is zero,\" it has to happen in two steps: NULLIF(prev_total, 0) : If prev_total is equal to 0 , this step returns NULL instead of 0 . COALESCE(NULLIF(prev_total, 0), 1) : If the previous step returns NULL , this step will return 1 instead. The end result is that all non-zero values of prev_total are used without modification, but a value of 0 is changed to a value of 1 . This isn't perfect , since the real answer is an infinite growth rate. Query WITH params AS ( SELECT -- Define the start and end points for your rate calculations. -- Publications outside of this range will be ignored. 1990 AS minyear , 2020 AS maxyear ), pub_counts AS ( SELECT p . year AS pubyear , COUNT ( p . id ) AS num FROM ` dimensions - ai . data_analytics . publications ` p WHERE p . year >= ( SELECT minyear FROM params ) AND p . year <= ( SELECT maxyear FROM params ) ---- HERE is where to define your publications ---- of interest AND '2101' IN UNNEST ( p . category_for . second_level . codes ) -- Archaeology GROUP BY 1 ), allyears AS ( SELECT year , COALESCE ( p . num , 0 ) AS num FROM UNNEST ( GENERATE_ARRAY ( ( SELECT minyear FROM params ), ( SELECT maxyear FROM params ) )) year LEFT JOIN pub_counts p ON p . pubyear = year ), pub_window AS ( SELECT year , num , SUM ( num ) OVER ( ORDER BY year ROWS BETWEEN 4 PRECEDING AND CURRENT ROW ) AS running_total FROM allyears ), pub_collate AS ( SELECT year , num , running_total , LAG ( running_total , 5 ) OVER ( ORDER BY year ASC ) AS prev_total FROM pub_window ) SELECT year , num AS pub_count ,( running_total - prev_total ) / COALESCE ( NULLIF ( prev_total , 0 ), 1 ) AS rate FROM pub_collate WHERE year >= ( SELECT minyear FROM params ) + 10 ORDER BY 1 ASC Results Row year pub_count rate 0 2000 4404 0.1616 1 2001 4152 0.1404 2 2002 4477 0.1413 3 2003 4328 0.1047 4 2004 4190 0.0397","title":"30. Publication volume growth rate"},{"location":"queries/30/#30-publication-volume-growth-rate","text":"Level: Advanced This query requires a good understanding of SQL and the Dimensions data model","title":"30. Publication volume growth rate"},{"location":"queries/30/#description","text":"This query calculates the growth rate of the number of publications in a particular field over time. Using annual numbers can make visualizations almost impossible to read, since year-to-year numbers can be noisy and include large swings in either direction. To avoid this, the query below uses a sliding five-year window : For example, the publication count for 2005 would include all of the publications between 2001 and 2005 . The other way the results are smoothed is in our choice of comparison: Rather than comparing the 2005 total to the 2004 total, we compare 2005 to the previous 5-year window, which ended in 2000 . Both of these strategies can be adjusted in the query: To adjust the \"width\" of the window, modify the line that says 4 PRECEDING to whatever number of years works best for your data. To adjust which windows are compared to get the growth rate, adjust the line that says LAG(running_total, 5) by changing the 5 to a different value. For example, a 5 here means we compare the 2005 total to the 2000 total, but, changing this to LAG(running_total, 1) would compare 2005 to 2004 .","title":"Description"},{"location":"queries/30/#unusual-features","text":"There are a few components of this query that may not be intuitive, or use a complicated syntax: The SUM(num) OVER ... clause is part of a window function that includes the num field of the previous four rows (ordered by year). The BigQuery documentation has more information about using functions like SUM() OVER . The LAG(running_total, 5) clause does something similar, but instead of adding the previous four rows together, it only retrieves the value from the running_total field from the row five positions higher when ordered by year. This is called a \"navigation function\" and is also discussed in the BigQuery documentation. The allyears subquery is a clunky workaround for situations in which a particular year has no publications of interest. The pub_counts subquery returns a row for each year, and a count of publications in that year, but a year only appears if there's at least one publication. Since we're counting rows in the SUM and LAG functions described above, it would be a big problem if we're calculating a \"five-year window\" that actually stretches over eight years because three years in the window have no publications. allyears returns the exact same numbers as the pubcounts subquery, but it guarantees every year will have a row. The start and end years for this step are defined in the params subquery. Ideally, we could just use the first and last years of the publications in the list, but BigQuery doesn't support \"correlated subqueries\" that reference each other, so this simpler method is used here instead. The line that includes COALESCE(NULLIF(prev_total, 0), 1) is a bit of a hack. Ideally, the rate field would be calculated simply using (running_total - prev_total) / prev_total . However, there may be cases where prev_total is zero, which would throw an error for dividing by zero. Because there is no function for \"change this value if it is zero,\" it has to happen in two steps: NULLIF(prev_total, 0) : If prev_total is equal to 0 , this step returns NULL instead of 0 . COALESCE(NULLIF(prev_total, 0), 1) : If the previous step returns NULL , this step will return 1 instead. The end result is that all non-zero values of prev_total are used without modification, but a value of 0 is changed to a value of 1 . This isn't perfect , since the real answer is an infinite growth rate.","title":"Unusual features"},{"location":"queries/30/#query","text":"WITH params AS ( SELECT -- Define the start and end points for your rate calculations. -- Publications outside of this range will be ignored. 1990 AS minyear , 2020 AS maxyear ), pub_counts AS ( SELECT p . year AS pubyear , COUNT ( p . id ) AS num FROM ` dimensions - ai . data_analytics . publications ` p WHERE p . year >= ( SELECT minyear FROM params ) AND p . year <= ( SELECT maxyear FROM params ) ---- HERE is where to define your publications ---- of interest AND '2101' IN UNNEST ( p . category_for . second_level . codes ) -- Archaeology GROUP BY 1 ), allyears AS ( SELECT year , COALESCE ( p . num , 0 ) AS num FROM UNNEST ( GENERATE_ARRAY ( ( SELECT minyear FROM params ), ( SELECT maxyear FROM params ) )) year LEFT JOIN pub_counts p ON p . pubyear = year ), pub_window AS ( SELECT year , num , SUM ( num ) OVER ( ORDER BY year ROWS BETWEEN 4 PRECEDING AND CURRENT ROW ) AS running_total FROM allyears ), pub_collate AS ( SELECT year , num , running_total , LAG ( running_total , 5 ) OVER ( ORDER BY year ASC ) AS prev_total FROM pub_window ) SELECT year , num AS pub_count ,( running_total - prev_total ) / COALESCE ( NULLIF ( prev_total , 0 ), 1 ) AS rate FROM pub_collate WHERE year >= ( SELECT minyear FROM params ) + 10 ORDER BY 1 ASC","title":"Query"},{"location":"queries/30/#results","text":"Row year pub_count rate 0 2000 4404 0.1616 1 2001 4152 0.1404 2 2002 4477 0.1413 3 2003 4328 0.1047 4 2004 4190 0.0397","title":"Results"},{"location":"queries/31/","text":"31. Country-level publication activity over time Level: Advanced This query requires a good understanding of SQL and the Dimensions data model Description This query returns the number of publications in a selected field over time, broken down by the countries with which the authors are affiliated . Both the annual and cumulative totals are available for each country for each year. The example below examines publications in archaeology starting in 1970, which means the row for \"Australia\" in 1981 will include two numbers: pubs , which is the number of publications published in that year that include at least one author affiliated with an institution in Australia. (If a publication has authors from multiple countries, that publication is counted once for each country.) running_total , which indicates the total publications attributed to Australia from 1970 through the current year, in this case 1981. This example returns yearly numbers only for the top eight countries by publication count\u2014the top_countries subquery holds the logic for this step. The rest of the country totals are combined as \"Others\" using the everybody_else subquery. Query WITH results AS ( SELECT DISTINCT id , year , country AS country FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( p . research_org_country_names ) country WHERE ---- HERE is where to define your publications ---- of interest p . year >= 1970 AND '2101' IN UNNEST ( p . category_for . second_level . codes ) -- Archaeology ), counts AS ( SELECT year , country , COUNT ( DISTINCT id ) AS pubs FROM results GROUP BY 1 , 2 ), top_countries AS ( SELECT country , SUM ( pubs ) AS total_pubs FROM counts GROUP BY 1 ORDER BY 2 DESC LIMIT 8 ), everybody_else AS ( SELECT 'Others' AS country , year , SUM ( pubs ) AS pubs FROM counts WHERE counts . country NOT IN ( SELECT country FROM top_countries ) GROUP BY 2 ), everybody_else_all_years AS ( -- We add a CROSS JOIN with the years from the results to make -- sure there's an entry for \"Others\" even in years where that -- number is zero. SELECT base . country , year . year AS year , COALESCE ( everybody_else . pubs , 0 ) AS pubs FROM ( SELECT 'Others' AS country ) base CROSS JOIN ( SELECT DISTINCT year FROM results ) year LEFT JOIN everybody_else ON year . year = everybody_else . year ), counts_consolidated AS ( -- This query makes sure we have an entry for each country -- in each year SELECT top_countries . country , year . year AS year , COALESCE ( counts . pubs , 0 ) AS pubs FROM top_countries CROSS JOIN ( SELECT DISTINCT year FROM results ) year LEFT JOIN counts ON top_countries . country = counts . country AND year . year = counts . year --Then we add everybody else: UNION ALL SELECT * FROM everybody_else_all_years ) SELECT year , country , pubs , SUM ( pubs ) OVER ( PARTITION BY country ORDER BY year ) AS running_total FROM counts_consolidated ORDER BY year , country Results Row year country pubs running_total 0 Australia 1970 15 15 1 Canada 1970 14 14 2 France 1970 6 6 more entries here... 101 Australia 1981 65 360 102 Canada 1981 26 247","title":"31. Country-level publication activity over time"},{"location":"queries/31/#31-country-level-publication-activity-over-time","text":"Level: Advanced This query requires a good understanding of SQL and the Dimensions data model","title":"31. Country-level publication activity over time"},{"location":"queries/31/#description","text":"This query returns the number of publications in a selected field over time, broken down by the countries with which the authors are affiliated . Both the annual and cumulative totals are available for each country for each year. The example below examines publications in archaeology starting in 1970, which means the row for \"Australia\" in 1981 will include two numbers: pubs , which is the number of publications published in that year that include at least one author affiliated with an institution in Australia. (If a publication has authors from multiple countries, that publication is counted once for each country.) running_total , which indicates the total publications attributed to Australia from 1970 through the current year, in this case 1981. This example returns yearly numbers only for the top eight countries by publication count\u2014the top_countries subquery holds the logic for this step. The rest of the country totals are combined as \"Others\" using the everybody_else subquery.","title":"Description"},{"location":"queries/31/#query","text":"WITH results AS ( SELECT DISTINCT id , year , country AS country FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( p . research_org_country_names ) country WHERE ---- HERE is where to define your publications ---- of interest p . year >= 1970 AND '2101' IN UNNEST ( p . category_for . second_level . codes ) -- Archaeology ), counts AS ( SELECT year , country , COUNT ( DISTINCT id ) AS pubs FROM results GROUP BY 1 , 2 ), top_countries AS ( SELECT country , SUM ( pubs ) AS total_pubs FROM counts GROUP BY 1 ORDER BY 2 DESC LIMIT 8 ), everybody_else AS ( SELECT 'Others' AS country , year , SUM ( pubs ) AS pubs FROM counts WHERE counts . country NOT IN ( SELECT country FROM top_countries ) GROUP BY 2 ), everybody_else_all_years AS ( -- We add a CROSS JOIN with the years from the results to make -- sure there's an entry for \"Others\" even in years where that -- number is zero. SELECT base . country , year . year AS year , COALESCE ( everybody_else . pubs , 0 ) AS pubs FROM ( SELECT 'Others' AS country ) base CROSS JOIN ( SELECT DISTINCT year FROM results ) year LEFT JOIN everybody_else ON year . year = everybody_else . year ), counts_consolidated AS ( -- This query makes sure we have an entry for each country -- in each year SELECT top_countries . country , year . year AS year , COALESCE ( counts . pubs , 0 ) AS pubs FROM top_countries CROSS JOIN ( SELECT DISTINCT year FROM results ) year LEFT JOIN counts ON top_countries . country = counts . country AND year . year = counts . year --Then we add everybody else: UNION ALL SELECT * FROM everybody_else_all_years ) SELECT year , country , pubs , SUM ( pubs ) OVER ( PARTITION BY country ORDER BY year ) AS running_total FROM counts_consolidated ORDER BY year , country","title":"Query"},{"location":"queries/31/#results","text":"Row year country pubs running_total 0 Australia 1970 15 15 1 Canada 1970 14 14 2 France 1970 6 6 more entries here... 101 Australia 1981 65 360 102 Canada 1981 26 247","title":"Results"},{"location":"tutorials/","text":"About Tutorials The Tutorials section contains guides that focus on specific topics or use cases, e.g. how to deal with a specific data type, or how to use Google BigQuery in combination with other technologies. Note See also the Dimensions on BigQuery official documentation for more information about how to access the data.","title":"About Tutorials"},{"location":"tutorials/#about-tutorials","text":"The Tutorials section contains guides that focus on specific topics or use cases, e.g. how to deal with a specific data type, or how to use Google BigQuery in combination with other technologies. Note See also the Dimensions on BigQuery official documentation for more information about how to access the data.","title":"About Tutorials"},{"location":"tutorials/01-connection/","text":"Verifying your connection In this tutorial we will show how to connect to Dimensions on Google BigQuery using Python, so that we can then run a few sample queries. Note This tutorial is intended for people who want to query BigQuery via a notebook, but the SQL queries in this lab can also be run directly from the BigQuery console . Prerequisites In order to run this tutorial, please ensure that: You have a valid Dimensions on Google BigQuery account and have configured a Google Cloud project . You have some basic familiarity with Python and Jupyter notebooks . (This tutorial is based on a Jupyter notebook that is available directly via GitHub .) Connection methods There are a few options available: Use Google Colaboratory and your personal credentials. This option is the simplest of all, as it doesn't require you to install anything on your computer. It is normally ok for small to mid-sized projects that can live in the cloud. Use a local Jupyter environment and your personal credentials. This option requires you to install the Google Cloud SDK in order to authenticate. It is the best option if you want to work locally and/or have other Python libraries or services that you need to access. Use a local Jupyter environment and a service account. This option is really a variance on the option 2, for those users that must use a service account. NOTE All of these options require you to first set up a GCP project (if you haven't done it already) and provide your project ID. E.g.: MY_PROJECT_ID = \"my-cool-gbq-project\" Option 1: using Google Colaboratory and your personal credentials Google Colaboratory is a free cloud-based Jupyter environment from Google. This option provides an easy service allowing you to get started with notebooks. Using your Google Account you can create notebooks, execute BigQuery queries and share these with other Google Accounts quickly and easily. # authentication happens via your browser from google.colab import auth auth . authenticate_user () print ( 'Authenticated' ) MY_PROJECT_ID = \"my-cool-gbq-project\" from google.cloud import bigquery client = bigquery . Client ( project = MY_PROJECT_ID ) Option 2: using a local Jupyter and your personal credentials A Google Account represents a developer, an administrator, or any other person who interacts with Google Cloud. This is normally the Google account one has used to get access to the Dimensions on BigQuery product. In order to configure programmatic access for local development, the easiest way is to authenticate using the Google Cloud SDK . $ gcloud auth application-default login Note: the command above should be run from a Terminal or console. This will generate a JSON file that is used as the default application credentials for the account that was selected in the above login process. When using the default Client for each Google provided package (such as BigQuery) they should automatically authenticate using these default credentials. # install python client library ! pip install google - cloud - bigquery - U -- quiet from google.cloud import bigquery MY_PROJECT_ID = \"my-cool-gbq-project\" client = bigquery . Client ( project = MY_PROJECT_ID ) Option 3: using a local Jupyter and a service account A service account is a special kind of account used by an application or a virtual machine (VM) instance, not a person. Each service account is associated with two sets of public/private RSA key pairs that are used to authenticate to Google: Google-managed keys, and user-managed keys. When using a service account you'd just have to point your client object to the a key file. from google.cloud import bigquery credentials_file = 'my-awesome-gbq-project-47616836.json' MY_PROJECT_ID = \"my-cool-gbq-project\" # Explicitly use service account credentials by specifying the private key file client = bigquery . Client . from_service_account_json ( credentials_file ) Running queries Once the connection is set up, all you have to do is to type in a SQL query and run it using the client object. # Query: Top publications from Oxford univ. by Altmetric Score in 2020 query_1 = \"\"\" SELECT id, title.preferred as title, ARRAY_LENGTH(authors) as authors_count, CAST(altmetrics.score as INT64) as altmetric_score FROM `dimensions-ai.data_analytics.publications` WHERE year = 2020 AND 'grid.4991.5' in UNNEST(research_orgs) ORDER BY altmetric_score DESC LIMIT 5\"\"\" # 1 - main syntax query_job = client . query ( query_1 ) results = query_job . result () # Waits for job to complete. for row in results : print ( \"> {} : {} \\n\\t Authors: {} \\n\\t Altmetric Score: {} \" . format ( row . id , row . title , row . authors_count , row . altmetric_score )) > pub.1129493369 : Safety and immunogenicity of the ChAdOx1 nCoV-19 vaccine against SARS-CoV-2: a preliminary report of a phase 1/2, single-blind, randomised controlled trial Authors: 366 Altmetric Score: 15451 > pub.1130340155 : Two metres or one: what is the evidence for physical distancing in covid-19? Authors: 6 Altmetric Score: 15125 > pub.1127239818 : Remdesivir in adults with severe COVID-19: a randomised, double-blind, placebo-controlled, multicentre trial Authors: 46 Altmetric Score: 12675 > pub.1131721397 : Scientific consensus on the COVID-19 pandemic: we need to act now Authors: 31 Altmetric Score: 10192 > pub.1126016857 : Quantifying SARS-CoV-2 transmission suggests epidemic control with digital contact tracing Authors: 9 Altmetric Score: 8320 An slighly alternative syntax is also possible # 2 - omit calling result() query_job = client . query ( query_1 ) for row in query_job : print ( row ) Row(('pub.1129493369', 'Safety and immunogenicity of the ChAdOx1 nCoV-19 vaccine against SARS-CoV-2: a preliminary report of a phase 1/2, single-blind, randomised controlled trial', 366, 15451), {'id': 0, 'title': 1, 'authors_count': 2, 'altmetric_score': 3}) Row(('pub.1130340155', 'Two metres or one: what is the evidence for physical distancing in covid-19?', 6, 15125), {'id': 0, 'title': 1, 'authors_count': 2, 'altmetric_score': 3}) Row(('pub.1127239818', 'Remdesivir in adults with severe COVID-19: a randomised, double-blind, placebo-controlled, multicentre trial', 46, 12675), {'id': 0, 'title': 1, 'authors_count': 2, 'altmetric_score': 3}) Row(('pub.1131721397', 'Scientific consensus on the COVID-19 pandemic: we need to act now', 31, 10192), {'id': 0, 'title': 1, 'authors_count': 2, 'altmetric_score': 3}) Row(('pub.1126016857', 'Quantifying SARS-CoV-2 transmission suggests epidemic control with digital contact tracing', 9, 8320), {'id': 0, 'title': 1, 'authors_count': 2, 'altmetric_score': 3}) Another quite handy feature is to transform data direclty into Pandas dataframes # 3 - return a dataframe query_job = client . query ( query_1 ) . to_dataframe () query_job | Row | id | title | authors_count | altmetric_score | | --- | ----- | ----- | ------------- | --------------- | | 1 | pub.1129493369 | Safety and immunogenicity of the ChAdOx1 nCoV-... | 366 | 15451 | | 2 | pub.1130340155 | Two metres or one: what is the evidence for ph... | 6 | 15125 | | 3 | pub.1127239818 | Remdesivir in adults with severe COVID-19: a r... | 46 | 12675 | | 4 | pub.1131721397 | Scientific consensus on the COVID-19 pandemic:... | 31 | 10192 | | 5 | pub.1126016857 | Quantifying SARS-CoV-2 transmission suggests e... | 9 | 8320 | Advanced: BigQuery magic command and dynamic parameters The Google BigQuery library comes with a magic command that is essentially a nice shortcut method for running queries. This extensions needs to be loaded sepately e.g.: % load_ext google . cloud . bigquery We can then set up a couple of query parameters for the query itself, as well as the usual project ID value. project_id = MY_PROJECT_ID bq_params = {} bq_params [ \"journal_id\" ] = \"jour.1115214\" Finally we can query by starting a cell with the command %%bigquery ... : %% bigquery -- params $ bq_params -- project $ project_id # Publications per year for Nature Biotechnology SELECT count ( * ) as pubs , year , journal . title FROM ` dimensions - ai . data_analytics . publications ` WHERE year >= 2010 AND journal . id = @journal_id GROUP BY year , journal . title ORDER BY year DESC Query complete after 0.02s: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 699.28query/s] Downloading: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 11/11 [00:02<00:00, 4.31rows/s] Row pubs year title 1 438 2020 Nature Biotechnology 2 386 2019 Nature Biotechnology 3 374 2018 Nature Biotechnology 4 380 2017 Nature Biotechnology 5 436 2016 Nature Biotechnology 6 467 2015 Nature Biotechnology 7 475 2014 Nature Biotechnology 8 462 2013 Nature Biotechnology 9 507 2012 Nature Biotechnology 10 459 2011 Nature Biotechnology 11 486 2010 Nature Biotechnology Troubleshooting Query fails wit to_dataframe() ArrowNotImplementedError Try reinstalling pyarrow ie pip install pyarrow -U Query fails with AttributeError: 'NoneType' object has no attribute 'transport' Try pip install google-cloud-bigquery-storage -U and restarting the notebook","title":"Verifying your connection"},{"location":"tutorials/01-connection/#verifying-your-connection","text":"In this tutorial we will show how to connect to Dimensions on Google BigQuery using Python, so that we can then run a few sample queries. Note This tutorial is intended for people who want to query BigQuery via a notebook, but the SQL queries in this lab can also be run directly from the BigQuery console .","title":"Verifying your connection"},{"location":"tutorials/01-connection/#prerequisites","text":"In order to run this tutorial, please ensure that: You have a valid Dimensions on Google BigQuery account and have configured a Google Cloud project . You have some basic familiarity with Python and Jupyter notebooks . (This tutorial is based on a Jupyter notebook that is available directly via GitHub .)","title":"Prerequisites"},{"location":"tutorials/01-connection/#connection-methods","text":"There are a few options available: Use Google Colaboratory and your personal credentials. This option is the simplest of all, as it doesn't require you to install anything on your computer. It is normally ok for small to mid-sized projects that can live in the cloud. Use a local Jupyter environment and your personal credentials. This option requires you to install the Google Cloud SDK in order to authenticate. It is the best option if you want to work locally and/or have other Python libraries or services that you need to access. Use a local Jupyter environment and a service account. This option is really a variance on the option 2, for those users that must use a service account. NOTE All of these options require you to first set up a GCP project (if you haven't done it already) and provide your project ID. E.g.: MY_PROJECT_ID = \"my-cool-gbq-project\"","title":"Connection methods"},{"location":"tutorials/01-connection/#option-1-using-google-colaboratory-and-your-personal-credentials","text":"Google Colaboratory is a free cloud-based Jupyter environment from Google. This option provides an easy service allowing you to get started with notebooks. Using your Google Account you can create notebooks, execute BigQuery queries and share these with other Google Accounts quickly and easily. # authentication happens via your browser from google.colab import auth auth . authenticate_user () print ( 'Authenticated' ) MY_PROJECT_ID = \"my-cool-gbq-project\" from google.cloud import bigquery client = bigquery . Client ( project = MY_PROJECT_ID )","title":"Option 1: using Google Colaboratory and your personal credentials"},{"location":"tutorials/01-connection/#option-2-using-a-local-jupyter-and-your-personal-credentials","text":"A Google Account represents a developer, an administrator, or any other person who interacts with Google Cloud. This is normally the Google account one has used to get access to the Dimensions on BigQuery product. In order to configure programmatic access for local development, the easiest way is to authenticate using the Google Cloud SDK . $ gcloud auth application-default login Note: the command above should be run from a Terminal or console. This will generate a JSON file that is used as the default application credentials for the account that was selected in the above login process. When using the default Client for each Google provided package (such as BigQuery) they should automatically authenticate using these default credentials. # install python client library ! pip install google - cloud - bigquery - U -- quiet from google.cloud import bigquery MY_PROJECT_ID = \"my-cool-gbq-project\" client = bigquery . Client ( project = MY_PROJECT_ID )","title":"Option 2: using a local Jupyter and your personal credentials"},{"location":"tutorials/01-connection/#option-3-using-a-local-jupyter-and-a-service-account","text":"A service account is a special kind of account used by an application or a virtual machine (VM) instance, not a person. Each service account is associated with two sets of public/private RSA key pairs that are used to authenticate to Google: Google-managed keys, and user-managed keys. When using a service account you'd just have to point your client object to the a key file. from google.cloud import bigquery credentials_file = 'my-awesome-gbq-project-47616836.json' MY_PROJECT_ID = \"my-cool-gbq-project\" # Explicitly use service account credentials by specifying the private key file client = bigquery . Client . from_service_account_json ( credentials_file )","title":"Option 3: using a local Jupyter and a service account"},{"location":"tutorials/01-connection/#running-queries","text":"Once the connection is set up, all you have to do is to type in a SQL query and run it using the client object. # Query: Top publications from Oxford univ. by Altmetric Score in 2020 query_1 = \"\"\" SELECT id, title.preferred as title, ARRAY_LENGTH(authors) as authors_count, CAST(altmetrics.score as INT64) as altmetric_score FROM `dimensions-ai.data_analytics.publications` WHERE year = 2020 AND 'grid.4991.5' in UNNEST(research_orgs) ORDER BY altmetric_score DESC LIMIT 5\"\"\" # 1 - main syntax query_job = client . query ( query_1 ) results = query_job . result () # Waits for job to complete. for row in results : print ( \"> {} : {} \\n\\t Authors: {} \\n\\t Altmetric Score: {} \" . format ( row . id , row . title , row . authors_count , row . altmetric_score )) > pub.1129493369 : Safety and immunogenicity of the ChAdOx1 nCoV-19 vaccine against SARS-CoV-2: a preliminary report of a phase 1/2, single-blind, randomised controlled trial Authors: 366 Altmetric Score: 15451 > pub.1130340155 : Two metres or one: what is the evidence for physical distancing in covid-19? Authors: 6 Altmetric Score: 15125 > pub.1127239818 : Remdesivir in adults with severe COVID-19: a randomised, double-blind, placebo-controlled, multicentre trial Authors: 46 Altmetric Score: 12675 > pub.1131721397 : Scientific consensus on the COVID-19 pandemic: we need to act now Authors: 31 Altmetric Score: 10192 > pub.1126016857 : Quantifying SARS-CoV-2 transmission suggests epidemic control with digital contact tracing Authors: 9 Altmetric Score: 8320 An slighly alternative syntax is also possible # 2 - omit calling result() query_job = client . query ( query_1 ) for row in query_job : print ( row ) Row(('pub.1129493369', 'Safety and immunogenicity of the ChAdOx1 nCoV-19 vaccine against SARS-CoV-2: a preliminary report of a phase 1/2, single-blind, randomised controlled trial', 366, 15451), {'id': 0, 'title': 1, 'authors_count': 2, 'altmetric_score': 3}) Row(('pub.1130340155', 'Two metres or one: what is the evidence for physical distancing in covid-19?', 6, 15125), {'id': 0, 'title': 1, 'authors_count': 2, 'altmetric_score': 3}) Row(('pub.1127239818', 'Remdesivir in adults with severe COVID-19: a randomised, double-blind, placebo-controlled, multicentre trial', 46, 12675), {'id': 0, 'title': 1, 'authors_count': 2, 'altmetric_score': 3}) Row(('pub.1131721397', 'Scientific consensus on the COVID-19 pandemic: we need to act now', 31, 10192), {'id': 0, 'title': 1, 'authors_count': 2, 'altmetric_score': 3}) Row(('pub.1126016857', 'Quantifying SARS-CoV-2 transmission suggests epidemic control with digital contact tracing', 9, 8320), {'id': 0, 'title': 1, 'authors_count': 2, 'altmetric_score': 3}) Another quite handy feature is to transform data direclty into Pandas dataframes # 3 - return a dataframe query_job = client . query ( query_1 ) . to_dataframe () query_job | Row | id | title | authors_count | altmetric_score | | --- | ----- | ----- | ------------- | --------------- | | 1 | pub.1129493369 | Safety and immunogenicity of the ChAdOx1 nCoV-... | 366 | 15451 | | 2 | pub.1130340155 | Two metres or one: what is the evidence for ph... | 6 | 15125 | | 3 | pub.1127239818 | Remdesivir in adults with severe COVID-19: a r... | 46 | 12675 | | 4 | pub.1131721397 | Scientific consensus on the COVID-19 pandemic:... | 31 | 10192 | | 5 | pub.1126016857 | Quantifying SARS-CoV-2 transmission suggests e... | 9 | 8320 |","title":"Running queries"},{"location":"tutorials/01-connection/#advanced-bigquery-magic-command-and-dynamic-parameters","text":"The Google BigQuery library comes with a magic command that is essentially a nice shortcut method for running queries. This extensions needs to be loaded sepately e.g.: % load_ext google . cloud . bigquery We can then set up a couple of query parameters for the query itself, as well as the usual project ID value. project_id = MY_PROJECT_ID bq_params = {} bq_params [ \"journal_id\" ] = \"jour.1115214\" Finally we can query by starting a cell with the command %%bigquery ... : %% bigquery -- params $ bq_params -- project $ project_id # Publications per year for Nature Biotechnology SELECT count ( * ) as pubs , year , journal . title FROM ` dimensions - ai . data_analytics . publications ` WHERE year >= 2010 AND journal . id = @journal_id GROUP BY year , journal . title ORDER BY year DESC Query complete after 0.02s: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 699.28query/s] Downloading: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 11/11 [00:02<00:00, 4.31rows/s] Row pubs year title 1 438 2020 Nature Biotechnology 2 386 2019 Nature Biotechnology 3 374 2018 Nature Biotechnology 4 380 2017 Nature Biotechnology 5 436 2016 Nature Biotechnology 6 467 2015 Nature Biotechnology 7 475 2014 Nature Biotechnology 8 462 2013 Nature Biotechnology 9 507 2012 Nature Biotechnology 10 459 2011 Nature Biotechnology 11 486 2010 Nature Biotechnology","title":"Advanced: BigQuery magic command and dynamic parameters"},{"location":"tutorials/01-connection/#troubleshooting","text":"Query fails wit to_dataframe() ArrowNotImplementedError Try reinstalling pyarrow ie pip install pyarrow -U Query fails with AttributeError: 'NoneType' object has no attribute 'transport' Try pip install google-cloud-bigquery-storage -U and restarting the notebook","title":"Troubleshooting"},{"location":"tutorials/02-dsl/","text":"From the DSL API to Google BigQuery This tutorial demonstrates how to perform a full-text search in Dimensions using the Analytics API and then export the data to Google BigQuery for further analysis. This technique allows to take advantage of the strengths of each of these data products: The Analytics API allows to run full-text searches over the hundreds of millions documents stored in the Dimensions database. This makes it an ideal tool for identifying a corpus of documents using collections of keywords and/or other filters (note: this is the same functionality available when you search on app.dimensions.ai) The Dimensions on Google BigQuery database allows to run SQL queries of any complexity using a cloud-based environment containing all of the metadata available in Dimensions, thus removing the need to download/analyse the data offline first. This makes is the perfect solution for advanced analytics tasks such as benchmarking, metrics calculations or impact analyses. Prerequisites In order to run this tutorial, please ensure that: You have a valid Dimensions on Google BigQuery account and have configured a Google Cloud project . You have a valid Dimensions API account . You have some basic familiarity with Python and Jupyter notebooks . (This tutorial is based on a Jupyter notebook that is available directly via GitHub .) Example: profiling researchers linked to a topic The concrete usecase we'll be looking at involves running a full-text search for \"moon landing\" publications using the DSL API, then creating a corpus in BigQuery based on this search (eg see this search ). Once we have the publication corpus available in BigQuery, we will extract all associated researchers (=authors). At the same time, we are going to use SQL in order to enrich the results using other metrics (eg more researchers metadata including citations & altmetric). Getting started The following code will load the Python BigQuery library and authenticate you as a valid user. ! pip install google - cloud - bigquery - U -- quiet % load_ext google . cloud . bigquery import sys print ( \"== \\n Authenticating...\" ) if 'google.colab' in sys . modules : from google.colab import auth auth . authenticate_user () print ( '..done (method: Colab)' ) else : from google.cloud import bigquery print ( '..done (method: local credentials)' ) # # PLEASE UPDATE USING YOUR CLOUD PROJECT ID (= the 'billing' account) # MY_PROJECT_ID = \"ds-data-solutions-gbq\" print ( \"== \\n Testing connection..\" ) client = bigquery . Client ( project = MY_PROJECT_ID ) test = client . query ( \"\"\" SELECT COUNT(*) as pubs from `dimensions-ai.data_analytics.publications` \"\"\" ) rows = [ x for x in test . result ()] print ( \"...success!\" ) print ( \"Total publications in Dimensions: \" , rows [ 0 ][ 'pubs' ]) The google.cloud.bigquery extension is already loaded. To reload it, use: %reload_ext google.cloud.bigquery == Authenticating... ..done (method: local credentials) == Testing connection.. ...success! Total publications in Dimensions: 115963650 1. Connecting to the DSL API For more background on the Analytics API and how to work with it, see this tutorial ! pip install dimcli -- quiet import dimcli from dimcli.utils import * import json import sys import pandas as pd # ENDPOINT = \"https://app.dimensions.ai\" USERNAME , PASSWORD = \"\" , \"\" dimcli . login ( USERNAME , PASSWORD , ENDPOINT ) dsl = dimcli . Dsl () Let's try running a sample query. TIP Review the full text search syntax of the Dimensions Search Language. %% dsldf search publications for \" \\\" moon landing \\\" AND Moon AND \\\" lunar surface \\\" \" return publications limit 10 Returned Publications: 10 (total = 11305) \u001b[2mTime: 0.72s\u001b[0m Row type volume pages id year author_affiliations title journal.id journal.title issue 0 article 122 100692 pub.1134954138 2021 `[[{'raw_affiliation': ['Department of Aerospac...` Review of space habitat designs for long term ... jour.1139377 Progress in Aerospace Sciences NaN 1 article 181 167-189 pub.1130384298 2021 `[[{'raw_affiliation': ['U.S. Naval War College...` Joseph G. Gavin, Jr. and MIT\u2019s contribution to... jour.1134138 Acta Astronautica NaN 2 article 180 650-678 pub.1134475636 2021 `[[{'raw_affiliation': ['Skolkovo Institute of ...` Regolith-based additive manufacturing for sust... jour.1134138 Acta Astronautica NaN 3 article NaN 1-13 pub.1135101079 2021 `[[{'raw_affiliation': ['Centre for Teaching an...` Looking at Gail Jones\u2019s \u201cThe Man in the Moon\u201d ... jour.1137860 Journal of Australian Studies NaN 4 article 21 959 pub.1135057882 2021 `[[{'raw_affiliation': ['School of Artificial I...` Three-Dimensional Model of the Moon with Seman... jour.1033312 Sensors 3 2. Exporting DSL results to Google BigQuery First off, we want to run the full-text search so to extract all relevant publications IDs. Second, we will export the publications IDs to Google BigQuery. NOTE: Pandas provides a handy command to move data to BigQuery: DataFrame.to_gbq . %% dslloopdf search publications for \" \\\" moon landing \\\" AND Moon AND \\\" lunar surface \\\" \" return publications [ id ] Starting iteration with limit=1000 skip=0 ... 0-1000 / 11201 (0.43s) 1000-2000 / 11201 (1.01s) 2000-3000 / 11201 (0.69s) 3000-4000 / 11201 (1.03s) 4000-5000 / 11201 (1.30s) 5000-6000 / 11201 (1.58s) 6000-7000 / 11201 (0.33s) 7000-8000 / 11201 (0.25s) 8000-9000 / 11201 (0.27s) 9000-10000 / 11201 (0.64s) 10000-11000 / 11201 (1.05s) 11000-11201 / 11201 (1.80s) === Records extracted: 11201 Row id 0 pub.1128771471 1 pub.1130814402 2 pub.1131658726 3 pub.1124123379 4 pub.1131232278 ... ... 11196 pub.1061739351 11197 pub.1025947790 11198 pub.1091822752 11199 pub.1025757974 11200 pub.1023928923 11201 rows \u00d7 1 columns df = dsl_last_results The command below will add a new table moonlanding to the demo_dsl dataset in GQB. That destination table is entirely up to you of course, so you need to make sure you have write access to the database. DATASET = \"demo_dsl\" table_id = DATASET + \".moonlanding\" df . to_gbq ( table_id , project_id = PROJECTID , if_exists = \"replace\" ) 1it [00:05, 5.05s/it] That's it - you should now be able to go to the online BigQuery console and see the new demo_dsl.moonlanding dataset. 3. Querying your new dataset using a JOIN on Dimensions We can now use the publications IDs we imported in order to create a JOIN query on the main Dimensions dataset. This is a bit like creating a 'view' of Dimensions corresponding to the full-text search we have done above. GOAL: Roughly, the results should be the same as the 'publication year' facet in the webapp %% bigquery --project $PROJECTID WITH mypubs AS ( SELECT dim_pubs . * FROM ` dimensions - ai . data_analytics . publications ` dim_pubs JOIN ` ds - data - solutions - gbq . demo_dsl . moonlanding ` dslexport ON dim_pubs . id = dslexport . id ) SELECT COUNT ( id ) as tot , year FROM mypubs GROUP BY year ORDER BY tot DESC Row tot year 0 10052 2003 1 133 2020 2 97 2019 3 70 2015 4 66 2017 5 65 2018 6 63 2009 7 59 2013 rows truncated for display 4. Using Google BigQuery to generate researcher statistics The goal is to generate a table just like the one in the 'researchers' analytical view in the webapp . For each researcher we want to display some extra information: the total number of publications the citations count the total Altmetric Attention Score %% bigquery --project $PROJECTID WITH mypubs AS ( SELECT dim_pubs . * FROM ` dimensions - ai . data_analytics . publications ` dim_pubs JOIN ` ds - data - solutions - gbq . demo_dsl . moonlanding ` dslexport ON dim_pubs . id = dslexport . id ), researchers_metrics AS ( SELECT researcher_id , COUNT ( id ) as publications_count , SUM ( citations_count ) as citations_count , SUM ( altmetrics . score ) as altmetric_sum FROM mypubs , UNNEST ( researcher_ids ) as researcher_id GROUP BY researcher_id ) SELECT * FROM researchers_metrics ORDER BY publications_count DESC Row researcher_id publications_count citations_count altmetric_sum 0 ur.01056354465.10 11 21.0 49.0 1 ur.014402173273.44 6 42.0 10.0 2 ur.012373502003.54 4 63.0 NaN 3 ur.010534421371.14 4 63.0 NaN 4 ur.015145367415.34 4 44.0 1.0 ... ... ... ... ... 1080 ur.0767272510.86 1 5.0 NaN 1081 ur.07637166751.28 1 3.0 NaN 1082 ur.012762707227.21 1 3.0 NaN 1083 ur.010101533313.52 1 NaN 1.0 1084 ur.016406136233.64 1 NaN 16.0 Final step : let's add researchers names and current organization details by joining up data from the GRID table . %% bigquery --project $PROJECTID WITH mypubs AS ( SELECT dim_pubs . * FROM ` dimensions - ai . data_analytics . publications ` dim_pubs JOIN ` ds - data - solutions - gbq . demo_dsl . moonlanding ` dslexport ON dim_pubs . id = dslexport . id ), researchers_metrics AS ( SELECT researcher_id , COUNT ( id ) as publications_count , SUM ( citations_count ) as citations_count , SUM ( altmetrics . score ) as altmetric_sum FROM mypubs , UNNEST ( researcher_ids ) as researcher_id GROUP BY researcher_id ), researchers_full AS ( SELECT researchers_metrics . * , r . first_name , r . last_name , r . total_grants , grid . id as grid_id , grid . name as grid_name , grid . address . city as grid_city , grid . address . country as grid_country FROM researchers_metrics JOIN ` dimensions - ai . data_analytics . researchers ` r ON researchers_metrics . researcher_id = r . id JOIN ` dimensions - ai . data_analytics . grid ` grid ON grid . id = r . current_research_org ) SELECT * FROM researchers_full ORDER BY publications_count DESC Row researcher_id publications_count citations_count altmetric_sum first_name last_name total_grants grid_id grid_name grid_city grid_country 0 ur.01056354465.10 11 21.0 49.0 Roger D Launius 4 grid.1214.6 Smithsonian Institution Washington D.C. United States 1 ur.014402173273.44 6 42.0 10.0 Joseph N Pelton 0 grid.33224.34 International Space University Illkirch-Graffenstaden France 2 ur.010243405673.63 4 14.0 NaN Sachiko Wakabayashi 1 grid.62167.34 Japan Aerospace Exploration Agency Tokyo Japan 3 ur.012503545245.69 4 12.0 1.0 Stephan Theil 2 grid.7551.6 German Aerospace Center Cologne Germany 4 ur.0720745255.73 4 8.0 28.0 Chun-Lai Li 3 grid.450302.0 National Astronomical Observatories Beijing China ... ... ... ... ... ... ... ... ... ... ... ... 886 ur.011430662526.22 1 10.0 NaN Gang Lei 0 grid.458502.e Technical Institute of Physics and Chemistry Beijing China 887 ur.015477605337.38 1 1.0 NaN Olivier Dubois-Matra 0 grid.424669.b European Space Research and Technology Centre Noordwijk-Binnen Netherlands 888 ur.013214745135.53 1 NaN NaN Catherine L Newell 0 grid.26790.3a University of Miami Coral Gables United States 889 ur.014464032227.37 1 41.0 141.0 Andrew M Carton 0 grid.25879.31 University of Pennsylvania Philadelphia United States 890 ur.010610572173.89 1 10.0 NaN Zhan Liu 0 grid.411510.0 China University of Mining and Technology Xuzhou China","title":"From the DSL API to Google BigQuery"},{"location":"tutorials/02-dsl/#from-the-dsl-api-to-google-bigquery","text":"This tutorial demonstrates how to perform a full-text search in Dimensions using the Analytics API and then export the data to Google BigQuery for further analysis. This technique allows to take advantage of the strengths of each of these data products: The Analytics API allows to run full-text searches over the hundreds of millions documents stored in the Dimensions database. This makes it an ideal tool for identifying a corpus of documents using collections of keywords and/or other filters (note: this is the same functionality available when you search on app.dimensions.ai) The Dimensions on Google BigQuery database allows to run SQL queries of any complexity using a cloud-based environment containing all of the metadata available in Dimensions, thus removing the need to download/analyse the data offline first. This makes is the perfect solution for advanced analytics tasks such as benchmarking, metrics calculations or impact analyses. Prerequisites In order to run this tutorial, please ensure that: You have a valid Dimensions on Google BigQuery account and have configured a Google Cloud project . You have a valid Dimensions API account . You have some basic familiarity with Python and Jupyter notebooks . (This tutorial is based on a Jupyter notebook that is available directly via GitHub .)","title":"From the DSL API to Google BigQuery"},{"location":"tutorials/02-dsl/#example-profiling-researchers-linked-to-a-topic","text":"The concrete usecase we'll be looking at involves running a full-text search for \"moon landing\" publications using the DSL API, then creating a corpus in BigQuery based on this search (eg see this search ). Once we have the publication corpus available in BigQuery, we will extract all associated researchers (=authors). At the same time, we are going to use SQL in order to enrich the results using other metrics (eg more researchers metadata including citations & altmetric).","title":"Example: profiling researchers linked to a topic"},{"location":"tutorials/02-dsl/#getting-started","text":"The following code will load the Python BigQuery library and authenticate you as a valid user. ! pip install google - cloud - bigquery - U -- quiet % load_ext google . cloud . bigquery import sys print ( \"== \\n Authenticating...\" ) if 'google.colab' in sys . modules : from google.colab import auth auth . authenticate_user () print ( '..done (method: Colab)' ) else : from google.cloud import bigquery print ( '..done (method: local credentials)' ) # # PLEASE UPDATE USING YOUR CLOUD PROJECT ID (= the 'billing' account) # MY_PROJECT_ID = \"ds-data-solutions-gbq\" print ( \"== \\n Testing connection..\" ) client = bigquery . Client ( project = MY_PROJECT_ID ) test = client . query ( \"\"\" SELECT COUNT(*) as pubs from `dimensions-ai.data_analytics.publications` \"\"\" ) rows = [ x for x in test . result ()] print ( \"...success!\" ) print ( \"Total publications in Dimensions: \" , rows [ 0 ][ 'pubs' ]) The google.cloud.bigquery extension is already loaded. To reload it, use: %reload_ext google.cloud.bigquery == Authenticating... ..done (method: local credentials) == Testing connection.. ...success! Total publications in Dimensions: 115963650","title":"Getting started"},{"location":"tutorials/02-dsl/#1-connecting-to-the-dsl-api","text":"For more background on the Analytics API and how to work with it, see this tutorial ! pip install dimcli -- quiet import dimcli from dimcli.utils import * import json import sys import pandas as pd # ENDPOINT = \"https://app.dimensions.ai\" USERNAME , PASSWORD = \"\" , \"\" dimcli . login ( USERNAME , PASSWORD , ENDPOINT ) dsl = dimcli . Dsl () Let's try running a sample query. TIP Review the full text search syntax of the Dimensions Search Language. %% dsldf search publications for \" \\\" moon landing \\\" AND Moon AND \\\" lunar surface \\\" \" return publications limit 10 Returned Publications: 10 (total = 11305) \u001b[2mTime: 0.72s\u001b[0m Row type volume pages id year author_affiliations title journal.id journal.title issue 0 article 122 100692 pub.1134954138 2021 `[[{'raw_affiliation': ['Department of Aerospac...` Review of space habitat designs for long term ... jour.1139377 Progress in Aerospace Sciences NaN 1 article 181 167-189 pub.1130384298 2021 `[[{'raw_affiliation': ['U.S. Naval War College...` Joseph G. Gavin, Jr. and MIT\u2019s contribution to... jour.1134138 Acta Astronautica NaN 2 article 180 650-678 pub.1134475636 2021 `[[{'raw_affiliation': ['Skolkovo Institute of ...` Regolith-based additive manufacturing for sust... jour.1134138 Acta Astronautica NaN 3 article NaN 1-13 pub.1135101079 2021 `[[{'raw_affiliation': ['Centre for Teaching an...` Looking at Gail Jones\u2019s \u201cThe Man in the Moon\u201d ... jour.1137860 Journal of Australian Studies NaN 4 article 21 959 pub.1135057882 2021 `[[{'raw_affiliation': ['School of Artificial I...` Three-Dimensional Model of the Moon with Seman... jour.1033312 Sensors 3","title":"1. Connecting to the DSL API"},{"location":"tutorials/02-dsl/#2-exporting-dsl-results-to-google-bigquery","text":"First off, we want to run the full-text search so to extract all relevant publications IDs. Second, we will export the publications IDs to Google BigQuery. NOTE: Pandas provides a handy command to move data to BigQuery: DataFrame.to_gbq . %% dslloopdf search publications for \" \\\" moon landing \\\" AND Moon AND \\\" lunar surface \\\" \" return publications [ id ] Starting iteration with limit=1000 skip=0 ... 0-1000 / 11201 (0.43s) 1000-2000 / 11201 (1.01s) 2000-3000 / 11201 (0.69s) 3000-4000 / 11201 (1.03s) 4000-5000 / 11201 (1.30s) 5000-6000 / 11201 (1.58s) 6000-7000 / 11201 (0.33s) 7000-8000 / 11201 (0.25s) 8000-9000 / 11201 (0.27s) 9000-10000 / 11201 (0.64s) 10000-11000 / 11201 (1.05s) 11000-11201 / 11201 (1.80s) === Records extracted: 11201 Row id 0 pub.1128771471 1 pub.1130814402 2 pub.1131658726 3 pub.1124123379 4 pub.1131232278 ... ... 11196 pub.1061739351 11197 pub.1025947790 11198 pub.1091822752 11199 pub.1025757974 11200 pub.1023928923 11201 rows \u00d7 1 columns df = dsl_last_results The command below will add a new table moonlanding to the demo_dsl dataset in GQB. That destination table is entirely up to you of course, so you need to make sure you have write access to the database. DATASET = \"demo_dsl\" table_id = DATASET + \".moonlanding\" df . to_gbq ( table_id , project_id = PROJECTID , if_exists = \"replace\" ) 1it [00:05, 5.05s/it] That's it - you should now be able to go to the online BigQuery console and see the new demo_dsl.moonlanding dataset.","title":"2. Exporting DSL results to Google BigQuery"},{"location":"tutorials/02-dsl/#3-querying-your-new-dataset-using-a-join-on-dimensions","text":"We can now use the publications IDs we imported in order to create a JOIN query on the main Dimensions dataset. This is a bit like creating a 'view' of Dimensions corresponding to the full-text search we have done above. GOAL: Roughly, the results should be the same as the 'publication year' facet in the webapp %% bigquery --project $PROJECTID WITH mypubs AS ( SELECT dim_pubs . * FROM ` dimensions - ai . data_analytics . publications ` dim_pubs JOIN ` ds - data - solutions - gbq . demo_dsl . moonlanding ` dslexport ON dim_pubs . id = dslexport . id ) SELECT COUNT ( id ) as tot , year FROM mypubs GROUP BY year ORDER BY tot DESC Row tot year 0 10052 2003 1 133 2020 2 97 2019 3 70 2015 4 66 2017 5 65 2018 6 63 2009 7 59 2013 rows truncated for display","title":"3. Querying your new dataset using a JOIN on Dimensions"},{"location":"tutorials/02-dsl/#4-using-google-bigquery-to-generate-researcher-statistics","text":"The goal is to generate a table just like the one in the 'researchers' analytical view in the webapp . For each researcher we want to display some extra information: the total number of publications the citations count the total Altmetric Attention Score %% bigquery --project $PROJECTID WITH mypubs AS ( SELECT dim_pubs . * FROM ` dimensions - ai . data_analytics . publications ` dim_pubs JOIN ` ds - data - solutions - gbq . demo_dsl . moonlanding ` dslexport ON dim_pubs . id = dslexport . id ), researchers_metrics AS ( SELECT researcher_id , COUNT ( id ) as publications_count , SUM ( citations_count ) as citations_count , SUM ( altmetrics . score ) as altmetric_sum FROM mypubs , UNNEST ( researcher_ids ) as researcher_id GROUP BY researcher_id ) SELECT * FROM researchers_metrics ORDER BY publications_count DESC Row researcher_id publications_count citations_count altmetric_sum 0 ur.01056354465.10 11 21.0 49.0 1 ur.014402173273.44 6 42.0 10.0 2 ur.012373502003.54 4 63.0 NaN 3 ur.010534421371.14 4 63.0 NaN 4 ur.015145367415.34 4 44.0 1.0 ... ... ... ... ... 1080 ur.0767272510.86 1 5.0 NaN 1081 ur.07637166751.28 1 3.0 NaN 1082 ur.012762707227.21 1 3.0 NaN 1083 ur.010101533313.52 1 NaN 1.0 1084 ur.016406136233.64 1 NaN 16.0 Final step : let's add researchers names and current organization details by joining up data from the GRID table . %% bigquery --project $PROJECTID WITH mypubs AS ( SELECT dim_pubs . * FROM ` dimensions - ai . data_analytics . publications ` dim_pubs JOIN ` ds - data - solutions - gbq . demo_dsl . moonlanding ` dslexport ON dim_pubs . id = dslexport . id ), researchers_metrics AS ( SELECT researcher_id , COUNT ( id ) as publications_count , SUM ( citations_count ) as citations_count , SUM ( altmetrics . score ) as altmetric_sum FROM mypubs , UNNEST ( researcher_ids ) as researcher_id GROUP BY researcher_id ), researchers_full AS ( SELECT researchers_metrics . * , r . first_name , r . last_name , r . total_grants , grid . id as grid_id , grid . name as grid_name , grid . address . city as grid_city , grid . address . country as grid_country FROM researchers_metrics JOIN ` dimensions - ai . data_analytics . researchers ` r ON researchers_metrics . researcher_id = r . id JOIN ` dimensions - ai . data_analytics . grid ` grid ON grid . id = r . current_research_org ) SELECT * FROM researchers_full ORDER BY publications_count DESC Row researcher_id publications_count citations_count altmetric_sum first_name last_name total_grants grid_id grid_name grid_city grid_country 0 ur.01056354465.10 11 21.0 49.0 Roger D Launius 4 grid.1214.6 Smithsonian Institution Washington D.C. United States 1 ur.014402173273.44 6 42.0 10.0 Joseph N Pelton 0 grid.33224.34 International Space University Illkirch-Graffenstaden France 2 ur.010243405673.63 4 14.0 NaN Sachiko Wakabayashi 1 grid.62167.34 Japan Aerospace Exploration Agency Tokyo Japan 3 ur.012503545245.69 4 12.0 1.0 Stephan Theil 2 grid.7551.6 German Aerospace Center Cologne Germany 4 ur.0720745255.73 4 8.0 28.0 Chun-Lai Li 3 grid.450302.0 National Astronomical Observatories Beijing China ... ... ... ... ... ... ... ... ... ... ... ... 886 ur.011430662526.22 1 10.0 NaN Gang Lei 0 grid.458502.e Technical Institute of Physics and Chemistry Beijing China 887 ur.015477605337.38 1 1.0 NaN Olivier Dubois-Matra 0 grid.424669.b European Space Research and Technology Centre Noordwijk-Binnen Netherlands 888 ur.013214745135.53 1 NaN NaN Catherine L Newell 0 grid.26790.3a University of Miami Coral Gables United States 889 ur.014464032227.37 1 41.0 141.0 Andrew M Carton 0 grid.25879.31 University of Pennsylvania Philadelphia United States 890 ur.010610572173.89 1 10.0 NaN Zhan Liu 0 grid.411510.0 China University of Mining and Technology Xuzhou China","title":"4. Using Google BigQuery to generate researcher statistics"},{"location":"tutorials/03-dates/","text":"Working with dates Each publication has various dates available. date , year , date_normal , date_online , date_print refer to the publication object. See the documentation to find out more about their meaning. date_imported_gbq refers to when this record was last added to Google BigQuery - this date can be handy if you want to synchronize an external data source to BigQuery. date_inserted : this refers to when this records was originally added to Dimensions. This date does not change, even if the record is later adjusted. The following examples show how to work with publications dates. Prerequisites In order to run this tutorial, please ensure that: You have a valid Dimensions on Google BigQuery account and have configured a Google Cloud project . The online BigQuery console can be used to test the queries below. Comparing date fields Description We'll get started by pulling a selection of the date fields to see their formats: SELECT doi , date , date_normal , year , date_online , date_print , date_imported_gbq , date_inserted FROM ` dimensions - ai . data_analytics . publications ` WHERE year = 2010 AND journal . id = \"jour.1115214\" ORDER BY citations_count DESC LIMIT 10 Results Row doi date date_normal year date_online date_print date_imported_gbq date_inserted 0 10.1038/nbt.1621 2010-05-02 2010-05-02 2010 2010-05-02 2010-05 2021-02-10 01:09:29+00:00 2017-08-31 12:50:56+00:00 1 10.1038/nbt.1630 2010-05-02 2010-05-02 2010 2010-05-02 2010-05 2021-02-10 01:09:29+00:00 2017-08-31 12:50:56+00:00 2 10.1038/nbt.1614 2010-03 2010-03-01 2010 null 2010-03 2021-02-10 01:09:29+00:00 2017-08-31 12:50:56+00:00 3 10.1038/nbt.1685 2010-10-13 2010-10-13 2010 2010-10-13 2010-10 2021-02-10 00:53:56+00:00 2017-08-31 12:50:56+00:00 4 10.1038/nbt1210-1248 2010-12-07 2010-12-07 2010 2010-12-07 2010-12 2021-02-10 00:53:56+00:00 2017-08-31 12:50:56+00:00 5 10.1038/nbt.1755 2010-12-22 2010-12-22 2010 2010-12-22 2011-02 2021-02-10 01:09:29+00:00 2017-08-31 12:50:56+00:00 6 10.1038/nbt1010-1045 2010-10-13 2010-10-13 2010 2010-10-13 2010-10 2021-02-10 00:53:56+00:00 2017-08-31 12:50:56+00:00 7 10.1038/nbt.1633 2010-05-02 2010-05-02 2010 2010-05-02 2010-05 2021-02-10 00:53:56+00:00 2017-08-31 12:50:56+00:00 8 10.1038/nbt.1667 2010-07-19 2010-07-19 2010 2010-07-19 2010-08 2021-02-10 01:09:29+00:00 2017-08-31 12:50:56+00:00 9 10.1038/nbt.1641 2010-05-23 2010-05-23 2010 2010-05-23 2010-06 2021-02-10 00:53:56+00:00 2017-08-31 12:50:56+00:00 The first thing to stick out is that some of the dates are actually timestamps : date_imported_gbq and date_inserted have times attached to the dates. The other important caveat is that some dates aren't actually whole dates: Some values in the date and date_print fields have only a year and month. One of the reasons these different types are important is because can add an extra step when you compare fields to each other. For example, if we wanted to count how many publications were added to Dimensions before their \"publication\" date, it would be intuitive to write a query like this: SELECT COUNT ( id ) FROM ` dimensions - ai . data_analytics . publications ` WHERE year = 2020 AND date > date_inserted However, we get an error from BigQuery: No matching signature for operator > for argument types: STRING, TIMESTAMP. Supported signature: ANY > ANY at [12:11] . BigQuery won't do the comparison because both sides of the comparison aren't of the same type: The date field is of type STRING , since it doesn't always have a day (or month) attached. The date_normal field solves this for us: It uses the same information as the date field, but it fills in the gaps to make a full DATE entry\u2014so \"2010-03\" in the date field becomes 2010-03-01 in date_normal . But swapping that in doesn't fix our problems either: SELECT COUNT ( id ) FROM ` dimensions - ai . data_analytics . publications ` WHERE year = 2020 AND date_normal > date_inserted We run into a new variant of the issue now: No matching signature for operator > for argument types: DATE, TIMESTAMP. Supported signature: ANY > ANY at [5:7] . Now date_normal gives us a DATE , but we can't compare that to a TIMESTAMP . Generally, you can mitigate most issues with comparing date fields by converting one of them to match the other , and BigQuery supports multiple functions for manipulating dates and datetimes . This one should do the trick: SELECT COUNT ( id ) FROM ` dimensions - ai . data_analytics . publications ` WHERE year = 2020 AND date_normal > DATE ( date_inserted ) Results: Row f0_ 1 859011 Number of publications added to Dimensions by month Description Next, we'll use the date_inserted field to count the number of publications added to the Dimensions database per month. date_inserted is of type DATETIME , so we choose from the datetime manipulation functions to round down all dates to the first of the month: SELECT DATETIME_TRUNC ( date_inserted , MONTH ) as added_date , COUNT ( id ) as countDim FROM ` dimensions - ai . data_analytics . publications ` GROUP BY added_date ORDER BY added_date DESC LIMIT 5 Results Row added_date countDim 1 2021-04-01 00:00:00 UTC 534043 2 2021-03-01 00:00:00 UTC 746963 3 2021-02-01 00:00:00 UTC 661575 4 2021-01-01 00:00:00 UTC 687764 5 2020-12-01 00:00:00 UTC 828307 We can see the dates have all been collapsed into the first of the month for each paper, but those timestamps that are attached are unhelpful. We can get rid of them by converting date_inserted to a DATE first, and switch to using the DATE_TRUNC function instead: SELECT DATE_TRUNC ( DATE ( date_inserted ), MONTH ) as added_date , COUNT ( id ) as countDim FROM ` dimensions - ai . data_analytics . publications ` GROUP BY added_date ORDER BY added_date DESC LIMIT 5 Results Row added_date countDim 1 2021-04-01 534043 2 2021-03-01 746963 3 2021-02-01 661575 4 2021-01-01 687764 5 2020-12-01 828307 That looks much better. If we want to manipulate different parts of the dates separately, we can also use EXTRACT to split things up: SELECT EXTRACT ( MONTH FROM date_inserted ) as added_month , EXTRACT ( YEAR FROM date_inserted ) as added_year , COUNT ( id ) as countDim FROM ` dimensions - ai . data_analytics . publications ` GROUP BY added_month , added_year ORDER BY added_year DESC , added_month DESC LIMIT 5 Results Row added_month added_year countDim 1 4 2021 534043 2 3 2021 746963 3 2 2021 661575 4 1 2021 687764 5 12 2020 828307","title":"Working with dates"},{"location":"tutorials/03-dates/#working-with-dates","text":"Each publication has various dates available. date , year , date_normal , date_online , date_print refer to the publication object. See the documentation to find out more about their meaning. date_imported_gbq refers to when this record was last added to Google BigQuery - this date can be handy if you want to synchronize an external data source to BigQuery. date_inserted : this refers to when this records was originally added to Dimensions. This date does not change, even if the record is later adjusted. The following examples show how to work with publications dates. Prerequisites In order to run this tutorial, please ensure that: You have a valid Dimensions on Google BigQuery account and have configured a Google Cloud project . The online BigQuery console can be used to test the queries below.","title":"Working with dates"},{"location":"tutorials/03-dates/#comparing-date-fields","text":"","title":"Comparing date fields"},{"location":"tutorials/03-dates/#description","text":"We'll get started by pulling a selection of the date fields to see their formats: SELECT doi , date , date_normal , year , date_online , date_print , date_imported_gbq , date_inserted FROM ` dimensions - ai . data_analytics . publications ` WHERE year = 2010 AND journal . id = \"jour.1115214\" ORDER BY citations_count DESC LIMIT 10 Results Row doi date date_normal year date_online date_print date_imported_gbq date_inserted 0 10.1038/nbt.1621 2010-05-02 2010-05-02 2010 2010-05-02 2010-05 2021-02-10 01:09:29+00:00 2017-08-31 12:50:56+00:00 1 10.1038/nbt.1630 2010-05-02 2010-05-02 2010 2010-05-02 2010-05 2021-02-10 01:09:29+00:00 2017-08-31 12:50:56+00:00 2 10.1038/nbt.1614 2010-03 2010-03-01 2010 null 2010-03 2021-02-10 01:09:29+00:00 2017-08-31 12:50:56+00:00 3 10.1038/nbt.1685 2010-10-13 2010-10-13 2010 2010-10-13 2010-10 2021-02-10 00:53:56+00:00 2017-08-31 12:50:56+00:00 4 10.1038/nbt1210-1248 2010-12-07 2010-12-07 2010 2010-12-07 2010-12 2021-02-10 00:53:56+00:00 2017-08-31 12:50:56+00:00 5 10.1038/nbt.1755 2010-12-22 2010-12-22 2010 2010-12-22 2011-02 2021-02-10 01:09:29+00:00 2017-08-31 12:50:56+00:00 6 10.1038/nbt1010-1045 2010-10-13 2010-10-13 2010 2010-10-13 2010-10 2021-02-10 00:53:56+00:00 2017-08-31 12:50:56+00:00 7 10.1038/nbt.1633 2010-05-02 2010-05-02 2010 2010-05-02 2010-05 2021-02-10 00:53:56+00:00 2017-08-31 12:50:56+00:00 8 10.1038/nbt.1667 2010-07-19 2010-07-19 2010 2010-07-19 2010-08 2021-02-10 01:09:29+00:00 2017-08-31 12:50:56+00:00 9 10.1038/nbt.1641 2010-05-23 2010-05-23 2010 2010-05-23 2010-06 2021-02-10 00:53:56+00:00 2017-08-31 12:50:56+00:00 The first thing to stick out is that some of the dates are actually timestamps : date_imported_gbq and date_inserted have times attached to the dates. The other important caveat is that some dates aren't actually whole dates: Some values in the date and date_print fields have only a year and month. One of the reasons these different types are important is because can add an extra step when you compare fields to each other. For example, if we wanted to count how many publications were added to Dimensions before their \"publication\" date, it would be intuitive to write a query like this: SELECT COUNT ( id ) FROM ` dimensions - ai . data_analytics . publications ` WHERE year = 2020 AND date > date_inserted However, we get an error from BigQuery: No matching signature for operator > for argument types: STRING, TIMESTAMP. Supported signature: ANY > ANY at [12:11] . BigQuery won't do the comparison because both sides of the comparison aren't of the same type: The date field is of type STRING , since it doesn't always have a day (or month) attached. The date_normal field solves this for us: It uses the same information as the date field, but it fills in the gaps to make a full DATE entry\u2014so \"2010-03\" in the date field becomes 2010-03-01 in date_normal . But swapping that in doesn't fix our problems either: SELECT COUNT ( id ) FROM ` dimensions - ai . data_analytics . publications ` WHERE year = 2020 AND date_normal > date_inserted We run into a new variant of the issue now: No matching signature for operator > for argument types: DATE, TIMESTAMP. Supported signature: ANY > ANY at [5:7] . Now date_normal gives us a DATE , but we can't compare that to a TIMESTAMP . Generally, you can mitigate most issues with comparing date fields by converting one of them to match the other , and BigQuery supports multiple functions for manipulating dates and datetimes . This one should do the trick: SELECT COUNT ( id ) FROM ` dimensions - ai . data_analytics . publications ` WHERE year = 2020 AND date_normal > DATE ( date_inserted ) Results: Row f0_ 1 859011","title":"Description"},{"location":"tutorials/03-dates/#number-of-publications-added-to-dimensions-by-month","text":"","title":"Number of publications added to Dimensions by month"},{"location":"tutorials/03-dates/#description_1","text":"Next, we'll use the date_inserted field to count the number of publications added to the Dimensions database per month. date_inserted is of type DATETIME , so we choose from the datetime manipulation functions to round down all dates to the first of the month: SELECT DATETIME_TRUNC ( date_inserted , MONTH ) as added_date , COUNT ( id ) as countDim FROM ` dimensions - ai . data_analytics . publications ` GROUP BY added_date ORDER BY added_date DESC LIMIT 5 Results Row added_date countDim 1 2021-04-01 00:00:00 UTC 534043 2 2021-03-01 00:00:00 UTC 746963 3 2021-02-01 00:00:00 UTC 661575 4 2021-01-01 00:00:00 UTC 687764 5 2020-12-01 00:00:00 UTC 828307 We can see the dates have all been collapsed into the first of the month for each paper, but those timestamps that are attached are unhelpful. We can get rid of them by converting date_inserted to a DATE first, and switch to using the DATE_TRUNC function instead: SELECT DATE_TRUNC ( DATE ( date_inserted ), MONTH ) as added_date , COUNT ( id ) as countDim FROM ` dimensions - ai . data_analytics . publications ` GROUP BY added_date ORDER BY added_date DESC LIMIT 5 Results Row added_date countDim 1 2021-04-01 534043 2 2021-03-01 746963 3 2021-02-01 661575 4 2021-01-01 687764 5 2020-12-01 828307 That looks much better. If we want to manipulate different parts of the dates separately, we can also use EXTRACT to split things up: SELECT EXTRACT ( MONTH FROM date_inserted ) as added_month , EXTRACT ( YEAR FROM date_inserted ) as added_year , COUNT ( id ) as countDim FROM ` dimensions - ai . data_analytics . publications ` GROUP BY added_month , added_year ORDER BY added_year DESC , added_month DESC LIMIT 5 Results Row added_month added_year countDim 1 4 2021 534043 2 3 2021 746963 3 2 2021 661575 4 1 2021 687764 5 12 2020 828307","title":"Description"},{"location":"tutorials/04-nested/","text":"Working with nested and repeated fields A prominent feature of Google BigQuery is their addition of nested and repeated fields to what may otherwise be a familiar SQL paradigm. Both present opportunities to reorganize data within single tables in novel ways, but they can take some time to get used to. Below, we explain the basics of nested and repeated fields, work through several examples, and provide links to external resources that we've found helpful. Prerequisites In order to run this tutorial, please ensure that: You have a valid Dimensions on Google BigQuery account and have configured a Google Cloud project . The online Google BigQuery console can be used to test the queries below. What are they? Repeated fields Repeated fields approximate a \"one-to-many\" relationship and provide an opportunity to define a field that can hold multiple values per row . We can demonstrate this by running a query against the publications table for values in the clinical_trial_ids field: SELECT id , LEFT ( title . preferred , 25 ) AS title , clinical_trial_ids FROM ` dimensions - ai . data_analytics . publications ` WHERE ARRAY_LENGTH ( clinical_trial_ids ) > 0 LIMIT 10 The (heavily truncated) results look something like this: Row id title clinical_trial_ids 1 pub.1003360568 A Randomized, Controlled... NCT00014989 2 pub.1003935609 8568 Prophylactic swallow... NCT00332865 3 pub.1004269292 Clinical Trial Alert... NCT00953940 NCT00970073 NCT00994253 NCT00987103 NCT00974636 4 pub.1004095142 6502 A double-blinded, pl... NCT00219557 NCT00428597 5 pub.1004119511 Intrathecal morphine in a... NCT00119184 You can see that rows 3 and 4 have multiple values in the clinical_trial_ids field, despite all values getting listed within a single row number . Nested fields Nested fields, on their own, are much simpler: They are fields that are linked together as a single entity, like a struct or an object. The title field in the publications table is a good example of this: Rather than a single string indicating the title of the publication, it is a nested field that has two strings within it: \"original\" and \"preferred\" , mostly to accommodate titles expressed in multiple languages. Querying nested fields looks almost identical to querying more conventional ones. For example, with the title field: SELECT id , title FROM ` dimensions - ai . data_analytics . publications ` LIMIT 4 Results: Row id title.preferred title.original 1 pub.1123921006 Effects of \"1+N\" extended nursing on medication comp... \"1+N\"\u5ef6\u4f38\u62a4\u7406\u6a21\u5f0f\u5bf92\u578b\u7cd6\u5c3f\u75c5\u60a3\u8005\u7528\u836f\u4f9d\u4ece\u6027\u53ca\u81ea\u6211\u7ba1\u7406\u80fd\u529b\u7684\u5f71\u54cd 2 pub.1123897378 Clinical observation of the prevention of pressu... \u9f99\u8840\u7aed\u9884\u9632\u6076\u6027\u80bf\u7624\u5f3a\u8feb\u4f53\u4f4d\u60a3\u8005\u538b\u75ae\u7684\u4e34\u5e8a\u89c2\u5bdf 3 pub.1039091814 IV. A new improved silk-reel. null 4 pub.1123920716 Effect of resina draconis for external applica... \u9f99\u8840\u7aed\u80f6\u56ca\u7c89\u5916\u6577\u6cbb\u7597\u538b\u75ae\u7597\u6548\u7684Meta\u5206\u6790 Repeated nested fields This is where things get a little more complicated: One of the main ways nested fields make themselves useful is when they're repeated : So while a repeated field might be an array of strings (clinical trial IDs, for example), they can also be an array of objects. The authors field of the publications table is a good example of this: SELECT id , title . preferred , authors FROM ` dimensions - ai . data_analytics . publications ` LIMIT 3 Results: Row id title.preferred authors.first_name authors.last_name authors.researcher_id 1 pub.1001350088 The T-120/130-12.8 and PT... G.D. Barinberg ur.012510636551.40 A.E. Valamin ur.012211770163.32 Yu. A. Sakhnin ur.010306240353.29 A. Yu. Kultyshev ur.014402311563.25 2 pub.1000116807 Application of Electrorhe... Ken'ichi Koyanagi ur.013307555250.87 Yasuhiro Kakinuma ur.013275435603.18 You can see here that the author information appears the same way as the clinical trial IDs above, except each repeated entry within a row has multiple fields about each author. (There are many more fields that will appear if you query authors; they've been removed here for clarity.) The useful part about using nested fields for the authors, rather than a bunch of repeated fields alone (one for first_name , another repeated field for last_name , etc) is because those nested fields will stay together : For the publication in row 1, the \"A.E.\" first name will always appear alongside the \"Valamin\" last name, rather than shuffling them around like what may happen if you queried them separately. Querying nested fields We'll start writing queries with nested fields alone first, since it's the simplest to do. We actually did it several times in the above examples: The title field in the publications table is a nested field with two fields in it: original and preferred . If you don't specify which values you want, you'll get them all , like this: SELECT id , title FROM ` dimensions - ai . data_analytics . publications ` LIMIT 4 Results: Row id title.preferred title.original 1 pub.1123921006 Effects of \"1+N\" extended nursing on medication comp... \"1+N\"\u5ef6\u4f38\u62a4\u7406\u6a21\u5f0f\u5bf92\u578b\u7cd6\u5c3f\u75c5\u60a3\u8005\u7528\u836f\u4f9d\u4ece\u6027\u53ca\u81ea\u6211\u7ba1\u7406\u80fd\u529b\u7684\u5f71\u54cd 2 pub.1123897378 Clinical observation of the prevention of pressu... \u9f99\u8840\u7aed\u9884\u9632\u6076\u6027\u80bf\u7624\u5f3a\u8feb\u4f53\u4f4d\u60a3\u8005\u538b\u75ae\u7684\u4e34\u5e8a\u89c2\u5bdf 3 pub.1039091814 IV. A new improved silk-reel. null 4 pub.1123920716 Effect of resina draconis for external applica... \u9f99\u8840\u7aed\u80f6\u56ca\u7c89\u5916\u6577\u6cbb\u7597\u538b\u75ae\u7597\u6548\u7684Meta\u5206\u6790 If you wanted only the preferred field of the title , you can specify that using periods. Nested fields can have more nested fields within them, so there may be multiple entries. Luckily, we only need one period for the title: SELECT id , title . preferred FROM ` dimensions - ai . data_analytics . publications ` LIMIT 4 Results: Row id title.preferred 1 pub.1123921006 Effects of \"1+N\" extended nursing on medication comp... 2 pub.1123897378 Clinical observation of the prevention of pressu... 3 pub.1039091814 IV. A new improved silk-reel. 4 pub.1123920716 Effect of resina draconis for external applica... Querying repeated fields Repeated fields are where we need to start using more exotic patterns to extract information. The UNNEST function is the primary tool for the job here\u2014it converts an array of values into rows in a table, which, if necessary, can then be joined to the original table you're querying. Example 1: Checking contents of array We'll start with a simple one: the funder_orgs field in the publications table, which lists GRID IDs indicating which organizations funded the research in the publication. IF we wanted to find publications funded by the Brazilian Agricultural Research Corporation, for example, we can use its GRID ID (grid.460200.0) in a WHERE clause: SELECT type , COUNT ( id ) AS funded_pubs FROM ` dimensions - ai . data_analytics . publications ` WHERE 'grid.460200.0' IN UNNEST ( funder_orgs ) GROUP BY type Results Row type funded_pubs 1 preceeding 23 2 article 6042 3 preprint 21 4 chapter 33 Example 2: Joining tables using a repeated field Queries can also return the contents of repeated fields. Using a CROSS JOIN , the information can be distributed into separate rows, rather than arrays inside single rows. For this example, we'll look at organizations that have funded recent articles published in eLife , a life sciences journal. We'll start by selecting the information we can get from the publications table: SELECT p . id , forg FROM ` dimensions - ai . data_analytics . publications ` AS p CROSS JOIN UNNEST ( funder_orgs ) AS forg -- This is the important line WHERE type = 'article' AND journal . id = 'jour.1046517' -- eLife Row id forg 1 pub.1000035854 grid.14105.31 2 pub.1000321327 grid.48336.3a 3 pub.1000131550 grid.422384.b 4 pub.1000131550 grid.419475.a 5 pub.1000131550 grid.453152.4 6 pub.1000131550 grid.280362.d 7 pub.1000131550 grid.416870.c There are a few things to point out here: First, notice that we're querying a nested field within the journal field on the final line\u2014we want only publications in which the journal field lists an id that matches the one assigned to eLife . We're also using a CROSS JOIN with the funder_orgs field. A cross join returns the Cartesian product of the two tables being joined\u2014to wit, every value on one side of the join (in this case, the publications table) will appear with every matching value from the right side of the join (the \"table\" created by the call to UNNEST(funder_orgs) ). This is demonstrated in lines 3 through 7 of the results above\u2014publication id \"pub.1000131550\" has five different strings in its funder_orgs field, so when we unnest that field, the results contain multiple rows for \"pub.1000131550,\" one for each value unnested from funder_orgs . We're not done yet, however\u2014we have a table that associates every eLife paper with each of its funders, but that's not really useful on its own. If we use group by the forg field (the values unnested from funder_orgs ), we can get a count for each organization, like this: SELECT forg , COUNT ( p . id ) AS funded_pubs FROM ` dimensions - ai . data_analytics . publications ` AS p CROSS JOIN UNNEST ( funder_orgs ) AS forg -- This is the important line WHERE type = 'article' AND journal . id = 'jour.1046517' -- eLife GROUP BY forg ORDER BY funded_pubs DESC LIMIT 5 Results: Row forg funded_pubs 1 grid.280785.0 2329 2 grid.416870.c 1090 3 grid.413575.1 1078 4 grid.452896.4 976 5 grid.48336.3a 893 This is getting better! Now we have the GRID ID of each funder, paired with the number of eLife publications it's funded. However, GRID IDs aren't very readable. We can get organization names by pulling them in from the grid table of organizations data : SELECT forg , grid . name , COUNT ( p . id ) AS funded_pubs FROM ` dimensions - ai . data_analytics . publications ` AS p CROSS JOIN UNNEST ( funder_orgs ) AS forg INNER JOIN ` dimensions - ai . data_analytics . grid ` AS grid -- THIS IS NEW! ON forg = grid . id WHERE type = 'article' AND journal . id = 'jour.1046517' GROUP BY forg , grid . name ORDER BY funded_pubs DESC LIMIT 5 Results: Row forg name funded_pubs 1 grid.280785.0 National Institute of General Medical Sciences 2329 2 grid.416870.c National Institute of Neurological Disorders and Stroke 1090 3 grid.413575.1 Howard Hughes Medical Institute 1078 4 grid.452896.4 European Research Council 976 5 grid.48336.3a National Cancer Institute 893 Now we have the table we wanted: We unnest the values in the funder_orgs field, use those to join the grid table, and return the name of each funder and how many publications it's funded in eLife . Example 3: Querying repeated nested fields Let's pull everything together using the task outlined in example 3 from the query library : combining all author names of a paper into a single string. As described above, the authors field is complicated because it's a repeated field in which each value is a nested field: Each repeat of authors has its own first_name field, its own last_name , and so on. It's easier to see the structure if we start with a simpler query: SELECT id , authors FROM ` dimensions - ai . data_analytics . publications ` WHERE id = 'pub.1132070778' Results (truncated for simplicity): Row id authors.first_name authors.last_name authors.researcher_id 1 pub.1132070778 O Gr\u00e5n\u00e4s ur.01027021415.21 A Mocellin ur.01316620417.40 E S Cardoso null F Burmeister ur.0631574677.49 C Caleman ur.0745346134.45 O Bj\u00f6rneholm ur.0603171002.99 A Naves de Brito ur.01206174227.82 So if we want to bring all the authors together into a single string, there are a lot of discrete steps to take care of: Pull out the first_name and last_name fields for each author in the authors repeated field. Make a new string for each author that combines their first and last name together. Pull together each of these full author names into a new array we'll call author_names . So we go from an array of author objects, each with its own collection of nested fields, into an array of strings , each one representing a single author. Combine all elements in the author_names into one long string . First, we try to make things more readable by using a WITH clause to emulate a temporary table: Within this query, there's a \"table\" called author_array filled with the results of this subquery: SELECT id , ARRAY ( SELECT CONCAT ( first_name , \" \" , last_name ) FROM UNNEST ( authors ) ) AS authors FROM ` dimensions - ai . data_analytics . publications ` WHERE id = 'pub.1132070778' This is important, because it's where most of the work happens. We start in the middle and work our way outward. This piece takes an array ( authors ) and uses the UNNEST function to create a new table in which each row is a separate author. Then, we take each row of this temporary \"authors\" table and combine each first name with each last name: SELECT CONCAT ( first_name , \" \" , last_name ) FROM UNNEST ( authors ) So we now have a table with a single field\u2014a full name\u2014and each row is one author. We then convert this back into an array : ARRAY ( SELECT CONCAT ( first_name , \" \" , last_name ) FROM UNNEST ( authors ) ) AS authors The outermost piece of this subquery is just to tie each array of author names to the publication that they authored: WITH author_array AS ( SELECT id , ARRAY ( SELECT CONCAT ( first_name , \" \" , last_name ) FROM UNNEST ( authors ) ) AS author_names FROM ` dimensions - ai . data_analytics . publications ` WHERE id = 'pub.1132070778' ) So now we have a table called author_array in which each publication ID is associated with an array of author names. It looks like this): Row id author_names 1 pub.1132070778 O Gr\u00e5n\u00e4s A Mocellin E S Cardoso F Burmeister C Caleman O Bj\u00f6rneholm A Naves de Brito Now that we have the author names pulled out of the author objects, we're almost done. The last step is to iterate through each publication ID, take each entry in the author_names array, and push them all together using the ARRAY_TO_STRING function : SELECT id , ARRAY_TO_STRING ( author_names , '; ' ) AS authors_list FROM author_array Results Row id authors_list 1 pub.1132070778 O Gr\u00e5n\u00e4s; A Mocellin; E S Cardoso; F Burmeister; C Caleman; O Bj\u00f6rneholm; A Naves de Brito Be careful There are a few pitfalls to be aware of when working with nested and repeated fields; we outline some of the most common below. Example 4: Repeated fields with null values The trouble with using CROSS JOIN clauses in queries is that they omit all records for which the repeated field has no values : If a paper has zero authors listed, for example, including CROSS JOIN UNNEST(authors) in your query means there won't be any rows for that paper. We can examine this further using the research_org_country_names repeated field: SELECT COUNT ( DISTINCT p . id ) AS tot_articles FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( research_org_country_names ) AS unnested_countries WHERE year = 2000 Results Row tot_articles 1 1063394 We then run the same query without the UNNEST clause: SELECT COUNT ( DISTINCT p . id ) AS tot_articles FROM ` dimensions - ai . data_analytics . publications ` p WHERE year = 2000 Results Row tot_articles 1 1760397 So without the UNNEST , the total publication count is just over 1.7 million. With the unnest, however, it's less than 1.1 million. The gap is explained by publications that have an ID (that's what we're counting), but that do not have any values in the research_org_country_names field. So how can we be sure we aren't excluding records we actually want? In this case, a LEFT JOIN is the way to go : SELECT COUNT ( DISTINCT p . id ) AS tot_articles FROM ` dimensions - ai . data_analytics . publications ` p LEFT JOIN UNNEST ( research_org_country_names ) AS unnested_countries WHERE year = 2000 Results Row tot_articles 1 1760397 Using LEFT JOIN UNNEST(x) instead of CROSS JOIN UNNEST(x) ensures that entries in which x is NULL will still be returned\u2014those will simply have null listed in the unnested_countries field. Example 5: Counting entries too many times While it's helpful that CROSS JOIN UNNEST() gives us all relevant combinations of the selected fields, it can also present hazards if you don't account for which fields may have multiple entries. For this example, we want to examine how many papers were published in PLOS ONE that include an author with the surname \"Smith.\" This query will get us most of the way there: SELECT p . year , COUNT ( p . id ) AS totcount FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( authors ) author WHERE journal . id = 'jour.1037553' -- PLOS ONE AND year >= 2018 AND year <= 2020 AND author . last_name = 'Smith' GROUP BY year ORDER BY year Results: Row year totcount 1 2018 196 2 2019 151 3 2020 155 We start with all publications published in PLOS ONE between 2018 and 2020, then unnest the authors field so we can get to the last_name field. We then include only entries in which last_name='Smith' . However, these yearly totals aren't correct: We're counting the number of entries in the table, and we only have entries in which an author's last name is \"Smith.\" But some papers may have been written by more than one Smith . We can account for this by adding a DISTINCT clause, like this: SELECT p . year , COUNT ( DISTINCT p . id ) AS totcount -- CHANGE IS HERE! FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( authors ) author WHERE journal . id = 'jour.1037553' AND year >= 2018 AND year <= 2020 AND author . last_name = 'Smith' GROUP BY year ORDER BY year Results: Row year totcount 1 2018 189 2 2019 144 3 2020 154 Comparing these results to the previous ones, we can see that there are usually more than 140 papers published with \"Smith\" authors every year, and several papers per year authored by multiple Smiths. This was a straightforward example, but DISTINCT clauses can be a valuable check in more convoluted queries in which you may have multiple cross joins, or you have a cross join in a subquery that is later joined to another table.","title":"Working with nested and repeated fields"},{"location":"tutorials/04-nested/#working-with-nested-and-repeated-fields","text":"A prominent feature of Google BigQuery is their addition of nested and repeated fields to what may otherwise be a familiar SQL paradigm. Both present opportunities to reorganize data within single tables in novel ways, but they can take some time to get used to. Below, we explain the basics of nested and repeated fields, work through several examples, and provide links to external resources that we've found helpful. Prerequisites In order to run this tutorial, please ensure that: You have a valid Dimensions on Google BigQuery account and have configured a Google Cloud project . The online Google BigQuery console can be used to test the queries below.","title":"Working with nested and repeated fields"},{"location":"tutorials/04-nested/#what-are-they","text":"","title":"What are they?"},{"location":"tutorials/04-nested/#repeated-fields","text":"Repeated fields approximate a \"one-to-many\" relationship and provide an opportunity to define a field that can hold multiple values per row . We can demonstrate this by running a query against the publications table for values in the clinical_trial_ids field: SELECT id , LEFT ( title . preferred , 25 ) AS title , clinical_trial_ids FROM ` dimensions - ai . data_analytics . publications ` WHERE ARRAY_LENGTH ( clinical_trial_ids ) > 0 LIMIT 10 The (heavily truncated) results look something like this: Row id title clinical_trial_ids 1 pub.1003360568 A Randomized, Controlled... NCT00014989 2 pub.1003935609 8568 Prophylactic swallow... NCT00332865 3 pub.1004269292 Clinical Trial Alert... NCT00953940 NCT00970073 NCT00994253 NCT00987103 NCT00974636 4 pub.1004095142 6502 A double-blinded, pl... NCT00219557 NCT00428597 5 pub.1004119511 Intrathecal morphine in a... NCT00119184 You can see that rows 3 and 4 have multiple values in the clinical_trial_ids field, despite all values getting listed within a single row number .","title":"Repeated fields"},{"location":"tutorials/04-nested/#nested-fields","text":"Nested fields, on their own, are much simpler: They are fields that are linked together as a single entity, like a struct or an object. The title field in the publications table is a good example of this: Rather than a single string indicating the title of the publication, it is a nested field that has two strings within it: \"original\" and \"preferred\" , mostly to accommodate titles expressed in multiple languages. Querying nested fields looks almost identical to querying more conventional ones. For example, with the title field: SELECT id , title FROM ` dimensions - ai . data_analytics . publications ` LIMIT 4 Results: Row id title.preferred title.original 1 pub.1123921006 Effects of \"1+N\" extended nursing on medication comp... \"1+N\"\u5ef6\u4f38\u62a4\u7406\u6a21\u5f0f\u5bf92\u578b\u7cd6\u5c3f\u75c5\u60a3\u8005\u7528\u836f\u4f9d\u4ece\u6027\u53ca\u81ea\u6211\u7ba1\u7406\u80fd\u529b\u7684\u5f71\u54cd 2 pub.1123897378 Clinical observation of the prevention of pressu... \u9f99\u8840\u7aed\u9884\u9632\u6076\u6027\u80bf\u7624\u5f3a\u8feb\u4f53\u4f4d\u60a3\u8005\u538b\u75ae\u7684\u4e34\u5e8a\u89c2\u5bdf 3 pub.1039091814 IV. A new improved silk-reel. null 4 pub.1123920716 Effect of resina draconis for external applica... \u9f99\u8840\u7aed\u80f6\u56ca\u7c89\u5916\u6577\u6cbb\u7597\u538b\u75ae\u7597\u6548\u7684Meta\u5206\u6790","title":"Nested fields"},{"location":"tutorials/04-nested/#repeated-nested-fields","text":"This is where things get a little more complicated: One of the main ways nested fields make themselves useful is when they're repeated : So while a repeated field might be an array of strings (clinical trial IDs, for example), they can also be an array of objects. The authors field of the publications table is a good example of this: SELECT id , title . preferred , authors FROM ` dimensions - ai . data_analytics . publications ` LIMIT 3 Results: Row id title.preferred authors.first_name authors.last_name authors.researcher_id 1 pub.1001350088 The T-120/130-12.8 and PT... G.D. Barinberg ur.012510636551.40 A.E. Valamin ur.012211770163.32 Yu. A. Sakhnin ur.010306240353.29 A. Yu. Kultyshev ur.014402311563.25 2 pub.1000116807 Application of Electrorhe... Ken'ichi Koyanagi ur.013307555250.87 Yasuhiro Kakinuma ur.013275435603.18 You can see here that the author information appears the same way as the clinical trial IDs above, except each repeated entry within a row has multiple fields about each author. (There are many more fields that will appear if you query authors; they've been removed here for clarity.) The useful part about using nested fields for the authors, rather than a bunch of repeated fields alone (one for first_name , another repeated field for last_name , etc) is because those nested fields will stay together : For the publication in row 1, the \"A.E.\" first name will always appear alongside the \"Valamin\" last name, rather than shuffling them around like what may happen if you queried them separately.","title":"Repeated nested fields"},{"location":"tutorials/04-nested/#querying-nested-fields","text":"We'll start writing queries with nested fields alone first, since it's the simplest to do. We actually did it several times in the above examples: The title field in the publications table is a nested field with two fields in it: original and preferred . If you don't specify which values you want, you'll get them all , like this: SELECT id , title FROM ` dimensions - ai . data_analytics . publications ` LIMIT 4 Results: Row id title.preferred title.original 1 pub.1123921006 Effects of \"1+N\" extended nursing on medication comp... \"1+N\"\u5ef6\u4f38\u62a4\u7406\u6a21\u5f0f\u5bf92\u578b\u7cd6\u5c3f\u75c5\u60a3\u8005\u7528\u836f\u4f9d\u4ece\u6027\u53ca\u81ea\u6211\u7ba1\u7406\u80fd\u529b\u7684\u5f71\u54cd 2 pub.1123897378 Clinical observation of the prevention of pressu... \u9f99\u8840\u7aed\u9884\u9632\u6076\u6027\u80bf\u7624\u5f3a\u8feb\u4f53\u4f4d\u60a3\u8005\u538b\u75ae\u7684\u4e34\u5e8a\u89c2\u5bdf 3 pub.1039091814 IV. A new improved silk-reel. null 4 pub.1123920716 Effect of resina draconis for external applica... \u9f99\u8840\u7aed\u80f6\u56ca\u7c89\u5916\u6577\u6cbb\u7597\u538b\u75ae\u7597\u6548\u7684Meta\u5206\u6790 If you wanted only the preferred field of the title , you can specify that using periods. Nested fields can have more nested fields within them, so there may be multiple entries. Luckily, we only need one period for the title: SELECT id , title . preferred FROM ` dimensions - ai . data_analytics . publications ` LIMIT 4 Results: Row id title.preferred 1 pub.1123921006 Effects of \"1+N\" extended nursing on medication comp... 2 pub.1123897378 Clinical observation of the prevention of pressu... 3 pub.1039091814 IV. A new improved silk-reel. 4 pub.1123920716 Effect of resina draconis for external applica...","title":"Querying nested fields"},{"location":"tutorials/04-nested/#querying-repeated-fields","text":"Repeated fields are where we need to start using more exotic patterns to extract information. The UNNEST function is the primary tool for the job here\u2014it converts an array of values into rows in a table, which, if necessary, can then be joined to the original table you're querying.","title":"Querying repeated fields"},{"location":"tutorials/04-nested/#example-1-checking-contents-of-array","text":"We'll start with a simple one: the funder_orgs field in the publications table, which lists GRID IDs indicating which organizations funded the research in the publication. IF we wanted to find publications funded by the Brazilian Agricultural Research Corporation, for example, we can use its GRID ID (grid.460200.0) in a WHERE clause: SELECT type , COUNT ( id ) AS funded_pubs FROM ` dimensions - ai . data_analytics . publications ` WHERE 'grid.460200.0' IN UNNEST ( funder_orgs ) GROUP BY type Results Row type funded_pubs 1 preceeding 23 2 article 6042 3 preprint 21 4 chapter 33","title":"Example 1: Checking contents of array"},{"location":"tutorials/04-nested/#example-2-joining-tables-using-a-repeated-field","text":"Queries can also return the contents of repeated fields. Using a CROSS JOIN , the information can be distributed into separate rows, rather than arrays inside single rows. For this example, we'll look at organizations that have funded recent articles published in eLife , a life sciences journal. We'll start by selecting the information we can get from the publications table: SELECT p . id , forg FROM ` dimensions - ai . data_analytics . publications ` AS p CROSS JOIN UNNEST ( funder_orgs ) AS forg -- This is the important line WHERE type = 'article' AND journal . id = 'jour.1046517' -- eLife Row id forg 1 pub.1000035854 grid.14105.31 2 pub.1000321327 grid.48336.3a 3 pub.1000131550 grid.422384.b 4 pub.1000131550 grid.419475.a 5 pub.1000131550 grid.453152.4 6 pub.1000131550 grid.280362.d 7 pub.1000131550 grid.416870.c There are a few things to point out here: First, notice that we're querying a nested field within the journal field on the final line\u2014we want only publications in which the journal field lists an id that matches the one assigned to eLife . We're also using a CROSS JOIN with the funder_orgs field. A cross join returns the Cartesian product of the two tables being joined\u2014to wit, every value on one side of the join (in this case, the publications table) will appear with every matching value from the right side of the join (the \"table\" created by the call to UNNEST(funder_orgs) ). This is demonstrated in lines 3 through 7 of the results above\u2014publication id \"pub.1000131550\" has five different strings in its funder_orgs field, so when we unnest that field, the results contain multiple rows for \"pub.1000131550,\" one for each value unnested from funder_orgs . We're not done yet, however\u2014we have a table that associates every eLife paper with each of its funders, but that's not really useful on its own. If we use group by the forg field (the values unnested from funder_orgs ), we can get a count for each organization, like this: SELECT forg , COUNT ( p . id ) AS funded_pubs FROM ` dimensions - ai . data_analytics . publications ` AS p CROSS JOIN UNNEST ( funder_orgs ) AS forg -- This is the important line WHERE type = 'article' AND journal . id = 'jour.1046517' -- eLife GROUP BY forg ORDER BY funded_pubs DESC LIMIT 5 Results: Row forg funded_pubs 1 grid.280785.0 2329 2 grid.416870.c 1090 3 grid.413575.1 1078 4 grid.452896.4 976 5 grid.48336.3a 893 This is getting better! Now we have the GRID ID of each funder, paired with the number of eLife publications it's funded. However, GRID IDs aren't very readable. We can get organization names by pulling them in from the grid table of organizations data : SELECT forg , grid . name , COUNT ( p . id ) AS funded_pubs FROM ` dimensions - ai . data_analytics . publications ` AS p CROSS JOIN UNNEST ( funder_orgs ) AS forg INNER JOIN ` dimensions - ai . data_analytics . grid ` AS grid -- THIS IS NEW! ON forg = grid . id WHERE type = 'article' AND journal . id = 'jour.1046517' GROUP BY forg , grid . name ORDER BY funded_pubs DESC LIMIT 5 Results: Row forg name funded_pubs 1 grid.280785.0 National Institute of General Medical Sciences 2329 2 grid.416870.c National Institute of Neurological Disorders and Stroke 1090 3 grid.413575.1 Howard Hughes Medical Institute 1078 4 grid.452896.4 European Research Council 976 5 grid.48336.3a National Cancer Institute 893 Now we have the table we wanted: We unnest the values in the funder_orgs field, use those to join the grid table, and return the name of each funder and how many publications it's funded in eLife .","title":"Example 2: Joining tables using a repeated field"},{"location":"tutorials/04-nested/#example-3-querying-repeated-nested-fields","text":"Let's pull everything together using the task outlined in example 3 from the query library : combining all author names of a paper into a single string. As described above, the authors field is complicated because it's a repeated field in which each value is a nested field: Each repeat of authors has its own first_name field, its own last_name , and so on. It's easier to see the structure if we start with a simpler query: SELECT id , authors FROM ` dimensions - ai . data_analytics . publications ` WHERE id = 'pub.1132070778' Results (truncated for simplicity): Row id authors.first_name authors.last_name authors.researcher_id 1 pub.1132070778 O Gr\u00e5n\u00e4s ur.01027021415.21 A Mocellin ur.01316620417.40 E S Cardoso null F Burmeister ur.0631574677.49 C Caleman ur.0745346134.45 O Bj\u00f6rneholm ur.0603171002.99 A Naves de Brito ur.01206174227.82 So if we want to bring all the authors together into a single string, there are a lot of discrete steps to take care of: Pull out the first_name and last_name fields for each author in the authors repeated field. Make a new string for each author that combines their first and last name together. Pull together each of these full author names into a new array we'll call author_names . So we go from an array of author objects, each with its own collection of nested fields, into an array of strings , each one representing a single author. Combine all elements in the author_names into one long string . First, we try to make things more readable by using a WITH clause to emulate a temporary table: Within this query, there's a \"table\" called author_array filled with the results of this subquery: SELECT id , ARRAY ( SELECT CONCAT ( first_name , \" \" , last_name ) FROM UNNEST ( authors ) ) AS authors FROM ` dimensions - ai . data_analytics . publications ` WHERE id = 'pub.1132070778' This is important, because it's where most of the work happens. We start in the middle and work our way outward. This piece takes an array ( authors ) and uses the UNNEST function to create a new table in which each row is a separate author. Then, we take each row of this temporary \"authors\" table and combine each first name with each last name: SELECT CONCAT ( first_name , \" \" , last_name ) FROM UNNEST ( authors ) So we now have a table with a single field\u2014a full name\u2014and each row is one author. We then convert this back into an array : ARRAY ( SELECT CONCAT ( first_name , \" \" , last_name ) FROM UNNEST ( authors ) ) AS authors The outermost piece of this subquery is just to tie each array of author names to the publication that they authored: WITH author_array AS ( SELECT id , ARRAY ( SELECT CONCAT ( first_name , \" \" , last_name ) FROM UNNEST ( authors ) ) AS author_names FROM ` dimensions - ai . data_analytics . publications ` WHERE id = 'pub.1132070778' ) So now we have a table called author_array in which each publication ID is associated with an array of author names. It looks like this): Row id author_names 1 pub.1132070778 O Gr\u00e5n\u00e4s A Mocellin E S Cardoso F Burmeister C Caleman O Bj\u00f6rneholm A Naves de Brito Now that we have the author names pulled out of the author objects, we're almost done. The last step is to iterate through each publication ID, take each entry in the author_names array, and push them all together using the ARRAY_TO_STRING function : SELECT id , ARRAY_TO_STRING ( author_names , '; ' ) AS authors_list FROM author_array Results Row id authors_list 1 pub.1132070778 O Gr\u00e5n\u00e4s; A Mocellin; E S Cardoso; F Burmeister; C Caleman; O Bj\u00f6rneholm; A Naves de Brito","title":"Example 3: Querying repeated nested fields"},{"location":"tutorials/04-nested/#be-careful","text":"There are a few pitfalls to be aware of when working with nested and repeated fields; we outline some of the most common below.","title":"Be careful"},{"location":"tutorials/04-nested/#example-4-repeated-fields-with-null-values","text":"The trouble with using CROSS JOIN clauses in queries is that they omit all records for which the repeated field has no values : If a paper has zero authors listed, for example, including CROSS JOIN UNNEST(authors) in your query means there won't be any rows for that paper. We can examine this further using the research_org_country_names repeated field: SELECT COUNT ( DISTINCT p . id ) AS tot_articles FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( research_org_country_names ) AS unnested_countries WHERE year = 2000 Results Row tot_articles 1 1063394 We then run the same query without the UNNEST clause: SELECT COUNT ( DISTINCT p . id ) AS tot_articles FROM ` dimensions - ai . data_analytics . publications ` p WHERE year = 2000 Results Row tot_articles 1 1760397 So without the UNNEST , the total publication count is just over 1.7 million. With the unnest, however, it's less than 1.1 million. The gap is explained by publications that have an ID (that's what we're counting), but that do not have any values in the research_org_country_names field. So how can we be sure we aren't excluding records we actually want? In this case, a LEFT JOIN is the way to go : SELECT COUNT ( DISTINCT p . id ) AS tot_articles FROM ` dimensions - ai . data_analytics . publications ` p LEFT JOIN UNNEST ( research_org_country_names ) AS unnested_countries WHERE year = 2000 Results Row tot_articles 1 1760397 Using LEFT JOIN UNNEST(x) instead of CROSS JOIN UNNEST(x) ensures that entries in which x is NULL will still be returned\u2014those will simply have null listed in the unnested_countries field.","title":"Example 4: Repeated fields with null values"},{"location":"tutorials/04-nested/#example-5-counting-entries-too-many-times","text":"While it's helpful that CROSS JOIN UNNEST() gives us all relevant combinations of the selected fields, it can also present hazards if you don't account for which fields may have multiple entries. For this example, we want to examine how many papers were published in PLOS ONE that include an author with the surname \"Smith.\" This query will get us most of the way there: SELECT p . year , COUNT ( p . id ) AS totcount FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( authors ) author WHERE journal . id = 'jour.1037553' -- PLOS ONE AND year >= 2018 AND year <= 2020 AND author . last_name = 'Smith' GROUP BY year ORDER BY year Results: Row year totcount 1 2018 196 2 2019 151 3 2020 155 We start with all publications published in PLOS ONE between 2018 and 2020, then unnest the authors field so we can get to the last_name field. We then include only entries in which last_name='Smith' . However, these yearly totals aren't correct: We're counting the number of entries in the table, and we only have entries in which an author's last name is \"Smith.\" But some papers may have been written by more than one Smith . We can account for this by adding a DISTINCT clause, like this: SELECT p . year , COUNT ( DISTINCT p . id ) AS totcount -- CHANGE IS HERE! FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( authors ) author WHERE journal . id = 'jour.1037553' AND year >= 2018 AND year <= 2020 AND author . last_name = 'Smith' GROUP BY year ORDER BY year Results: Row year totcount 1 2018 189 2 2019 144 3 2020 154 Comparing these results to the previous ones, we can see that there are usually more than 140 papers published with \"Smith\" authors every year, and several papers per year authored by multiple Smiths. This was a straightforward example, but DISTINCT clauses can be a valuable check in more convoluted queries in which you may have multiple cross joins, or you have a cross join in a subquery that is later joined to another table.","title":"Example 5: Counting entries too many times"},{"location":"tutorials/05-topic_clusters/","text":"Basic Topic Clustering using TensorFlow and BigQuery ML In this tutorial we will implement a basic topic clustering on publications, generating text embeddings using a pre-trained TensorFlow model and creating the groupings via K-means clustering provided by BigQuery ML. This tutorial utilises datasets which are only available to Dimensions on BigQuery customers. For this specific example we will be analysing the publications of New Zealand\u2019s top 8 universities from 2016 onwards. The example below is based around using a Python Notebook which utilises BigQuery iPython magic commands to execute BigQuery SQL statements. The basic steps taken are: Setup the Python environment and BigQuery access. Extract titles/abstracts for the publications of interest from Big Query. Use TensorFlow to generate word embeddings from the titles/abstracts. Export these embedding vectors back into Google BigQuery and cleanup the format of them. Create k-means models using BigQuery ML (multiple models for different cluster counts). Compare the different k-means models and select the most appropriate. Associate publications back to each cluster. Determine the topics/concepts associated with each cluster. Prerequisites In order to run this tutorial, please ensure that: You have a valid Dimensions on Google BigQuery account and have configured a Google Cloud project . You have some basic familiarity with Python and Jupyter notebooks . 1. Setup Google BigQuery access The initial setup is to authenticate your Google Account for accessing GCP resources. This account must be the account which has access to the Dimensions BigQuery datasets. It must also must be allowed to execute and pay for Google BigQuery queries. In the code example below project_id should be replaced with the GCP project identifier which you own or can access BigQuery resources on. from google.colab import auth auth . authenticate_user () project_id = \"my-gbq-project\" # replace with GCP project to bill against % load_ext google . cloud . bigquery The project referenced in the examples below is my-gbq-project , anytime that is contained within Python code or SQL statements it should be replaced with your own projects identifier. The SQL and Python code below also assumes that two datasets exist within the Google BigQuery project ( project_id ). temp which holds intermediate tables created during the setup phase. clustering which holds the tables we will create models from and the final models we create. 2. Gather titles/abstracts for publications The first step we will undertake is building a DataFrame which contains the titles and abstracts from publications. We will use the following BigQuery SQL statement to extract the data: WITH target_orgs AS ( SELECT org FROM UNNEST ([ \"grid.252547.3\" , -- AUT \"grid.9654.e\" , -- UoA \"grid.21006.35\" , -- Canterbury \"grid.29980.3a\" , -- Otago \"grid.267827.e\" , -- Vic \"grid.148374.d\" , -- Massey \"grid.49481.30\" , -- Waikato \"grid.16488.33\" -- Lincoln ]) org ) SELECT id , ANY_VALUE ( title ) as title , ANY_VALUE ( abstract ) as abstract , ARRAY_AGG ( org ) as orgs FROM ( SELECT id , title . preferred as title , abstract . preferred as abstract , org as org FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( research_orgs ) org RIGHT JOIN target_orgs t ON t . org = org WHERE p . year > 2015 AND abstract . preferred is not null ) GROUP BY id To execute the SQL statement above and save the results into a DataFrame we can use the BigQuery iPython magic command: %% bigquery -- params $ bq_params -- project $ project_id pubs # SQL statement from above Taking a look at the generated DataFrame we can see what is present and verify that the data matches our expectations. At this point is may also be useful to save the data off to a \u201cpickle\u201d file allowing quick reloading of the dataset and skipping this step in the future when re-running the steps below. 3. Generate word embeddings for each publication The next stage is to generate word embeddings for each publication\u2019s title and abstract. Word embedding models attempt to map words or phrases from a vocabulary into to vectors of real numbers. These word embeddings can then used in language modelling and feature learning natural language processing (NLP) techniques. Ideally, the end result is that publications with abstracts representing the same topics and concepts will be near one another within the reduced vector space generated through the word embedding process. For this example we will use TensorFlow and the Universal Sentence Encoder model to generate our word embeddings. The input into the model is variable length English text and it will generate a 512 dimensional vector. The embeddings should result in a vector representation which provides a reasonable approximation to semantic similarity between publications based on the content of the abstracts. import tensorflow as tf import tensorflow_hub as hub embed = hub . load ( \"https://tfhub.dev/google/universal-sentence-encoder/4\" ) def get_embed_title ( titles ): return embed ( titles ) def get_embed_abstract ( abstracts , delimiter = \" \\n \" ): def _map_fn ( a ): t = tf . cast ( a , tf . string ) t = tf . strings . split ( t , sep = delimiter ) e = embed ( t ) e = tf . reduce_mean ( e , axis = 0 ) return tf . squeeze ( e ) return tf . map_fn ( _map_fn , abstracts , dtype = tf . float32 ) def process ( titles , abstracts ): title_embed = get_embed_title ( titles ) abstract_embed = get_embed_abstract ( abstracts ) output_features = { 'title_embed' : title_embed , 'abstract_embed' : abstract_embed , } return output_features r = process ( pubs [ \"title\" ], pubs [ \"abstract\" ]) Note The hub.load function execution may take a little while on the first run as it needs to download the USE model files. Taking a look at the generated embeddings, we can see that for each publication we have created two arrays of floating point values each 512 items long. The next step is to save these back into a temporary table in BigQuery so that we can apply k-means clustering to attempt to find groups of semantic similar publications. 4. Save embedding vectors to a BigQuery table The next stage is to save the generated title and abstract embedding vectors back into a BigQuery table. new_pubs = pubs . copy () table_name = \"temp.semantic_clustering\" # Insert into the new DataFrame columns for title and abstract embeddings. new_pubs [ \"title_embed\" ] = r [ \"title_embed\" ] . numpy () . tolist () new_pubs [ \"abstract_embed\" ] = r [ \"abstract_embed\" ] . numpy () . tolist () # Save the DataFrame to a pickle file and into a BigQuery table. new_pubs . to_pickle ( \"/content/new_pubs.pkl\" ) new_pubs . to_gbq ( table_name , project_id , chunksize = 2500 ) One issue with the imported data is that the vectors for the embeddings is a string rather than a field containing repeated floating-point values. The SQL statement below however creates a new table that converts the string into a proper array of real numbers. CREATE OR REPLACE TABLE ` my - gbq - project . clustering . nz_pubs_with_embeddings ` AS SELECT id , title , abstract , REGEXP_EXTRACT_ALL ( orgs , r \"\\'([^\\s,\\']+)\\'\" ) as orgs , ( SELECT ARRAY_AGG ( CAST ( v as FLOAT64 ) ORDER BY o asc ) FROM UNNEST ( SPLIT ( REGEXP_EXTRACT ( title_embed , r \"^\\[(.*)\\]$\" ), \", \" )) v WITH OFFSET o ) AS title_embed , ( SELECT ARRAY_AGG ( CAST ( v as FLOAT64 ) ORDER BY o asc ) FROM UNNEST ( SPLIT ( REGEXP_EXTRACT ( abstract_embed , r \"^\\[(.*)\\]$\" ), \", \" )) v WITH OFFSET o ) AS abstract_embed FROM ` my - gbq - project . temp . semantic_clustering ` Taking a look at the table within Google BigQuery (web interface) we can see the schema. It contains title_embed and abstract_embed both of which are repeated fields of FLOAT type. 5. Create k-means cluster models Warning The example BigQuery SQL statement below use BigQuery ML which has a different charging model when it comes to creating models. Please keep this in mind and approximate how much it could potentially cost before executing any of the SQL statements. Pricing details are available from Google here: BigQuery ML Pricing . The most time consuming and computationally expensive part of this example is the clustering process itself. Luckily we can utilise BigQuery ML to create the models and create the clusters of publications based on the word embeddings we have created previously. In this example we will use k-means clustering to attempt to assign each publication to a grouping of semantically similar publications (based on abstracts). Essentially k-means clustering attempts to partition the individual items using Euclidean distance as the metric and minimising the within cluster sum of squares (ie. minimise squared errors). The primary input parameter that controls the k-means models is the number of partitions (ie. how many clusters we want to partition into). We can use some crude hyper-parameter tuning through creating numerous k-means models on our dataset, attempting to determine what a \u201cgood\u201d number of clusters may look like for our set of data. It is important to understand however that because of the approach k-means clustering utilises when assigning items to partitions it is important to analysis the results as a local minimums are a possibility. DECLARE NUM_CLUSTERS INT64 DEFAULT 10 ; DECLARE MODEL_NAME STRING ; WHILE NUM_CLUSTERS < 60 DO SET MODEL_NAME = CONCAT ( 'my-gbq-project.clustering.model_nz_pubs_' , CAST ( NUM_CLUSTERS AS STRING )); EXECUTE IMMEDIATE format ( \"\"\" CREATE OR REPLACE MODEL `%s` OPTIONS(model_type='kmeans', num_clusters = %d, DISTANCE_TYPE = 'cosine', kmeans_init_method = 'KMEANS++') AS WITH data AS ( SELECT abstract_embed[OFFSET(0)] as abstract0, abstract_embed[OFFSET(1)] as abstract1, abstract_embed[OFFSET(2)] as abstract2, abstract_embed[OFFSET(3)] as abstract3, abstract_embed[OFFSET(4)] as abstract4, abstract_embed[OFFSET(5)] as abstract5, abstract_embed[OFFSET(6)] as abstract6, abstract_embed[OFFSET(7)] as abstract7, ... abstract_embed[OFFSET(510)] as abstract510, abstract_embed[OFFSET(511)] as abstract511 FROM `my-gbq-project.clustering.nz_pubs_with_embeddings` ) SELECT * FROM data; \"\"\" , MODEL_NAME , NUM_CLUSTERS ); SET NUM_CLUSTERS = NUM_CLUSTERS + 5 ; END WHILE Note The SQL statement above has been truncated. The abstract_embed[OFFSET(n)] as abstract_n lines have been omitted and goes from 0 to 511 uninterrupted and has been abbreviated for the purposes of brevity in the tutorial write-up. The full SQL is available here . Creating the models may take a little while as it must apply the k-means algorithm over our dataset for each of the different cluster count parameter values. The next step is to analyse the results for all of the models created. We can evaluate each of the models, returning the Davies\u2013Bouldin index and the mean squared distance. Determining the optimal number of clusters is outside the scope of this tutorial, however a common approach is using the \u201cElbow method\u201d . # StandardSQL SELECT 60 as cluster_size , * FROM ML . EVALUATE ( MODEL ` my - gbq - project . clustering . model_nz_pubs_60 ` ) UNION ALL SELECT 55 as cluster_size , * FROM ML . EVALUATE ( MODEL ` my - gbq - project . clustering . model_nz_pubs_55 ` ) UNION ALL SELECT 50 as cluster_size , * FROM ML . EVALUATE ( MODEL ` my - gbq - project . clustering . model_nz_pubs_50 ` ) UNION ALL SELECT 45 as cluster_size , * FROM ML . EVALUATE ( MODEL ` my - gbq - project . clustering . model_nz_pubs_45 ` ) UNION ALL SELECT 40 as cluster_size , * FROM ML . EVALUATE ( MODEL ` my - gbq - project . clustering . model_nz_pubs_40 ` ) UNION ALL SELECT 35 as cluster_size , * FROM ML . EVALUATE ( MODEL ` my - gbq - project . clustering . model_nz_pubs_35 ` ) UNION ALL SELECT 30 as cluster_size , * FROM ML . EVALUATE ( MODEL ` my - gbq - project . clustering . model_nz_pubs_30 ` ) UNION ALL SELECT 25 as cluster_size , * FROM ML . EVALUATE ( MODEL ` my - gbq - project . clustering . model_nz_pubs_25 ` ) UNION ALL SELECT 20 as cluster_size , * FROM ML . EVALUATE ( MODEL ` my - gbq - project . clustering . model_nz_pubs_20 ` ) UNION ALL SELECT 15 as cluster_size , * FROM ML . EVALUATE ( MODEL ` my - gbq - project . clustering . model_nz_pubs_15 ` ) UNION ALL SELECT 10 as cluster_size , * FROM ML . EVALUATE ( MODEL ` my - gbq - project . clustering . model_nz_pubs_10 ` ) 6. Publication to cluster assignment Using k=55 ( my-gbq-project.clustering.model_nz_pubs_55 ) as the cluster count from above we can now use the k-means model we created in BigQuery to determine which publications are assigned to each different centroid (cluster). Note below that the input data into the model matches the data structure that was used during the creation of the model itself (the abstracts embedding vector exploded into 512 individual string inputs). CREATE TABLE ` my - gbq - project . clustering . pubs_assigned_55 ` AS WITH data AS ( SELECT id , abstract_embed [ OFFSET ( 0 )] as abstract0 , abstract_embed [ OFFSET ( 1 )] as abstract1 , abstract_embed [ OFFSET ( 2 )] as abstract2 , ... abstract_embed [ OFFSET ( 510 )] as abstract510 , abstract_embed [ OFFSET ( 511 )] as abstract511 FROM ` my - gbq - project . clustering . nz_pubs_with_embeddings ` ) SELECT id , CENTROID_ID , NEAREST_CENTROIDS_DISTANCE FROM ML . PREDICT ( MODEL ` my - gbq - project . clustering . model_nz_pubs_55 ` , ( SELECT * FROM data )) Taking a look at the resultant table we see that each publication has been assigned to a primary cluster (centroid identifier) as well as a listing of the closest centroids as well as the Euclidean distance to the centroid. 7. Determine concepts/topics for each cluster The next stage is to try and determine the topics and concepts associated with each of the 55 clusters identified within the assigned publications above. Some publications have concepts extracted via NLP processing of the full-text. One approach to determining the concepts associated with each cluster is to aggregate these extracted concepts from for all publications within the same cluster. SELECT ANY_VALUE ( centroid ) as centroid_id , cluster_id as cluster_name , ARRAY_AGG ( concept order by ordering ) as concepts FROM ( SELECT * FROM ( SELECT * , ROW_NUMBER () OVER ( PARTITION BY cluster_id ORDER BY count desc ) as ordering FROM ( SELECT ANY_VALUE ( centroid ) as centroid , a . cluster_id as cluster_id , concept , COUNT ( * ) as count FROM ( SELECT a . id , a . CENTROID_ID as centroid , CONCAT ( \"Cluster-\" , CAST ( a . CENTROID_ID as STRING )) as cluster_id , ( SELECT ARRAY_AGG ( LOWER ( c . concept )) FROM UNNEST ( p . concepts ) c ) as concetps FROM ` my - gbq - project . clustering . pubs_assigned_55 ` a LEFT JOIN ` dimensions - ai . data_analytics . publications ` p ON p . id = a . id ) a , UNNEST ( a . concetps ) concept GROUP BY a . cluster_id , concept ) ORDER BY cluster_id desc , ordering asc ) WHERE ordering <= 20 ) GROUP BY cluster_id Taking a look at the results we can see for each centroid the 20 top concepts (by occurrence over all publications).","title":"Basic Topic Clustering using TensorFlow and BigQuery ML"},{"location":"tutorials/05-topic_clusters/#basic-topic-clustering-using-tensorflow-and-bigquery-ml","text":"In this tutorial we will implement a basic topic clustering on publications, generating text embeddings using a pre-trained TensorFlow model and creating the groupings via K-means clustering provided by BigQuery ML. This tutorial utilises datasets which are only available to Dimensions on BigQuery customers. For this specific example we will be analysing the publications of New Zealand\u2019s top 8 universities from 2016 onwards. The example below is based around using a Python Notebook which utilises BigQuery iPython magic commands to execute BigQuery SQL statements. The basic steps taken are: Setup the Python environment and BigQuery access. Extract titles/abstracts for the publications of interest from Big Query. Use TensorFlow to generate word embeddings from the titles/abstracts. Export these embedding vectors back into Google BigQuery and cleanup the format of them. Create k-means models using BigQuery ML (multiple models for different cluster counts). Compare the different k-means models and select the most appropriate. Associate publications back to each cluster. Determine the topics/concepts associated with each cluster. Prerequisites In order to run this tutorial, please ensure that: You have a valid Dimensions on Google BigQuery account and have configured a Google Cloud project . You have some basic familiarity with Python and Jupyter notebooks .","title":"Basic Topic Clustering using TensorFlow and BigQuery ML"},{"location":"tutorials/05-topic_clusters/#1-setup-google-bigquery-access","text":"The initial setup is to authenticate your Google Account for accessing GCP resources. This account must be the account which has access to the Dimensions BigQuery datasets. It must also must be allowed to execute and pay for Google BigQuery queries. In the code example below project_id should be replaced with the GCP project identifier which you own or can access BigQuery resources on. from google.colab import auth auth . authenticate_user () project_id = \"my-gbq-project\" # replace with GCP project to bill against % load_ext google . cloud . bigquery The project referenced in the examples below is my-gbq-project , anytime that is contained within Python code or SQL statements it should be replaced with your own projects identifier. The SQL and Python code below also assumes that two datasets exist within the Google BigQuery project ( project_id ). temp which holds intermediate tables created during the setup phase. clustering which holds the tables we will create models from and the final models we create.","title":"1. Setup Google BigQuery access"},{"location":"tutorials/05-topic_clusters/#2-gather-titlesabstracts-for-publications","text":"The first step we will undertake is building a DataFrame which contains the titles and abstracts from publications. We will use the following BigQuery SQL statement to extract the data: WITH target_orgs AS ( SELECT org FROM UNNEST ([ \"grid.252547.3\" , -- AUT \"grid.9654.e\" , -- UoA \"grid.21006.35\" , -- Canterbury \"grid.29980.3a\" , -- Otago \"grid.267827.e\" , -- Vic \"grid.148374.d\" , -- Massey \"grid.49481.30\" , -- Waikato \"grid.16488.33\" -- Lincoln ]) org ) SELECT id , ANY_VALUE ( title ) as title , ANY_VALUE ( abstract ) as abstract , ARRAY_AGG ( org ) as orgs FROM ( SELECT id , title . preferred as title , abstract . preferred as abstract , org as org FROM ` dimensions - ai . data_analytics . publications ` p CROSS JOIN UNNEST ( research_orgs ) org RIGHT JOIN target_orgs t ON t . org = org WHERE p . year > 2015 AND abstract . preferred is not null ) GROUP BY id To execute the SQL statement above and save the results into a DataFrame we can use the BigQuery iPython magic command: %% bigquery -- params $ bq_params -- project $ project_id pubs # SQL statement from above Taking a look at the generated DataFrame we can see what is present and verify that the data matches our expectations. At this point is may also be useful to save the data off to a \u201cpickle\u201d file allowing quick reloading of the dataset and skipping this step in the future when re-running the steps below.","title":"2. Gather titles/abstracts for publications"},{"location":"tutorials/05-topic_clusters/#3-generate-word-embeddings-for-each-publication","text":"The next stage is to generate word embeddings for each publication\u2019s title and abstract. Word embedding models attempt to map words or phrases from a vocabulary into to vectors of real numbers. These word embeddings can then used in language modelling and feature learning natural language processing (NLP) techniques. Ideally, the end result is that publications with abstracts representing the same topics and concepts will be near one another within the reduced vector space generated through the word embedding process. For this example we will use TensorFlow and the Universal Sentence Encoder model to generate our word embeddings. The input into the model is variable length English text and it will generate a 512 dimensional vector. The embeddings should result in a vector representation which provides a reasonable approximation to semantic similarity between publications based on the content of the abstracts. import tensorflow as tf import tensorflow_hub as hub embed = hub . load ( \"https://tfhub.dev/google/universal-sentence-encoder/4\" ) def get_embed_title ( titles ): return embed ( titles ) def get_embed_abstract ( abstracts , delimiter = \" \\n \" ): def _map_fn ( a ): t = tf . cast ( a , tf . string ) t = tf . strings . split ( t , sep = delimiter ) e = embed ( t ) e = tf . reduce_mean ( e , axis = 0 ) return tf . squeeze ( e ) return tf . map_fn ( _map_fn , abstracts , dtype = tf . float32 ) def process ( titles , abstracts ): title_embed = get_embed_title ( titles ) abstract_embed = get_embed_abstract ( abstracts ) output_features = { 'title_embed' : title_embed , 'abstract_embed' : abstract_embed , } return output_features r = process ( pubs [ \"title\" ], pubs [ \"abstract\" ]) Note The hub.load function execution may take a little while on the first run as it needs to download the USE model files. Taking a look at the generated embeddings, we can see that for each publication we have created two arrays of floating point values each 512 items long. The next step is to save these back into a temporary table in BigQuery so that we can apply k-means clustering to attempt to find groups of semantic similar publications.","title":"3. Generate word embeddings for each publication"},{"location":"tutorials/05-topic_clusters/#4-save-embedding-vectors-to-a-bigquery-table","text":"The next stage is to save the generated title and abstract embedding vectors back into a BigQuery table. new_pubs = pubs . copy () table_name = \"temp.semantic_clustering\" # Insert into the new DataFrame columns for title and abstract embeddings. new_pubs [ \"title_embed\" ] = r [ \"title_embed\" ] . numpy () . tolist () new_pubs [ \"abstract_embed\" ] = r [ \"abstract_embed\" ] . numpy () . tolist () # Save the DataFrame to a pickle file and into a BigQuery table. new_pubs . to_pickle ( \"/content/new_pubs.pkl\" ) new_pubs . to_gbq ( table_name , project_id , chunksize = 2500 ) One issue with the imported data is that the vectors for the embeddings is a string rather than a field containing repeated floating-point values. The SQL statement below however creates a new table that converts the string into a proper array of real numbers. CREATE OR REPLACE TABLE ` my - gbq - project . clustering . nz_pubs_with_embeddings ` AS SELECT id , title , abstract , REGEXP_EXTRACT_ALL ( orgs , r \"\\'([^\\s,\\']+)\\'\" ) as orgs , ( SELECT ARRAY_AGG ( CAST ( v as FLOAT64 ) ORDER BY o asc ) FROM UNNEST ( SPLIT ( REGEXP_EXTRACT ( title_embed , r \"^\\[(.*)\\]$\" ), \", \" )) v WITH OFFSET o ) AS title_embed , ( SELECT ARRAY_AGG ( CAST ( v as FLOAT64 ) ORDER BY o asc ) FROM UNNEST ( SPLIT ( REGEXP_EXTRACT ( abstract_embed , r \"^\\[(.*)\\]$\" ), \", \" )) v WITH OFFSET o ) AS abstract_embed FROM ` my - gbq - project . temp . semantic_clustering ` Taking a look at the table within Google BigQuery (web interface) we can see the schema. It contains title_embed and abstract_embed both of which are repeated fields of FLOAT type.","title":"4. Save embedding vectors to a BigQuery table"},{"location":"tutorials/05-topic_clusters/#5-create-k-means-cluster-models","text":"Warning The example BigQuery SQL statement below use BigQuery ML which has a different charging model when it comes to creating models. Please keep this in mind and approximate how much it could potentially cost before executing any of the SQL statements. Pricing details are available from Google here: BigQuery ML Pricing . The most time consuming and computationally expensive part of this example is the clustering process itself. Luckily we can utilise BigQuery ML to create the models and create the clusters of publications based on the word embeddings we have created previously. In this example we will use k-means clustering to attempt to assign each publication to a grouping of semantically similar publications (based on abstracts). Essentially k-means clustering attempts to partition the individual items using Euclidean distance as the metric and minimising the within cluster sum of squares (ie. minimise squared errors). The primary input parameter that controls the k-means models is the number of partitions (ie. how many clusters we want to partition into). We can use some crude hyper-parameter tuning through creating numerous k-means models on our dataset, attempting to determine what a \u201cgood\u201d number of clusters may look like for our set of data. It is important to understand however that because of the approach k-means clustering utilises when assigning items to partitions it is important to analysis the results as a local minimums are a possibility. DECLARE NUM_CLUSTERS INT64 DEFAULT 10 ; DECLARE MODEL_NAME STRING ; WHILE NUM_CLUSTERS < 60 DO SET MODEL_NAME = CONCAT ( 'my-gbq-project.clustering.model_nz_pubs_' , CAST ( NUM_CLUSTERS AS STRING )); EXECUTE IMMEDIATE format ( \"\"\" CREATE OR REPLACE MODEL `%s` OPTIONS(model_type='kmeans', num_clusters = %d, DISTANCE_TYPE = 'cosine', kmeans_init_method = 'KMEANS++') AS WITH data AS ( SELECT abstract_embed[OFFSET(0)] as abstract0, abstract_embed[OFFSET(1)] as abstract1, abstract_embed[OFFSET(2)] as abstract2, abstract_embed[OFFSET(3)] as abstract3, abstract_embed[OFFSET(4)] as abstract4, abstract_embed[OFFSET(5)] as abstract5, abstract_embed[OFFSET(6)] as abstract6, abstract_embed[OFFSET(7)] as abstract7, ... abstract_embed[OFFSET(510)] as abstract510, abstract_embed[OFFSET(511)] as abstract511 FROM `my-gbq-project.clustering.nz_pubs_with_embeddings` ) SELECT * FROM data; \"\"\" , MODEL_NAME , NUM_CLUSTERS ); SET NUM_CLUSTERS = NUM_CLUSTERS + 5 ; END WHILE Note The SQL statement above has been truncated. The abstract_embed[OFFSET(n)] as abstract_n lines have been omitted and goes from 0 to 511 uninterrupted and has been abbreviated for the purposes of brevity in the tutorial write-up. The full SQL is available here . Creating the models may take a little while as it must apply the k-means algorithm over our dataset for each of the different cluster count parameter values. The next step is to analyse the results for all of the models created. We can evaluate each of the models, returning the Davies\u2013Bouldin index and the mean squared distance. Determining the optimal number of clusters is outside the scope of this tutorial, however a common approach is using the \u201cElbow method\u201d . # StandardSQL SELECT 60 as cluster_size , * FROM ML . EVALUATE ( MODEL ` my - gbq - project . clustering . model_nz_pubs_60 ` ) UNION ALL SELECT 55 as cluster_size , * FROM ML . EVALUATE ( MODEL ` my - gbq - project . clustering . model_nz_pubs_55 ` ) UNION ALL SELECT 50 as cluster_size , * FROM ML . EVALUATE ( MODEL ` my - gbq - project . clustering . model_nz_pubs_50 ` ) UNION ALL SELECT 45 as cluster_size , * FROM ML . EVALUATE ( MODEL ` my - gbq - project . clustering . model_nz_pubs_45 ` ) UNION ALL SELECT 40 as cluster_size , * FROM ML . EVALUATE ( MODEL ` my - gbq - project . clustering . model_nz_pubs_40 ` ) UNION ALL SELECT 35 as cluster_size , * FROM ML . EVALUATE ( MODEL ` my - gbq - project . clustering . model_nz_pubs_35 ` ) UNION ALL SELECT 30 as cluster_size , * FROM ML . EVALUATE ( MODEL ` my - gbq - project . clustering . model_nz_pubs_30 ` ) UNION ALL SELECT 25 as cluster_size , * FROM ML . EVALUATE ( MODEL ` my - gbq - project . clustering . model_nz_pubs_25 ` ) UNION ALL SELECT 20 as cluster_size , * FROM ML . EVALUATE ( MODEL ` my - gbq - project . clustering . model_nz_pubs_20 ` ) UNION ALL SELECT 15 as cluster_size , * FROM ML . EVALUATE ( MODEL ` my - gbq - project . clustering . model_nz_pubs_15 ` ) UNION ALL SELECT 10 as cluster_size , * FROM ML . EVALUATE ( MODEL ` my - gbq - project . clustering . model_nz_pubs_10 ` )","title":"5. Create k-means cluster models"},{"location":"tutorials/05-topic_clusters/#6-publication-to-cluster-assignment","text":"Using k=55 ( my-gbq-project.clustering.model_nz_pubs_55 ) as the cluster count from above we can now use the k-means model we created in BigQuery to determine which publications are assigned to each different centroid (cluster). Note below that the input data into the model matches the data structure that was used during the creation of the model itself (the abstracts embedding vector exploded into 512 individual string inputs). CREATE TABLE ` my - gbq - project . clustering . pubs_assigned_55 ` AS WITH data AS ( SELECT id , abstract_embed [ OFFSET ( 0 )] as abstract0 , abstract_embed [ OFFSET ( 1 )] as abstract1 , abstract_embed [ OFFSET ( 2 )] as abstract2 , ... abstract_embed [ OFFSET ( 510 )] as abstract510 , abstract_embed [ OFFSET ( 511 )] as abstract511 FROM ` my - gbq - project . clustering . nz_pubs_with_embeddings ` ) SELECT id , CENTROID_ID , NEAREST_CENTROIDS_DISTANCE FROM ML . PREDICT ( MODEL ` my - gbq - project . clustering . model_nz_pubs_55 ` , ( SELECT * FROM data )) Taking a look at the resultant table we see that each publication has been assigned to a primary cluster (centroid identifier) as well as a listing of the closest centroids as well as the Euclidean distance to the centroid.","title":"6. Publication to cluster assignment"},{"location":"tutorials/05-topic_clusters/#7-determine-conceptstopics-for-each-cluster","text":"The next stage is to try and determine the topics and concepts associated with each of the 55 clusters identified within the assigned publications above. Some publications have concepts extracted via NLP processing of the full-text. One approach to determining the concepts associated with each cluster is to aggregate these extracted concepts from for all publications within the same cluster. SELECT ANY_VALUE ( centroid ) as centroid_id , cluster_id as cluster_name , ARRAY_AGG ( concept order by ordering ) as concepts FROM ( SELECT * FROM ( SELECT * , ROW_NUMBER () OVER ( PARTITION BY cluster_id ORDER BY count desc ) as ordering FROM ( SELECT ANY_VALUE ( centroid ) as centroid , a . cluster_id as cluster_id , concept , COUNT ( * ) as count FROM ( SELECT a . id , a . CENTROID_ID as centroid , CONCAT ( \"Cluster-\" , CAST ( a . CENTROID_ID as STRING )) as cluster_id , ( SELECT ARRAY_AGG ( LOWER ( c . concept )) FROM UNNEST ( p . concepts ) c ) as concetps FROM ` my - gbq - project . clustering . pubs_assigned_55 ` a LEFT JOIN ` dimensions - ai . data_analytics . publications ` p ON p . id = a . id ) a , UNNEST ( a . concetps ) concept GROUP BY a . cluster_id , concept ) ORDER BY cluster_id desc , ordering asc ) WHERE ordering <= 20 ) GROUP BY cluster_id Taking a look at the results we can see for each centroid the 20 top concepts (by occurrence over all publications).","title":"7. Determine concepts/topics for each cluster"},{"location":"tutorials/06-funder_grant_pubs/","text":"Identify a funder's grants and publications Use case How many grants have resulted in publications? This notebook serves two main purposes: i. Enables identification of a funder's grants and resulting publications. ii. Prepares a summary table of grants and publications (per year and in total), and a bar graph showing number of grants by year with and without publications. Prerequisites In order to run this tutorial, please ensure that: You have a valid Dimensions on Google BigQuery account and have configured a Google Cloud project . You have a valid Dimensions API account . You have some basic familiarity with Python and Jupyter notebooks . This tutorial is based on a Jupyter notebook that is available directly via GitHub . Method This notebook retrieves grants and publication data from Dimensions the world's largest linked research information dataset. For more about Dimensions visit - https://www.dimensions.ai/ To complete this analysis the following steps are taken: Connect to the Dimensions database. Find funder's unique GRID ID. The Global Research Identifier Database (GRID) is a database of research-related organisations each with a unique and persistent identifier. For more about GRID visit - https://grid.ac/. Generate list of grants and resulting publications. (OPTIONAL) Export list of grants and resulting publications to excel. Summary table showing number of grants and publications in total and by year. Graph showing number of grants that have yielded one or more publications by year. Using this notebook Before running some cells you will have to fill in information about the funder and year range. When required instructions are set out in info boxes. This notebook assumes installation of python packages pandas and plotly . 1. Connect to Dimensions You will need to be authenticated to run these queries\u2014see the \"Verifying your connection tutorial for options. Run this cell if you're connecting via a Google Colab notebook: from google.colab import auth auth . authenticate_user () print ( 'Authenticated' ) Authenticated import pandas as pd from google.cloud import bigquery GBQ_PROJECT_ID = 'ds-gov-funder-gbq' # <----- Input your project ID here client = bigquery . Client ( project = GBQ_PROJECT_ID ) 2. Find funder's unique GRID ID To identify funder's grants we need the funder's unique GRID ID. The following cell searches on the funders names and returns the associated GRID ID(s). Instructions Before running the code in the following cell input funder's name Funder's name might return multiple GRID IDs, note all relevant GRID IDs as they are needed for the next step. If no GRID IDs are returned, try searching different name variants for the funder. Avoid acronyms. funder_name = 'Wellcome Trust' # Input funder name here funder_name = funder_name . lower () query = f \"\"\" select id as grid_id , name from `dimensions-ai.data_analytics.grid` where lower(name) like '% { funder_name } %' \"\"\" funder = pd . read_gbq ( query , project_id = GBQ_PROJECT_ID ) funder . head ( 10 ) Row grid_id name 0 grid.52788.30 Wellcome Trust 1 grid.478079.5 NIHR Wellcome Trust Southampton Clinical Resea... 2 grid.484745.e Wellcome Trust/DBT India Alliance 3 grid.482844.6 Wellcome Trust Centre for the History of Medicine 4 grid.419393.5 Malawi-Liverpool-Wellcome Trust Clinical Resea... 3. Generate list of grants and publications identifiers The following cell generates a table of funders grants and any resulting publications for grants started in a defined time period. Only the first five rows of the table will be shown in this notebook, however the whole table can be exported to excel in the following step. Table columns: dimensions_grant_id - Unique identifier for grant in Dimensions grant_start_year - Year the grant started grant_number - Grant number used by funder dimensions_publication_id - Unique identifier for publications in Dimensions doi - Digital Object Identifier Instructions Before running the code in the following cell, where indicated: input funders GRID ID between ('') e.g. ('grid.52788.30') . If funder has two or more GRID IDs then list within brackets separated by commas e.g. ('grid.453157.1', 'grid.453157.1') . Update year range, note that we can only look at full years and cannot be filtered by month or day. query = f \"\"\" with pubs as (select id, doi from `dimensions-ai.data_analytics.publications`) , grants as ( select id as dimensions_grant_id , start_year as grant_start_year , grant_number , pub_id as dimensions_publication_id from `dimensions-ai.data_analytics.grants` g left join unnest(g.resulting_publication_ids) as pub_id where funder_org in ('grid.52788.30') -- ADD GRID ID HERE and start_year between 2011 and 2015 -- UPDATE YEAR RANGE ) Select grants.* , pubs.doi from grants left join pubs on pubs.id = grants.dimensions_publication_id \"\"\" grants = pd . read_gbq ( query ) grants . head () Row dimensions_grant_id grant_start_year grant_number dimensions_publication_id doi 0 grant.3627143 2012 082265/Z/07/A pub.1105902779 10.1016/j.jaci.2018.07.011 1 grant.3635772 2012 098274/Z/12/Z pub.1124346329 10.1016/j.bpj.2020.01.019 2 grant.3636003 2012 097899/Z/11/Z pub.1062809971 10.1016/j.jaci.2018.07.011 3 grant.3642390 2012 098649/Z/12/Z None None 4 grant.3638982 2012 099618/Z/12/Z pub.1023307051 10.1007/s00234-016-1648-3 4. (OPTIONAL) Export list of grants and resulting publications to excel The following cell creates new excel file of grants and resulting publications as output from previous cell. The new file will appear in the same location as this notebook is saved. Instructions Before running code the code in the following cell replace FILE_NAME with new file name. # Creates new excel file. writer = pd . ExcelWriter ( 'FILE_NAME.xlsx' , engine = 'openpyxl' ) grants . to_excel ( writer , sheet_name = 'grants_pubs' ) writer . save () 5. Summary table of number of grants and publications in total and by year The following cell creates a table with columns, for all years and per year: grant_start_year - first year of the grant grants - number of grants awarded by funder publications - number of publications resulting from awards by funder grants_without_publications - number of grants that have not resulted in a publication perc_without_publications - percentage of grants that have not resulted in a publication avg_publications_per_grants - average (mean) number of publications per grant Instructions Before running code the code in the following cell, where indicated: input funders GRID ID between ('') e.g. ('grid.52788.30') . If funder has two or more GRID IDs then list within brackets separated by commas e.g. ('grid.453157.1', 'grid.453157.1') . Update year range query = f \"\"\" with grant_pub_map as ( select id , start_year , pub_id -- is this the best way of finding publications? or search for grant or from `dimensions-ai.data_analytics.grants` g left join unnest(g.resulting_publication_ids) as pub_id where funder_org = 'grid.52788.30' -- ADD GRID IDs HERE and start_year between 2011 and 2015 -- UPDATE YEAR RANGE ) select 'All years' as grant_start_year , count(distinct id) as grants , count(pub_id) as publications , countif(pub_id is null) as grants_without_publications , round(((countif(pub_id is null)/count(distinct id))*100), 2) as perc_without_publications , round((count(pub_id)/(count(distinct id) )),2) as avg_publications_per_grants from grant_pub_map union all select cast(start_year as string) as grant_start_year , count(distinct id) as grants , count(pub_id) as publications , countif(pub_id is null) as grants_without_publications , round(((countif(pub_id is null)/count(distinct id))*100), 2) as perc_without_publications , round((count(pub_id)/(count(distinct id) )),2) as avg_publications_per_grants from grant_pub_map group by start_year order by 1 desc ; \"\"\" grants1 = pd . read_gbq ( query ) grants1 . head ( 5 ) Row grant_start_year grants publications grants_without_publications perc_without_publications avg_publications_per_grants 0 All years 6423 45840 3731 58.09 7.14 1 2015 1417 6901 833 58.79 4.87 2 2014 1327 8746 791 59.61 6.59 3 2013 1200 8217 690 57.50 6.85 4 2012 1159 8515 689 59.45 7.35 6. Bar graph showing number of grants that have yielded one or more publications by year Using the table above the following cell generates a bar graph showing the number of grants with and without publications per year. # Remove first row that counts all grants over all years df = grants1 . iloc [ 1 :] # Reverse rows so earlist year shown first on bar graph df = df [:: - 1 ] . reset_index () # Calculate number of grants with publications df . insert ( 5 , 'grant_pubs' , df [ \"grants\" ] - df [ \"grants_without_publications\" ]) import plotly.graph_objs as go x = df . grant_start_year trace1 = { 'x' : x , 'y' : df . grant_pubs , 'name' : 'Grants with publications' , 'type' : 'bar' }; trace2 = { 'x' : x , 'y' : df . grants_without_publications , 'name' : 'Grants without publications' , 'type' : 'bar' }; data = [ trace1 , trace2 ]; layout = { 'xaxis' : { 'title' : 'Year' }, 'yaxis' : { 'title' : 'Number of grants' }, 'barmode' : 'relative' , 'title' : 'Grants with and without publications' }; fig = go . Figure ( data = data , layout = layout ) fig . show ()","title":"Identify a funder's grants and publications"},{"location":"tutorials/06-funder_grant_pubs/#identify-a-funders-grants-and-publications","text":"","title":"Identify a funder's grants and publications"},{"location":"tutorials/06-funder_grant_pubs/#use-case","text":"How many grants have resulted in publications? This notebook serves two main purposes: i. Enables identification of a funder's grants and resulting publications. ii. Prepares a summary table of grants and publications (per year and in total), and a bar graph showing number of grants by year with and without publications. Prerequisites In order to run this tutorial, please ensure that: You have a valid Dimensions on Google BigQuery account and have configured a Google Cloud project . You have a valid Dimensions API account . You have some basic familiarity with Python and Jupyter notebooks . This tutorial is based on a Jupyter notebook that is available directly via GitHub .","title":"Use case"},{"location":"tutorials/06-funder_grant_pubs/#method","text":"This notebook retrieves grants and publication data from Dimensions the world's largest linked research information dataset. For more about Dimensions visit - https://www.dimensions.ai/ To complete this analysis the following steps are taken: Connect to the Dimensions database. Find funder's unique GRID ID. The Global Research Identifier Database (GRID) is a database of research-related organisations each with a unique and persistent identifier. For more about GRID visit - https://grid.ac/. Generate list of grants and resulting publications. (OPTIONAL) Export list of grants and resulting publications to excel. Summary table showing number of grants and publications in total and by year. Graph showing number of grants that have yielded one or more publications by year.","title":"Method"},{"location":"tutorials/06-funder_grant_pubs/#using-this-notebook","text":"Before running some cells you will have to fill in information about the funder and year range. When required instructions are set out in info boxes. This notebook assumes installation of python packages pandas and plotly .","title":"Using this notebook"},{"location":"tutorials/06-funder_grant_pubs/#1-connect-to-dimensions","text":"You will need to be authenticated to run these queries\u2014see the \"Verifying your connection tutorial for options. Run this cell if you're connecting via a Google Colab notebook: from google.colab import auth auth . authenticate_user () print ( 'Authenticated' ) Authenticated import pandas as pd from google.cloud import bigquery GBQ_PROJECT_ID = 'ds-gov-funder-gbq' # <----- Input your project ID here client = bigquery . Client ( project = GBQ_PROJECT_ID )","title":"1. Connect to Dimensions"},{"location":"tutorials/06-funder_grant_pubs/#2-find-funders-unique-grid-id","text":"To identify funder's grants we need the funder's unique GRID ID. The following cell searches on the funders names and returns the associated GRID ID(s). Instructions Before running the code in the following cell input funder's name Funder's name might return multiple GRID IDs, note all relevant GRID IDs as they are needed for the next step. If no GRID IDs are returned, try searching different name variants for the funder. Avoid acronyms. funder_name = 'Wellcome Trust' # Input funder name here funder_name = funder_name . lower () query = f \"\"\" select id as grid_id , name from `dimensions-ai.data_analytics.grid` where lower(name) like '% { funder_name } %' \"\"\" funder = pd . read_gbq ( query , project_id = GBQ_PROJECT_ID ) funder . head ( 10 ) Row grid_id name 0 grid.52788.30 Wellcome Trust 1 grid.478079.5 NIHR Wellcome Trust Southampton Clinical Resea... 2 grid.484745.e Wellcome Trust/DBT India Alliance 3 grid.482844.6 Wellcome Trust Centre for the History of Medicine 4 grid.419393.5 Malawi-Liverpool-Wellcome Trust Clinical Resea...","title":"2. Find funder's unique GRID ID"},{"location":"tutorials/06-funder_grant_pubs/#3-generate-list-of-grants-and-publications-identifiers","text":"The following cell generates a table of funders grants and any resulting publications for grants started in a defined time period. Only the first five rows of the table will be shown in this notebook, however the whole table can be exported to excel in the following step. Table columns: dimensions_grant_id - Unique identifier for grant in Dimensions grant_start_year - Year the grant started grant_number - Grant number used by funder dimensions_publication_id - Unique identifier for publications in Dimensions doi - Digital Object Identifier Instructions Before running the code in the following cell, where indicated: input funders GRID ID between ('') e.g. ('grid.52788.30') . If funder has two or more GRID IDs then list within brackets separated by commas e.g. ('grid.453157.1', 'grid.453157.1') . Update year range, note that we can only look at full years and cannot be filtered by month or day. query = f \"\"\" with pubs as (select id, doi from `dimensions-ai.data_analytics.publications`) , grants as ( select id as dimensions_grant_id , start_year as grant_start_year , grant_number , pub_id as dimensions_publication_id from `dimensions-ai.data_analytics.grants` g left join unnest(g.resulting_publication_ids) as pub_id where funder_org in ('grid.52788.30') -- ADD GRID ID HERE and start_year between 2011 and 2015 -- UPDATE YEAR RANGE ) Select grants.* , pubs.doi from grants left join pubs on pubs.id = grants.dimensions_publication_id \"\"\" grants = pd . read_gbq ( query ) grants . head () Row dimensions_grant_id grant_start_year grant_number dimensions_publication_id doi 0 grant.3627143 2012 082265/Z/07/A pub.1105902779 10.1016/j.jaci.2018.07.011 1 grant.3635772 2012 098274/Z/12/Z pub.1124346329 10.1016/j.bpj.2020.01.019 2 grant.3636003 2012 097899/Z/11/Z pub.1062809971 10.1016/j.jaci.2018.07.011 3 grant.3642390 2012 098649/Z/12/Z None None 4 grant.3638982 2012 099618/Z/12/Z pub.1023307051 10.1007/s00234-016-1648-3","title":"3. Generate list of grants and publications identifiers"},{"location":"tutorials/06-funder_grant_pubs/#4-optional-export-list-of-grants-and-resulting-publications-to-excel","text":"The following cell creates new excel file of grants and resulting publications as output from previous cell. The new file will appear in the same location as this notebook is saved. Instructions Before running code the code in the following cell replace FILE_NAME with new file name. # Creates new excel file. writer = pd . ExcelWriter ( 'FILE_NAME.xlsx' , engine = 'openpyxl' ) grants . to_excel ( writer , sheet_name = 'grants_pubs' ) writer . save ()","title":"4. (OPTIONAL) Export list of grants and resulting publications to excel"},{"location":"tutorials/06-funder_grant_pubs/#5-summary-table-of-number-of-grants-and-publications-in-total-and-by-year","text":"The following cell creates a table with columns, for all years and per year: grant_start_year - first year of the grant grants - number of grants awarded by funder publications - number of publications resulting from awards by funder grants_without_publications - number of grants that have not resulted in a publication perc_without_publications - percentage of grants that have not resulted in a publication avg_publications_per_grants - average (mean) number of publications per grant Instructions Before running code the code in the following cell, where indicated: input funders GRID ID between ('') e.g. ('grid.52788.30') . If funder has two or more GRID IDs then list within brackets separated by commas e.g. ('grid.453157.1', 'grid.453157.1') . Update year range query = f \"\"\" with grant_pub_map as ( select id , start_year , pub_id -- is this the best way of finding publications? or search for grant or from `dimensions-ai.data_analytics.grants` g left join unnest(g.resulting_publication_ids) as pub_id where funder_org = 'grid.52788.30' -- ADD GRID IDs HERE and start_year between 2011 and 2015 -- UPDATE YEAR RANGE ) select 'All years' as grant_start_year , count(distinct id) as grants , count(pub_id) as publications , countif(pub_id is null) as grants_without_publications , round(((countif(pub_id is null)/count(distinct id))*100), 2) as perc_without_publications , round((count(pub_id)/(count(distinct id) )),2) as avg_publications_per_grants from grant_pub_map union all select cast(start_year as string) as grant_start_year , count(distinct id) as grants , count(pub_id) as publications , countif(pub_id is null) as grants_without_publications , round(((countif(pub_id is null)/count(distinct id))*100), 2) as perc_without_publications , round((count(pub_id)/(count(distinct id) )),2) as avg_publications_per_grants from grant_pub_map group by start_year order by 1 desc ; \"\"\" grants1 = pd . read_gbq ( query ) grants1 . head ( 5 ) Row grant_start_year grants publications grants_without_publications perc_without_publications avg_publications_per_grants 0 All years 6423 45840 3731 58.09 7.14 1 2015 1417 6901 833 58.79 4.87 2 2014 1327 8746 791 59.61 6.59 3 2013 1200 8217 690 57.50 6.85 4 2012 1159 8515 689 59.45 7.35","title":"5. Summary table of number of grants and publications in total and by year"},{"location":"tutorials/06-funder_grant_pubs/#6-bar-graph-showing-number-of-grants-that-have-yielded-one-or-more-publications-by-year","text":"Using the table above the following cell generates a bar graph showing the number of grants with and without publications per year. # Remove first row that counts all grants over all years df = grants1 . iloc [ 1 :] # Reverse rows so earlist year shown first on bar graph df = df [:: - 1 ] . reset_index () # Calculate number of grants with publications df . insert ( 5 , 'grant_pubs' , df [ \"grants\" ] - df [ \"grants_without_publications\" ]) import plotly.graph_objs as go x = df . grant_start_year trace1 = { 'x' : x , 'y' : df . grant_pubs , 'name' : 'Grants with publications' , 'type' : 'bar' }; trace2 = { 'x' : x , 'y' : df . grants_without_publications , 'name' : 'Grants without publications' , 'type' : 'bar' }; data = [ trace1 , trace2 ]; layout = { 'xaxis' : { 'title' : 'Year' }, 'yaxis' : { 'title' : 'Number of grants' }, 'barmode' : 'relative' , 'title' : 'Grants with and without publications' }; fig = go . Figure ( data = data , layout = layout ) fig . show ()","title":"6. Bar graph showing number of grants that have yielded one or more publications by year"},{"location":"tutorials/07-retrieve_patents/","text":"Retrieve patents linked to a set of grants Prerequisites In order to run this tutorial, please ensure that: You have a valid Dimensions on Google BigQuery account and have configured a Google Cloud project . You have a valid Dimensions API account . You have some basic familiarity with Python and Jupyter notebooks . This example uses the Dimensions database to determine the number of patents generated by a set of grants, providing another perspective on the impact of funding from different organizations. There are two types of linkages considered here: Patents that directly acknowledge grants. Since the enactment of the Bayh-Dole Act in 1980, all recipients of U.S. federal funding are legally obligated to disclose government support that led to any inventions they produce. This is useful when funders are most interested in the patents directly supported by the grants. Patents that cite publications supported by grants. This can be considered by funders who are interested in understanding patents that build less directly on research that they supported. Note Non-patent literatures in the patent references section are not only provided by the inventors, but also added by patent examiners during the patent examination process. This tutorial is based on a Jupyter notebook that is available directly via GitHub . # general import import pandas as pd import numpy as np import sys , time , json import plotly.express as px # authentication happens via your browser from google.colab import auth auth . authenticate_user () print ( 'Authenticated' ) Authenticated # GBQ import from google.cloud import bigquery BQ_PROJECT_ID = \"ds-gov-funder-gbq\" # remember to change this to your project ID client = bigquery . Client ( project = BQ_PROJECT_ID ) An example For this example, we will be using the Dimensions database to extract patents that are linked to the grants funded by NSF Directorate for Engineering and started in 2015 . The patents , publications , and grants datasets will be used in the example to retrieve patents through two types of linkages. Retrieve patents that directly acknowledged grants First, let's get all patents that directly acknowledged the NSF Directorate for Engineering grants that started in 2015 Tips Unnest the funding_details in dimensions-ai.data_analytics.patents table to get the funder's GRID ID and Dimensions Grant ID Join with dimensions-ai.data_analytics.grants table and limit to the grants that started in 2015 The GRID ID of NSF Directorate for Engineering can be found in Global Research Identifier Database # build the search string search_string = \"\"\" SELECT DISTINCT pat.id AS patent_id, f.grant_id, pat.family_id, CAST(pat.priority_year AS string) priority_year, 'supported' AS link_type FROM `dimensions-ai.data_analytics.patents` pat CROSS JOIN UNNEST(funding_details) f -- unnest the field to get the funder and grant number acknowledged by the patent JOIN `dimensions-ai.data_analytics.grants` g ON g.id = f.grant_id WHERE f.grid_id = 'grid.457810.f' -- specify funder's GRID ID AND g.start_year = 2015 -- specify the grant start year \"\"\" # retrieve from BigQuery and make it a pandas dataframe nsf_grant_patents = client . query ( search_string ) . to_dataframe () # get a quick preview of the patents directly linked to the grants nsf_grant_patents . head () Row patent_id grant_id family_id priority_year link_type 0 US-20200303900-A1 grant.4179692 60479104 2016 supported 1 US-20190224370-A1 grant.4178213 61562333 2016 supported 2 US-20160236141-A1 grant.3852639 56620694 2014 supported 3 US-20190193116-A1 grant.3982138 60663733 2016 supported 4 US-20200061618-A1 grant.4318677 69584146 2018 supported # get a quick count of how many patents were retrieved print ( nsf_grant_patents [ 'patent_id' ] . nunique ()) 581 Retrieve patents that cited the publications funded by the same set of grants Then, we can get all patents that cited publications which were funded by the same set of grants (i.e. grants funded by NSF Directorate for Engineering started in 2015) Tips unnest the resulting_publication_ids in dimensions-ai.data_analytics.grants table to get the publication ids funded by a set of grants, setting the funder's GRID ID and Start year the same as the above query unnest the publication_ids in dimensions-ai.data_analytics.patents table which contains publication ids cited by patents the publication_ids unnested from the above are used as an intermediate link between patents and grants # build the search string search_string = \"\"\" WITH grant_pubs AS ( SELECT DISTINCT pub_id, g.id AS grant_id FROM `dimensions-ai.data_analytics.grants` g CROSS JOIN UNNEST(resulting_publication_ids) pub_id -- unnest the publication ids resulting from grants WHERE g.funder_org = 'grid.457810.f' -- specify funder grid id AND g.start_year = 2015) -- specify grant start year SELECT DISTINCT pat.id AS patent_id, gp.grant_id, pat.family_id, CAST(pat.priority_year AS string) priority_year, 'pub_reference' AS link_type FROM `dimensions-ai.data_analytics.patents` pat CROSS JOIN UNNEST(publication_ids) pub_ref -- unnest the publication ids cited by patents JOIN grant_pubs gp ON gp.pub_id = pub_ref -- join on publicaiton id \"\"\" # retrieve from BigQuery and make it a pandas dataframe nsf_pub_ref_patents = client . query ( search_string ) . to_dataframe () # get a quick preview of the patents that cited publications which were funded by NSF grants nsf_pub_ref_patents . head () Row patent_id grant_id family_id priority_year link_type 0 WO-2019202933-A1 grant.4179511 68239624 2018 pub_reference 1 US-10528687-B2 grant.3861071 60158395 2016 pub_reference 2 DE-102017002874-A1 grant.3981846 61731654 2017 pub_reference 3 US-10725209-B2 grant.4312170 62908810 2017 pub_reference 4 US-10196708-B2 grant.4312419 62782292 2017 pub_reference # get a quick count of how many patents were retrieved print ( nsf_pub_ref_patents [ 'patent_id' ] . nunique ()) 224 Merge results Now we will merge two data frames to have a complete set of patents that are directly and indirectly linked to the set of grants nsf_patents = pd . concat ([ nsf_grant_patents , nsf_pub_ref_patents ]) . reset_index () # get a quick count of how many patents in total print ( nsf_patents [ 'patent_id' ] . nunique ()) 799 Quick overview of patents Lastly, we can examine the trends in the patents by priority year Tips family_id was used to deduplicate the patent documents, one patent family is a collection of patent documents that are considered to cover a single invention (see definition in DOCDB Simple patent family) priority_year was used to aggregate the patents, since it indicates the time when the invention was established. All patent documents in one patent family share the same priority date nsf_patents . groupby ([ 'link_type' , 'priority_year' ], as_index = False ) . agg ({ 'family_id' : 'nunique' }) \\ . rename ( columns = { 'family_id' : 'n_pat_families' }) \\ . pivot ( values = 'n_pat_families' , index = 'priority_year' , columns = 'link_type' ) link_type pub_reference supported priority_year 2004 3.0 NaN 2005 1.0 NaN 2009 1.0 NaN 2010 NaN 1.0 2011 1.0 NaN 2012 1.0 1.0 2013 4.0 5.0 2014 8.0 15.0 2015 10.0 42.0 2016 41.0 90.0 2017 57.0 123.0 2018 57.0 63.0 2019 15.0 42.0 2020 1.0 1.0 In addition, we can also create a quick visualization of the trends plot_data = nsf_patents . groupby ([ 'link_type' , 'priority_year' ], as_index = False ) \\ . agg ({ 'family_id' : 'nunique' }) \\ . rename ( columns = { 'family_id' : 'n_patent_families' }) # create line plot by using plotly express fig = px . line ( plot_data , x = \"priority_year\" , y = \"n_patent_families\" , color = \"link_type\" , title = 'Trends in patents supported by NSF Directorate for Engineering grants starting 2015' ) fig . show () if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});} window.PlotlyConfig = {MathJaxConfig: 'local'}; window.PLOTLYENV=window.PLOTLYENV || {}; if (document.getElementById(\"d2f6fb5d-2291-4ffe-8c38-48c5cd14abda\")) { Plotly.newPlot( 'd2f6fb5d-2291-4ffe-8c38-48c5cd14abda', [{\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"link_type=pub_reference<br>priority_year=%{x}<br>n_patent_families=%{y}\", \"legendgroup\": \"link_type=pub_reference\", \"line\": {\"color\": \"#636efa\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"link_type=pub_reference\", \"showlegend\": true, \"type\": \"scatter\", \"x\": [\"2004\", \"2005\", \"2009\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"], \"xaxis\": \"x\", \"y\": [3, 1, 1, 1, 1, 4, 8, 10, 41, 57, 57, 15, 1], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"link_type=supported<br>priority_year=%{x}<br>n_patent_families=%{y}\", \"legendgroup\": \"link_type=supported\", \"line\": {\"color\": \"#EF553B\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"link_type=supported\", \"showlegend\": true, \"type\": \"scatter\", \"x\": [\"2010\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"], \"xaxis\": \"x\", \"y\": [1, 1, 5, 15, 42, 90, 123, 63, 42, 1], \"yaxis\": \"y\"}], {\"legend\": {\"tracegroupgap\": 0}, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"text\": \"Trends in patents supported by NSF Directorate for Engineering grants starting 2015\"}, \"xaxis\": {\"anchor\": \"y\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"priority_year\"}}, \"yaxis\": {\"anchor\": \"x\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"n_patent_families\"}}}, {\"responsive\": true} ).then(function(){ var gd = document.getElementById('d2f6fb5d-2291-4ffe-8c38-48c5cd14abda'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) };","title":"Retrieve patents linked to a set of grants"},{"location":"tutorials/07-retrieve_patents/#retrieve-patents-linked-to-a-set-of-grants","text":"Prerequisites In order to run this tutorial, please ensure that: You have a valid Dimensions on Google BigQuery account and have configured a Google Cloud project . You have a valid Dimensions API account . You have some basic familiarity with Python and Jupyter notebooks . This example uses the Dimensions database to determine the number of patents generated by a set of grants, providing another perspective on the impact of funding from different organizations. There are two types of linkages considered here: Patents that directly acknowledge grants. Since the enactment of the Bayh-Dole Act in 1980, all recipients of U.S. federal funding are legally obligated to disclose government support that led to any inventions they produce. This is useful when funders are most interested in the patents directly supported by the grants. Patents that cite publications supported by grants. This can be considered by funders who are interested in understanding patents that build less directly on research that they supported. Note Non-patent literatures in the patent references section are not only provided by the inventors, but also added by patent examiners during the patent examination process. This tutorial is based on a Jupyter notebook that is available directly via GitHub . # general import import pandas as pd import numpy as np import sys , time , json import plotly.express as px # authentication happens via your browser from google.colab import auth auth . authenticate_user () print ( 'Authenticated' ) Authenticated # GBQ import from google.cloud import bigquery BQ_PROJECT_ID = \"ds-gov-funder-gbq\" # remember to change this to your project ID client = bigquery . Client ( project = BQ_PROJECT_ID )","title":"Retrieve patents linked to a set of grants"},{"location":"tutorials/07-retrieve_patents/#an-example","text":"For this example, we will be using the Dimensions database to extract patents that are linked to the grants funded by NSF Directorate for Engineering and started in 2015 . The patents , publications , and grants datasets will be used in the example to retrieve patents through two types of linkages.","title":"An example"},{"location":"tutorials/07-retrieve_patents/#retrieve-patents-that-directly-acknowledged-grants","text":"First, let's get all patents that directly acknowledged the NSF Directorate for Engineering grants that started in 2015 Tips Unnest the funding_details in dimensions-ai.data_analytics.patents table to get the funder's GRID ID and Dimensions Grant ID Join with dimensions-ai.data_analytics.grants table and limit to the grants that started in 2015 The GRID ID of NSF Directorate for Engineering can be found in Global Research Identifier Database # build the search string search_string = \"\"\" SELECT DISTINCT pat.id AS patent_id, f.grant_id, pat.family_id, CAST(pat.priority_year AS string) priority_year, 'supported' AS link_type FROM `dimensions-ai.data_analytics.patents` pat CROSS JOIN UNNEST(funding_details) f -- unnest the field to get the funder and grant number acknowledged by the patent JOIN `dimensions-ai.data_analytics.grants` g ON g.id = f.grant_id WHERE f.grid_id = 'grid.457810.f' -- specify funder's GRID ID AND g.start_year = 2015 -- specify the grant start year \"\"\" # retrieve from BigQuery and make it a pandas dataframe nsf_grant_patents = client . query ( search_string ) . to_dataframe () # get a quick preview of the patents directly linked to the grants nsf_grant_patents . head () Row patent_id grant_id family_id priority_year link_type 0 US-20200303900-A1 grant.4179692 60479104 2016 supported 1 US-20190224370-A1 grant.4178213 61562333 2016 supported 2 US-20160236141-A1 grant.3852639 56620694 2014 supported 3 US-20190193116-A1 grant.3982138 60663733 2016 supported 4 US-20200061618-A1 grant.4318677 69584146 2018 supported # get a quick count of how many patents were retrieved print ( nsf_grant_patents [ 'patent_id' ] . nunique ()) 581","title":"Retrieve patents that directly acknowledged grants"},{"location":"tutorials/07-retrieve_patents/#retrieve-patents-that-cited-the-publications-funded-by-the-same-set-of-grants","text":"Then, we can get all patents that cited publications which were funded by the same set of grants (i.e. grants funded by NSF Directorate for Engineering started in 2015) Tips unnest the resulting_publication_ids in dimensions-ai.data_analytics.grants table to get the publication ids funded by a set of grants, setting the funder's GRID ID and Start year the same as the above query unnest the publication_ids in dimensions-ai.data_analytics.patents table which contains publication ids cited by patents the publication_ids unnested from the above are used as an intermediate link between patents and grants # build the search string search_string = \"\"\" WITH grant_pubs AS ( SELECT DISTINCT pub_id, g.id AS grant_id FROM `dimensions-ai.data_analytics.grants` g CROSS JOIN UNNEST(resulting_publication_ids) pub_id -- unnest the publication ids resulting from grants WHERE g.funder_org = 'grid.457810.f' -- specify funder grid id AND g.start_year = 2015) -- specify grant start year SELECT DISTINCT pat.id AS patent_id, gp.grant_id, pat.family_id, CAST(pat.priority_year AS string) priority_year, 'pub_reference' AS link_type FROM `dimensions-ai.data_analytics.patents` pat CROSS JOIN UNNEST(publication_ids) pub_ref -- unnest the publication ids cited by patents JOIN grant_pubs gp ON gp.pub_id = pub_ref -- join on publicaiton id \"\"\" # retrieve from BigQuery and make it a pandas dataframe nsf_pub_ref_patents = client . query ( search_string ) . to_dataframe () # get a quick preview of the patents that cited publications which were funded by NSF grants nsf_pub_ref_patents . head () Row patent_id grant_id family_id priority_year link_type 0 WO-2019202933-A1 grant.4179511 68239624 2018 pub_reference 1 US-10528687-B2 grant.3861071 60158395 2016 pub_reference 2 DE-102017002874-A1 grant.3981846 61731654 2017 pub_reference 3 US-10725209-B2 grant.4312170 62908810 2017 pub_reference 4 US-10196708-B2 grant.4312419 62782292 2017 pub_reference # get a quick count of how many patents were retrieved print ( nsf_pub_ref_patents [ 'patent_id' ] . nunique ()) 224","title":"Retrieve patents that cited the publications funded by the same set of grants"},{"location":"tutorials/07-retrieve_patents/#merge-results","text":"Now we will merge two data frames to have a complete set of patents that are directly and indirectly linked to the set of grants nsf_patents = pd . concat ([ nsf_grant_patents , nsf_pub_ref_patents ]) . reset_index () # get a quick count of how many patents in total print ( nsf_patents [ 'patent_id' ] . nunique ()) 799","title":"Merge results"},{"location":"tutorials/07-retrieve_patents/#quick-overview-of-patents","text":"Lastly, we can examine the trends in the patents by priority year Tips family_id was used to deduplicate the patent documents, one patent family is a collection of patent documents that are considered to cover a single invention (see definition in DOCDB Simple patent family) priority_year was used to aggregate the patents, since it indicates the time when the invention was established. All patent documents in one patent family share the same priority date nsf_patents . groupby ([ 'link_type' , 'priority_year' ], as_index = False ) . agg ({ 'family_id' : 'nunique' }) \\ . rename ( columns = { 'family_id' : 'n_pat_families' }) \\ . pivot ( values = 'n_pat_families' , index = 'priority_year' , columns = 'link_type' ) link_type pub_reference supported priority_year 2004 3.0 NaN 2005 1.0 NaN 2009 1.0 NaN 2010 NaN 1.0 2011 1.0 NaN 2012 1.0 1.0 2013 4.0 5.0 2014 8.0 15.0 2015 10.0 42.0 2016 41.0 90.0 2017 57.0 123.0 2018 57.0 63.0 2019 15.0 42.0 2020 1.0 1.0 In addition, we can also create a quick visualization of the trends plot_data = nsf_patents . groupby ([ 'link_type' , 'priority_year' ], as_index = False ) \\ . agg ({ 'family_id' : 'nunique' }) \\ . rename ( columns = { 'family_id' : 'n_patent_families' }) # create line plot by using plotly express fig = px . line ( plot_data , x = \"priority_year\" , y = \"n_patent_families\" , color = \"link_type\" , title = 'Trends in patents supported by NSF Directorate for Engineering grants starting 2015' ) fig . show () if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});} window.PlotlyConfig = {MathJaxConfig: 'local'}; window.PLOTLYENV=window.PLOTLYENV || {}; if (document.getElementById(\"d2f6fb5d-2291-4ffe-8c38-48c5cd14abda\")) { Plotly.newPlot( 'd2f6fb5d-2291-4ffe-8c38-48c5cd14abda', [{\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"link_type=pub_reference<br>priority_year=%{x}<br>n_patent_families=%{y}\", \"legendgroup\": \"link_type=pub_reference\", \"line\": {\"color\": \"#636efa\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"link_type=pub_reference\", \"showlegend\": true, \"type\": \"scatter\", \"x\": [\"2004\", \"2005\", \"2009\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"], \"xaxis\": \"x\", \"y\": [3, 1, 1, 1, 1, 4, 8, 10, 41, 57, 57, 15, 1], \"yaxis\": \"y\"}, {\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"link_type=supported<br>priority_year=%{x}<br>n_patent_families=%{y}\", \"legendgroup\": \"link_type=supported\", \"line\": {\"color\": \"#EF553B\", \"dash\": \"solid\"}, \"mode\": \"lines\", \"name\": \"link_type=supported\", \"showlegend\": true, \"type\": \"scatter\", \"x\": [\"2010\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"], \"xaxis\": \"x\", \"y\": [1, 1, 5, 15, 42, 90, 123, 63, 42, 1], \"yaxis\": \"y\"}], {\"legend\": {\"tracegroupgap\": 0}, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"text\": \"Trends in patents supported by NSF Directorate for Engineering grants starting 2015\"}, \"xaxis\": {\"anchor\": \"y\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"priority_year\"}}, \"yaxis\": {\"anchor\": \"x\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"n_patent_families\"}}}, {\"responsive\": true} ).then(function(){ var gd = document.getElementById('d2f6fb5d-2291-4ffe-8c38-48c5cd14abda'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) };","title":"Quick overview of patents"},{"location":"tutorials/08-research_integrity/","text":"Usage of Trust Markers in research Use case 'Trust Markers' are indicators of integrity, professionalism and reproducibility in scientific research. They also highlight the level of research transparency within the document, and reduce the risks of allowing non-compliance to research integrity policies to go unobserved. This notebook takes you through a few examples which address the above questions. It makes use of the Dimensions Research Integrity Dataset , an additional module to Dimensions on Google Big Query (GBQ). Using the dataset, you can answer questions such as: How many research articles use Trust Markers? How does coverage of Trust Markers differ across publishers, funders and research organisations? If researchers are using Trust Markers (eg, data availability statements), how many are putting their data in repositories (and which repositories)? Prerequisites In order to run this tutorial, please ensure that: You have a valid Dimensions on Google BigQuery account and have configured a Google Cloud project . This must include access to the Dimensions Research Integrity Dataset. You have some basic familiarity with Python and Jupyter notebooks . About Trust Markers The Trust Markers in the Dataset represent the integrity and reproducibility of scientific research. Trust Markers represent a contract between authors and readers that proper research practices have been observed. They also highlight the level of research transparency within the document, and reduce the risks of allowing non-compliance to research integrity policies to go unobserved. To read definitions of specific Trust Markers, see the GBQ schema documentation . Method This notebook retrieves data about trust marker and publication data from Dimensions, the world's largest linked research information datatset. In particular the Trust Markers are taken from the DRI module. To complete the analysis the following steps are taken: Connect to the Dimensions database. Gather information about general use of Trust Markers, broken down by publisher. Look at how usage of Trust Markers breaks down by research organisations in the US, by joining on data from GRID . Find out some of the most commonly claimed contributions by inviduals to research across different fields. Understand the usage of repositories across funders, research orgs and research articles. 1. Connect You will need to be authenticated to run these queries - see the \"Verifying yout connection\" tutorial for options. from google.colab import auth auth . authenticate_user () print ( 'Authenticated' ) Authenticated #import other packages/modules needed for analysis from google.cloud import bigquery import numpy as np import pandas as pd import plotly.express as px import plotly.graph_objs as go #config to avoid having to declare parameters multiple times project_id = \"ds-ripeta-gbq\" #replace 'project' with the required project associate with your account from google.cloud.bigquery import magics magics . context . project = project_id client = bigquery . Client ( project = project_id ) 2. Trust Markers by publisher Write and run a query In this instance we will limit data to 2022 and 10 publishers to keep things manageable. #write the query - we're limiting results here to keep things easy to follow qry = client . query ( \"\"\" SELECT p.publisher.name, 100 * COUNTIF(tm.data.data_availability_statement.present)/ COUNT(p.id) AS data_availability, 100 * COUNTIF(tm.code.code_availability_statement.present)/COUNT(p.id) AS code_availability, 100 * COUNTIF(tm.authors.author_contribution_statement.present)/COUNT(p.id) AS author_contributions, 100 * COUNTIF(tm.authors.conflict_of_interest_statement.present)/COUNT(p.id) AS conflict_interest, 100 * COUNTIF(tm.funding.funding_statement.present)/COUNT(p.id) AS funding_statement, #note here we are only counting articles with mesh terms of 'animal' or 'human' as if this criteria isn't met it is unlikely an ethics statement would be expected 100 * COUNTIF((tm.ethical_approval.ethical_approval_statement.present AND (('Humans' IN UNNEST(p.mesh_terms)) OR ('Animals' IN UNNEST(p.mesh_terms)))) )/ NULLIF(COUNTIF(('Humans' in UNNEST(p.mesh_terms)) OR ('Animals' IN unnest(p.mesh_terms))), 0) AS ethics_approval FROM dimensions-ai.data_analytics.publications p INNER JOIN `dimensions-ai-integrity.data.trust_markers` tm ON p.id = tm.id WHERE p.year = 2022 AND p.document_type.classification = 'RESEARCH_ARTICLE' GROUP BY 1 ORDER BY COUNT(p.id) DESC #order by number of publications in the trust marker dataset --To keep things manageable for display purposes, we'll only look at 10 publishers for now LIMIT 10 \"\"\" ) #get the results results = qry . result () . to_dataframe () #may take a while depending on how much data your return #take a peak results .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name data_availability code_availability author_contributions conflict_interest funding_statement ethics_approval 0 Elsevier 22.890000 1.597544 17.378246 80.405263 57.918947 18.943601 1 Springer Nature 49.878036 8.742873 52.908014 40.728133 71.049643 65.175558 2 MDPI 88.760718 1.339980 97.192921 99.243270 91.880857 13.336054 3 Wiley 39.376133 1.139870 20.882104 7.671746 58.562563 16.154602 4 Frontiers 97.583713 1.031047 99.547012 6.398587 79.234019 75.641116 5 Taylor & Francis 17.195639 0.605616 11.305576 83.174962 52.912265 28.457937 6 Institute of Electrical and Electronics Engine... 0.300312 0.723896 0.208514 0.599313 3.561780 5.201794 7 American Chemical Society (ACS) 2.348741 0.794581 42.137319 1.914696 75.219210 4.040979 8 Hindawi 85.378842 1.029393 23.275609 85.217410 52.681454 23.068174 9 SAGE Publications 9.527544 0.604082 18.841010 4.317599 90.031582 33.596158 .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } const buttonEl = document.querySelector('#df-f9c1d925-b84b-4166-93f3-6df07095fdb5 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-f9c1d925-b84b-4166-93f3-6df07095fdb5'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['output_type'] = 'display_data'; await google.colab.output.renderOutput(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } Visualize your results #make data 'long' long_results = pd . melt ( results , id_vars = \"name\" , value_vars = results . columns . tolist ()[ 1 : 7 ], var_name = \"trust_marker\" , value_name = \"pct\" ) #convert your data to a dictionary so plotly can handle it result_dict = { \"z\" : long_results . pct . tolist (), \"x\" : long_results . trust_marker . tolist (), \"y\" : long_results . name . tolist () } #plot plot = go . Figure ( data = go . Heatmap ( result_dict , colorscale = \"Blues\" ) ) plot . show () if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});} window.PlotlyConfig = {MathJaxConfig: 'local'}; window.PLOTLYENV=window.PLOTLYENV || {}; if (document.getElementById(\"ddd7db84-31c9-4b4c-aa14-ad094b3a5518\")) { Plotly.newPlot( \"ddd7db84-31c9-4b4c-aa14-ad094b3a5518\", [{\"colorscale\":[[0.0,\"rgb(247,251,255)\"],[0.125,\"rgb(222,235,247)\"],[0.25,\"rgb(198,219,239)\"],[0.375,\"rgb(158,202,225)\"],[0.5,\"rgb(107,174,214)\"],[0.625,\"rgb(66,146,198)\"],[0.75,\"rgb(33,113,181)\"],[0.875,\"rgb(8,81,156)\"],[1.0,\"rgb(8,48,107)\"]],\"x\":[\"data_availability\",\"data_availability\",\"data_availability\",\"data_availability\",\"data_availability\",\"data_availability\",\"data_availability\",\"data_availability\",\"data_availability\",\"data_availability\",\"code_availability\",\"code_availability\",\"code_availability\",\"code_availability\",\"code_availability\",\"code_availability\",\"code_availability\",\"code_availability\",\"code_availability\",\"code_availability\",\"author_contributions\",\"author_contributions\",\"author_contributions\",\"author_contributions\",\"author_contributions\",\"author_contributions\",\"author_contributions\",\"author_contributions\",\"author_contributions\",\"author_contributions\",\"conflict_interest\",\"conflict_interest\",\"conflict_interest\",\"conflict_interest\",\"conflict_interest\",\"conflict_interest\",\"conflict_interest\",\"conflict_interest\",\"conflict_interest\",\"conflict_interest\",\"funding_statement\",\"funding_statement\",\"funding_statement\",\"funding_statement\",\"funding_statement\",\"funding_statement\",\"funding_statement\",\"funding_statement\",\"funding_statement\",\"funding_statement\",\"ethics_approval\",\"ethics_approval\",\"ethics_approval\",\"ethics_approval\",\"ethics_approval\",\"ethics_approval\",\"ethics_approval\",\"ethics_approval\",\"ethics_approval\",\"ethics_approval\"],\"y\":[\"Elsevier\",\"Springer Nature\",\"MDPI\",\"Wiley\",\"Frontiers\",\"Taylor & Francis\",\"Institute of Electrical and Electronics Engineers (IEEE)\",\"American Chemical Society (ACS)\",\"Hindawi\",\"SAGE Publications\",\"Elsevier\",\"Springer Nature\",\"MDPI\",\"Wiley\",\"Frontiers\",\"Taylor & Francis\",\"Institute of Electrical and Electronics Engineers (IEEE)\",\"American Chemical Society (ACS)\",\"Hindawi\",\"SAGE Publications\",\"Elsevier\",\"Springer Nature\",\"MDPI\",\"Wiley\",\"Frontiers\",\"Taylor & Francis\",\"Institute of Electrical and Electronics Engineers (IEEE)\",\"American Chemical Society (ACS)\",\"Hindawi\",\"SAGE Publications\",\"Elsevier\",\"Springer Nature\",\"MDPI\",\"Wiley\",\"Frontiers\",\"Taylor & Francis\",\"Institute of Electrical and Electronics Engineers (IEEE)\",\"American Chemical Society (ACS)\",\"Hindawi\",\"SAGE Publications\",\"Elsevier\",\"Springer Nature\",\"MDPI\",\"Wiley\",\"Frontiers\",\"Taylor & Francis\",\"Institute of Electrical and Electronics Engineers (IEEE)\",\"American Chemical Society (ACS)\",\"Hindawi\",\"SAGE Publications\",\"Elsevier\",\"Springer Nature\",\"MDPI\",\"Wiley\",\"Frontiers\",\"Taylor & Francis\",\"Institute of Electrical and Electronics Engineers (IEEE)\",\"American Chemical Society (ACS)\",\"Hindawi\",\"SAGE Publications\"],\"z\":[22.89,49.878036061926394,88.76071784646062,39.376133392995925,97.58371345090703,17.19563866448223,0.3003121147743069,2.3487407459264573,85.3788418801627,9.527544034422094,1.5975438596491227,8.74287336608881,1.3399800598205385,1.1398695273309625,1.031047022470729,0.6056155019490425,0.7238964513337005,0.7945814445980713,1.02939326596503,0.6040823247631362,17.378245614035087,52.908014276443865,97.19292123629113,20.88210357740044,99.54701196056587,11.305575956160668,0.20851365174285938,42.137319075205205,23.27560904021133,18.84100977129655,80.40526315789474,40.7281334013164,99.24327018943171,7.671745837356633,6.398587434048725,83.1749618665612,0.5993128229338789,1.9146962563662775,85.21740953499099,4.317598931728099,57.91894736842105,71.04964308890331,91.88085742771685,58.5625632933751,79.23401929665987,52.912264843794134,3.561780365620164,75.21920996902182,52.68145414902092,90.03158184785603,18.943601038307243,65.17555777726507,13.336054160464782,16.154602030789388,75.64111571699571,28.457936549692217,5.201793721973094,4.040978941377348,23.06817373995877,33.5961579815067],\"type\":\"heatmap\"}], {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}}}, {\"responsive\": true} ).then(function(){ var gd = document.getElementById('ddd7db84-31c9-4b4c-aa14-ad094b3a5518'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; 3. Trust Markers by research org There are plenty of other analyses we can carry out using DRI. We are also not obliged to pull in aggregated data - we can also pull in data 'row-by-row' and analyse further in Python. We'll do this in the next example to look at the proportion of articles using Trust Markers at US universities. Note that this example is set up to work generally. In a notebook environment (like Colab or Jupyter) you can use magic commands to reduce the code down to just the query and store as a summary dataframe. Google has guidance on doing this . We will use this magic commands in future examples. %% bigquery markers_by_us_uni SELECT p . id AS pub_id , p . year , orgs AS org_id , CONCAT ( g . name , ' (' , g . address . city , ')' ) AS org_name , tm . data . data_availability_statement . present AS das , tm . code . code_availability_statement . present AS cas , tm . authors . author_contribution_statement . present AS auth_cont , tm . authors . conflict_of_interest_statement . present AS conflict_int , tm . funding . funding_statement . present AS funding , CASE WHEN tm . ethical_approval . ethical_approval_statement . present IS TRUE AND ( 'Humans' IN UNNEST ( p . mesh_terms ) OR 'Animals' IN UNNEST ( p . mesh_terms )) THEN TRUE WHEN tm . ethical_approval . ethical_approval_statement . present IS FALSE AND ( 'Humans' IN UNNEST ( p . mesh_terms ) OR 'Animals' IN UNNEST ( p . mesh_terms )) THEN FALSE ELSE NULL END AS ethics FROM dimensions - ai . data_analytics . publications p , UNNEST ( research_orgs ) orgs INNER JOIN ` dimensions - ai - integrity . data . trust_markers ` tm ON p . id = tm . id INNER JOIN dimensions - ai . data_analytics . grid g ON orgs = g . id AND 'Education' IN UNNEST ( g . types ) AND g . address . country = \"United States\" WHERE p . year = 2022 AND p . document_type . classification = 'RESEARCH_ARTICLE' Query is running: 0%| | Downloading: 0%| | #you can see we've got the result straight to a df; take a look markers_by_us_uni . head ( 5 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } pub_id year org_id org_name das cas auth_cont conflict_int funding ethics 0 pub.1141586193 2022 grid.36425.36 Stony Brook University (Stony Brook) False False False False True <NA> 1 pub.1141411763 2022 grid.5288.7 Oregon Health & Science University (Portland) False False True True False False 2 pub.1141060825 2022 grid.262273.0 Queens College, CUNY (New York) True False False True False False 3 pub.1140891786 2022 grid.255935.d Fisk University (Nashville) False False False True False <NA> 4 pub.1141168735 2022 grid.152326.1 Vanderbilt University (Nashville) False False False False False True .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } const buttonEl = document.querySelector('#df-35fa28d7-9722-4b74-9855-cded5ca7315b button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-35fa28d7-9722-4b74-9855-cded5ca7315b'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['output_type'] = 'display_data'; await google.colab.output.renderOutput(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } #now we'll manipulate as required in Python marker_df = markers_by_us_uni #flag marker cols marker_cols = [ \"das\" , \"cas\" , \"auth_cont\" , \"conflict_int\" , \"funding\" , \"ethics\" ] #work out if there is a least one marker marker_df [ \"tm\" ] = marker_df [ marker_cols ] . eq ( 1 ) . any ( axis = 1 ) #institutions w/ <=1,000 publications gt1000 = ( marker_df . groupby ([ \"org_id\" ], as_index = False ) . agg ({ \"pub_id\" : \"count\" }) ) gt1000 = gt1000 [ gt1000 [ \"pub_id\" ] >= 1000 ][ \"org_id\" ] . to_list () #summary marker_sum = ( marker_df . groupby ([ \"org_id\" , \"org_name\" , \"tm\" ], as_index = False ) . agg ({ \"pub_id\" : \"count\" }) ) #add on % marker_sum [ \"pct\" ] = 100 * marker_sum [ \"pub_id\" ] / marker_sum . groupby ([ \"org_id\" ])[ \"pub_id\" ] . transform ( \"sum\" ) #remove institutions w/ <=1000 pubs and tm = False rows marker_sum = marker_sum [( marker_sum [ \"org_id\" ] . isin ( gt1000 )) & ( marker_sum [ \"tm\" ] == True )] #sort and slice to keep data manageable, pick the top 10 by number of publications... marker_sum = marker_sum . sort_values ( \"pub_id\" , ascending = False ) . head ( 10 ) #...then order by pct for purposes of plot marker_sum = marker_sum . sort_values ( \"pct\" , ascending = False ) marker_sum .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } org_id org_name tm pub_id pct 1730 grid.38142.3c Harvard University (Cambridge) True 15532 85.797934 1309 grid.266102.1 University of California, San Francisco (San F... True 5955 85.511200 101 grid.21107.35 Johns Hopkins University (Baltimore) True 8246 84.800494 3785 grid.5386.8 Cornell University (Ithaca) True 5846 83.765582 1722 grid.34477.33 University of Washington (Seattle) True 7825 83.475571 47 grid.168010.e Stanford University (Stanford) True 7731 83.030824 713 grid.25879.31 University of Pennsylvania (Philadelphia) True 6571 82.747765 3647 grid.47100.32 Yale University (New Haven) True 5992 82.488987 85 grid.19006.3e University of California, Los Angeles (Los Ang... True 6714 82.329859 115 grid.214458.e University of Michigan\u2013Ann Arbor (Ann Arbor) True 7672 80.301444 .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } const buttonEl = document.querySelector('#df-4350d97e-79bb-4565-bc81-b60c112b34a6 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-4350d97e-79bb-4565-bc81-b60c112b34a6'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['output_type'] = 'display_data'; await google.colab.output.renderOutput(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } #plot the data plot = px . bar ( marker_sum , x = \"pct\" , y = \"org_name\" ) plot . show () if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});} window.PlotlyConfig = {MathJaxConfig: 'local'}; window.PLOTLYENV=window.PLOTLYENV || {}; if (document.getElementById(\"49056c21-fc71-44d1-813f-6ac5ff6442fc\")) { Plotly.newPlot( \"49056c21-fc71-44d1-813f-6ac5ff6442fc\", [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"pct=%{x}<br>org_name=%{y}<extra></extra>\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"\",\"offsetgroup\":\"\",\"orientation\":\"h\",\"showlegend\":false,\"textposition\":\"auto\",\"x\":[85.79793404408109,85.51120045950603,84.80049362402303,83.76558246167073,83.47557072754427,83.03082375684674,82.74776476514293,82.48898678414096,82.32985898221949,80.30144442118484],\"xaxis\":\"x\",\"y\":[\"Harvard University (Cambridge)\",\"University of California, San Francisco (San Francisco)\",\"Johns Hopkins University (Baltimore)\",\"Cornell University (Ithaca)\",\"University of Washington (Seattle)\",\"Stanford University (Stanford)\",\"University of Pennsylvania (Philadelphia)\",\"Yale University (New Haven)\",\"University of California, Los Angeles (Los Angeles)\",\"University of Michigan\\u2013Ann Arbor (Ann Arbor)\"],\"yaxis\":\"y\",\"type\":\"bar\"}], {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"pct\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"org_name\"}},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60},\"barmode\":\"relative\"}, {\"responsive\": true} ).then(function(){ var gd = document.getElementById('49056c21-fc71-44d1-813f-6ac5ff6442fc'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; 4. Author contributions to articles You can go beyond just the 'basic' Trust Markers with Dimensions Research Integrity. You can also look at related data, such as recorded contributions to papers by individuals, or at which repositories data is being deposited in. Let's take a look at author contributions by research categorisation (note: articles falling under multiple categories will be counted once in each category. Articles mentioning the same verb more than once are only counted once per category). This will help understand acknowledgement patterns in research and possibly identify discipline areas where practice is 'ahead of the curve'. %% bigquery cont_df SELECT p . year , cat . name , contributor_verbs , COUNT ( DISTINCT p . id ) publications FROM dimensions - ai . data_analytics . publications p , UNNEST ( category_for . first_level . full ) cat INNER JOIN ` dimensions - ai - integrity . data . trust_markers ` tm ON p . id = tm . id , UNNEST ( tm . authors . author_roles . keywords ) contributor_verbs WHERE p . type = 'article' and p . year between 2011 and 2022 group by 1 , 2 , 3 Query is running: 0%| | Downloading: 0%| | #see what we get cont_df . head ( 5 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } year name contributor_verbs publications 0 2021 Biomedical And Clinical Sciences using 2733 1 2016 Biomedical And Clinical Sciences using 1108 2 2022 Psychology using 315 3 2015 Biomedical And Clinical Sciences using 723 4 2021 Agricultural, Veterinary And Food Sciences using 456 .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } const buttonEl = document.querySelector('#df-945121b3-d838-4e96-882e-6afa1413ca58 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-945121b3-d838-4e96-882e-6afa1413ca58'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['output_type'] = 'display_data'; await google.colab.output.renderOutput(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } There are a lot of variables (field and verbs) here and we can't visualise them all in one go. Instead, let's identify the top five verbs and six fields (by number of publications) and stick with just those for now. #get the most common verbs common_verbs = ( cont_df . groupby ([ \"contributor_verbs\" ], as_index = False ) . agg ({ \"publications\" : \"sum\" }) . sort_values ( \"publications\" , ascending = False ) . head ( 5 ) )[ \"contributor_verbs\" ] . to_list () common_verbs ['performed', 'wrote', 'designed', 'contributed', 'approved'] #and the most common fields common_fields = ( cont_df . groupby ([ \"name\" ], as_index = False ) . agg ({ \"publications\" : \"sum\" }) . sort_values ( \"publications\" , ascending = False ) . head ( 6 ) )[ \"name\" ] . to_list () common_fields ['Biomedical And Clinical Sciences', 'Biological Sciences', 'Engineering', 'Health Sciences', 'Chemical Sciences', 'Agricultural, Veterinary And Food Sciences'] #filter the data accordingly and sort cont_df = cont_df [( cont_df [ \"contributor_verbs\" ] . isin ( common_verbs )) & ( cont_df [ \"name\" ] . isin ( common_fields ))] . sort_values ( \"year\" ) #and now plot the results plot = px . line ( cont_df , x = \"year\" , y = \"publications\" , color = \"contributor_verbs\" , facet_col = \"name\" , facet_col_wrap = 3 ) plot . show () if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});} window.PlotlyConfig = {MathJaxConfig: 'local'}; window.PLOTLYENV=window.PLOTLYENV || {}; if (document.getElementById(\"25efd650-69bd-4c0c-a99a-0ac3b03e67cd\")) { Plotly.newPlot( \"25efd650-69bd-4c0c-a99a-0ac3b03e67cd\", [{\"hovertemplate\":\"contributor_verbs=designed<br>name=Engineering<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"designed\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"designed\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x4\",\"y\":[861,1380,2414,3311,5723,8607,12057,13758,11558,12595,12113,12479],\"yaxis\":\"y4\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=designed<br>name=Biomedical And Clinical Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"designed\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"designed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x5\",\"y\":[15171,22400,30336,32837,37739,37973,38436,42895,47782,57381,65233,65204],\"yaxis\":\"y5\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=designed<br>name=Chemical Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"designed\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"designed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x6\",\"y\":[1126,1743,2589,3321,5394,7098,8799,10463,10236,10785,11830,12239],\"yaxis\":\"y6\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=designed<br>name=Biological Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"designed\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"designed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x\",\"y\":[15418,20917,26693,27837,33440,35520,33729,35763,38780,42364,46366,44778],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=designed<br>name=Agricultural, Veterinary And Food Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"designed\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"designed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x2\",\"y\":[998,1911,2786,3491,4636,5069,4840,5801,7137,8841,10029,10311],\"yaxis\":\"y2\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=designed<br>name=Health Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"designed\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"designed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x3\",\"y\":[2394,3761,5639,6487,7754,7309,6200,7204,8133,10177,11662,12023],\"yaxis\":\"y3\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=performed<br>name=Engineering<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"performed\",\"line\":{\"color\":\"#EF553B\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"performed\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x4\",\"y\":[961,1530,2679,3744,6452,9616,13196,14835,13299,15179,16083,18236],\"yaxis\":\"y4\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=performed<br>name=Biomedical And Clinical Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"performed\",\"line\":{\"color\":\"#EF553B\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"performed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x5\",\"y\":[17357,25847,33683,36752,41700,41245,40210,44682,49842,59821,70488,71837],\"yaxis\":\"y5\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=performed<br>name=Chemical Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"performed\",\"line\":{\"color\":\"#EF553B\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"performed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x6\",\"y\":[1184,1853,2807,3790,6142,8160,10075,11978,12247,13366,15509,17093],\"yaxis\":\"y6\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=performed<br>name=Biological Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"performed\",\"line\":{\"color\":\"#EF553B\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"performed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x\",\"y\":[16162,21609,27545,29167,34976,36986,34816,37081,40259,44639,49756,49706],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=performed<br>name=Agricultural, Veterinary And Food Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"performed\",\"line\":{\"color\":\"#EF553B\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"performed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x2\",\"y\":[1064,1995,2844,3506,4427,4807,4434,5127,6570,8393,9769,10397],\"yaxis\":\"y2\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=performed<br>name=Health Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"performed\",\"line\":{\"color\":\"#EF553B\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"performed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x3\",\"y\":[2624,3730,5232,5948,7099,6253,4717,5256,5796,7532,9487,9987],\"yaxis\":\"y3\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=wrote<br>name=Engineering<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"wrote\",\"line\":{\"color\":\"#00cc96\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"wrote\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x4\",\"y\":[830,1383,2444,3238,6378,9477,13145,15224,13598,15177,15348,16069],\"yaxis\":\"y4\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=wrote<br>name=Biomedical And Clinical Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"wrote\",\"line\":{\"color\":\"#00cc96\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"wrote\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x5\",\"y\":[15203,22498,29903,29987,37720,37785,37132,40874,45452,55566,65083,67174],\"yaxis\":\"y5\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=wrote<br>name=Chemical Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"wrote\",\"line\":{\"color\":\"#00cc96\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"wrote\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x6\",\"y\":[1133,1751,2617,3312,5785,7688,9153,10519,10474,11559,13148,14371],\"yaxis\":\"y6\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=wrote<br>name=Biological Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"wrote\",\"line\":{\"color\":\"#00cc96\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"wrote\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x\",\"y\":[15621,20979,26568,25920,34827,37581,35844,36387,39422,44009,48868,47377],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=wrote<br>name=Agricultural, Veterinary And Food Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"wrote\",\"line\":{\"color\":\"#00cc96\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"wrote\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x2\",\"y\":[964,1812,2643,2888,4420,4878,4635,5201,6455,8261,9783,10320],\"yaxis\":\"y2\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=wrote<br>name=Health Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"wrote\",\"line\":{\"color\":\"#00cc96\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"wrote\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x3\",\"y\":[2297,3741,5426,5821,7485,6832,5438,6185,7138,9203,10768,11829],\"yaxis\":\"y3\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=contributed<br>name=Engineering<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"contributed\",\"line\":{\"color\":\"#ab63fa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"contributed\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x4\",\"y\":[995,1713,2709,3959,6390,8435,10894,13186,13676,16534,19145,22579],\"yaxis\":\"y4\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=contributed<br>name=Biomedical And Clinical Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"contributed\",\"line\":{\"color\":\"#ab63fa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"contributed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x5\",\"y\":[12848,18930,25410,29421,32439,31477,29526,34023,39920,55927,75971,85951],\"yaxis\":\"y5\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=contributed<br>name=Chemical Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"contributed\",\"line\":{\"color\":\"#ab63fa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"contributed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x6\",\"y\":[1434,2485,3571,4661,5942,7461,9046,10895,12024,13883,16138,17814],\"yaxis\":\"y6\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=contributed<br>name=Biological Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"contributed\",\"line\":{\"color\":\"#ab63fa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"contributed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x\",\"y\":[10670,14811,18439,19533,21110,20114,16549,18066,20228,24463,31007,33158],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=contributed<br>name=Agricultural, Veterinary And Food Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"contributed\",\"line\":{\"color\":\"#ab63fa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"contributed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x2\",\"y\":[843,1509,2189,2818,3509,3298,2742,3384,4490,6012,8048,9865],\"yaxis\":\"y2\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=contributed<br>name=Health Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"contributed\",\"line\":{\"color\":\"#ab63fa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"contributed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x3\",\"y\":[2893,4238,5994,7205,8505,8427,7747,9034,10432,14314,18237,21096],\"yaxis\":\"y3\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=approved<br>name=Engineering<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"approved\",\"line\":{\"color\":\"#FFA15A\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"approved\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x4\",\"y\":[535,917,1184,1490,2032,2656,3346,4466,5064,6484,9216,12405],\"yaxis\":\"y4\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=approved<br>name=Biomedical And Clinical Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"approved\",\"line\":{\"color\":\"#FFA15A\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"approved\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x5\",\"y\":[11419,15061,19200,23989,28659,31555,36414,44515,54008,74022,100388,111296],\"yaxis\":\"y5\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=approved<br>name=Chemical Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"approved\",\"line\":{\"color\":\"#FFA15A\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"approved\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x6\",\"y\":[146,302,475,514,1351,1784,2314,3821,4435,5092,6057,6490],\"yaxis\":\"y6\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=approved<br>name=Biological Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"approved\",\"line\":{\"color\":\"#FFA15A\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"approved\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x\",\"y\":[5317,5633,7234,8743,11703,14447,16099,19437,23871,29746,38263,39753],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=approved<br>name=Agricultural, Veterinary And Food Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"approved\",\"line\":{\"color\":\"#FFA15A\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"approved\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x2\",\"y\":[392,664,884,1241,1793,2486,2965,3977,5552,7611,10349,12235],\"yaxis\":\"y2\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=approved<br>name=Health Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"approved\",\"line\":{\"color\":\"#FFA15A\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"approved\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x3\",\"y\":[4196,5338,6965,8417,9807,10504,11975,13948,16201,20847,26067,30030],\"yaxis\":\"y3\",\"type\":\"scatter\"}], {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,0.31999999999999995],\"title\":{\"text\":\"year\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,0.46499999999999997],\"title\":{\"text\":\"publications\"}},\"xaxis2\":{\"anchor\":\"y2\",\"domain\":[0.33999999999999997,0.6599999999999999],\"matches\":\"x\",\"title\":{\"text\":\"year\"}},\"yaxis2\":{\"anchor\":\"x2\",\"domain\":[0.0,0.46499999999999997],\"matches\":\"y\",\"showticklabels\":false},\"xaxis3\":{\"anchor\":\"y3\",\"domain\":[0.6799999999999999,0.9999999999999999],\"matches\":\"x\",\"title\":{\"text\":\"year\"}},\"yaxis3\":{\"anchor\":\"x3\",\"domain\":[0.0,0.46499999999999997],\"matches\":\"y\",\"showticklabels\":false},\"xaxis4\":{\"anchor\":\"y4\",\"domain\":[0.0,0.31999999999999995],\"matches\":\"x\",\"showticklabels\":false},\"yaxis4\":{\"anchor\":\"x4\",\"domain\":[0.5349999999999999,0.9999999999999999],\"matches\":\"y\",\"title\":{\"text\":\"publications\"}},\"xaxis5\":{\"anchor\":\"y5\",\"domain\":[0.33999999999999997,0.6599999999999999],\"matches\":\"x\",\"showticklabels\":false},\"yaxis5\":{\"anchor\":\"x5\",\"domain\":[0.5349999999999999,0.9999999999999999],\"matches\":\"y\",\"showticklabels\":false},\"xaxis6\":{\"anchor\":\"y6\",\"domain\":[0.6799999999999999,0.9999999999999999],\"matches\":\"x\",\"showticklabels\":false},\"yaxis6\":{\"anchor\":\"x6\",\"domain\":[0.5349999999999999,0.9999999999999999],\"matches\":\"y\",\"showticklabels\":false},\"annotations\":[{\"font\":{},\"showarrow\":false,\"text\":\"name=Biological Sciences\",\"x\":0.15999999999999998,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.46499999999999997,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{},\"showarrow\":false,\"text\":\"name=Agricultural, Veterinary And Food Sciences\",\"x\":0.49999999999999994,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.46499999999999997,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{},\"showarrow\":false,\"text\":\"name=Health Sciences\",\"x\":0.8399999999999999,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.46499999999999997,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{},\"showarrow\":false,\"text\":\"name=Engineering\",\"x\":0.15999999999999998,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.9999999999999999,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{},\"showarrow\":false,\"text\":\"name=Biomedical And Clinical Sciences\",\"x\":0.49999999999999994,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.9999999999999999,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{},\"showarrow\":false,\"text\":\"name=Chemical Sciences\",\"x\":0.8399999999999999,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.9999999999999999,\"yanchor\":\"bottom\",\"yref\":\"paper\"}],\"legend\":{\"title\":{\"text\":\"contributor_verbs\"},\"tracegroupgap\":0},\"margin\":{\"t\":60}}, {\"responsive\": true} ).then(function(){ var gd = document.getElementById('25efd650-69bd-4c0c-a99a-0ac3b03e67cd'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; 5. Repository usage Now we'll take a look at how we can access the repositories data. Suppose we want to see the breadth of usage of specific repositories across work across funders and research orgs, to understand how wide the usage of the most common repositories is. %% bigquery repo_df -- the first two tables created by the WITH statements are needed to get full count of repositories based on names and URLs found WITH common_keywords AS ( SELECT kw , COUNT ( DISTINCT id ) AS pubs FROM ` dimensions - ai - integrity . data . trust_markers ` tm , UNNEST ( tm . data . data_locations . repositories ) kw GROUP BY 1 ), repositories AS ( SELECT id , kw , 'url' isin FROM ` dimensions - ai - integrity . data . trust_markers ` tm , UNNEST ( tm . data . data_locations . repository_urls ) url INNER JOIN common_keywords ON REGEXP_CONTAINS ( REPLACE ( url , '10.17632' , 'mendeley' ), LOWER ( kw )) UNION DISTINCT SELECT id , replace ( replace ( #replace( replace ( kw , 'open science framework' , 'osf' ), #'gene','geo'), 'gene expression omnibus' , 'geo' ), 'sequence read archive' , 'sra' ) kw , 'keyword' isin FROM ` dimensions - ai - integrity . data . trust_markers ` tm , UNNEST ( tm . data . data_locations . repositories ) kw WHERE kw != 'board' ), funders AS ( SELECT pubs . id AS pub_id , fund . grid_id AS funder_id FROM ` dimensions - ai . data_analytics . publications ` pubs , UNNEST ( funding_details ) fund WHERE pubs . year = 2021 ), orgs AS ( SELECT pubs . id AS pub_id , org FROM ` dimensions - ai . data_analytics . publications ` pubs , UNNEST ( research_orgs ) org WHERE pubs . year = 2021 ), combined AS ( SELECT rep . id , CASE WHEN REGEXP_CONTAINS ( rep . kw , 'github' ) THEN 'github' WHEN REGEXP_CONTAINS ( rep . kw , 'osf' ) THEN 'osf' WHEN REGEXP_CONTAINS ( rep . kw , 'ncbi' ) THEN 'ncbi' ELSE rep . kw END AS kw , f . funder_id AS funder , o . org AS ro FROM repositories rep INNER JOIN funders f ON rep . id = f . pub_id INNER JOIN orgs o ON rep . id = o . pub_id ) SELECT kw , COUNT ( DISTINCT funder ) AS funders , COUNT ( DISTINCT ro ) AS orgs , COUNT ( DISTINCT id ) AS pubs FROM combined GROUP BY 1 ORDER BY pubs DESC LIMIT 10 Query is running: 0%| | Downloading: 0%| | #see what we've got repo_df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } kw funders orgs pubs 0 ncbi 1858 7378 16104 1 github 1680 6787 13160 2 geo 1456 5115 8802 3 zenodo 1175 4828 6757 4 gene 1429 5311 6441 5 bioproject 1136 4369 5925 6 sra 1172 4292 5817 7 genbank 1025 4123 5019 8 figshare 1164 4422 4683 9 impact 1176 4649 3659 .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } const buttonEl = document.querySelector('#df-338dc8f7-c935-4eb7-b522-3c2c231be6f7 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-338dc8f7-c935-4eb7-b522-3c2c231be6f7'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['output_type'] = 'display_data'; await google.colab.output.renderOutput(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } #plot plot = px . scatter ( repo_df , x = \"funders\" , y = \"orgs\" , hover_data = [ \"kw\" ] ) plot . show () if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});} window.PlotlyConfig = {MathJaxConfig: 'local'}; window.PLOTLYENV=window.PLOTLYENV || {}; if (document.getElementById(\"6ec355be-87fa-4847-a2bb-2ce8b77e8d44\")) { Plotly.newPlot( \"6ec355be-87fa-4847-a2bb-2ce8b77e8d44\", [{\"customdata\":[[\"ncbi\"],[\"github\"],[\"geo\"],[\"zenodo\"],[\"gene\"],[\"bioproject\"],[\"sra\"],[\"genbank\"],[\"figshare\"],[\"impact\"]],\"hovertemplate\":\"funders=%{x}<br>orgs=%{y}<br>kw=%{customdata[0]}<extra></extra>\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[1858,1680,1456,1175,1429,1136,1172,1025,1164,1176],\"xaxis\":\"x\",\"y\":[7378,6787,5115,4828,5311,4369,4292,4123,4422,4649],\"yaxis\":\"y\",\"type\":\"scatter\"}], {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"funders\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"orgs\"}},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60}}, {\"responsive\": true} ).then(function(){ var gd = document.getElementById('6ec355be-87fa-4847-a2bb-2ce8b77e8d44'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) };","title":"Usage of Trust Markers in research"},{"location":"tutorials/08-research_integrity/#usage-of-trust-markers-in-research","text":"","title":"Usage of Trust Markers in research"},{"location":"tutorials/08-research_integrity/#use-case","text":"'Trust Markers' are indicators of integrity, professionalism and reproducibility in scientific research. They also highlight the level of research transparency within the document, and reduce the risks of allowing non-compliance to research integrity policies to go unobserved. This notebook takes you through a few examples which address the above questions. It makes use of the Dimensions Research Integrity Dataset , an additional module to Dimensions on Google Big Query (GBQ). Using the dataset, you can answer questions such as: How many research articles use Trust Markers? How does coverage of Trust Markers differ across publishers, funders and research organisations? If researchers are using Trust Markers (eg, data availability statements), how many are putting their data in repositories (and which repositories)? Prerequisites In order to run this tutorial, please ensure that: You have a valid Dimensions on Google BigQuery account and have configured a Google Cloud project . This must include access to the Dimensions Research Integrity Dataset. You have some basic familiarity with Python and Jupyter notebooks .","title":"Use case"},{"location":"tutorials/08-research_integrity/#about-trust-markers","text":"The Trust Markers in the Dataset represent the integrity and reproducibility of scientific research. Trust Markers represent a contract between authors and readers that proper research practices have been observed. They also highlight the level of research transparency within the document, and reduce the risks of allowing non-compliance to research integrity policies to go unobserved. To read definitions of specific Trust Markers, see the GBQ schema documentation .","title":"About Trust Markers"},{"location":"tutorials/08-research_integrity/#method","text":"This notebook retrieves data about trust marker and publication data from Dimensions, the world's largest linked research information datatset. In particular the Trust Markers are taken from the DRI module. To complete the analysis the following steps are taken: Connect to the Dimensions database. Gather information about general use of Trust Markers, broken down by publisher. Look at how usage of Trust Markers breaks down by research organisations in the US, by joining on data from GRID . Find out some of the most commonly claimed contributions by inviduals to research across different fields. Understand the usage of repositories across funders, research orgs and research articles.","title":"Method"},{"location":"tutorials/08-research_integrity/#1-connect","text":"You will need to be authenticated to run these queries - see the \"Verifying yout connection\" tutorial for options. from google.colab import auth auth . authenticate_user () print ( 'Authenticated' ) Authenticated #import other packages/modules needed for analysis from google.cloud import bigquery import numpy as np import pandas as pd import plotly.express as px import plotly.graph_objs as go #config to avoid having to declare parameters multiple times project_id = \"ds-ripeta-gbq\" #replace 'project' with the required project associate with your account from google.cloud.bigquery import magics magics . context . project = project_id client = bigquery . Client ( project = project_id )","title":"1. Connect"},{"location":"tutorials/08-research_integrity/#2-trust-markers-by-publisher","text":"","title":"2. Trust Markers by publisher"},{"location":"tutorials/08-research_integrity/#write-and-run-a-query","text":"In this instance we will limit data to 2022 and 10 publishers to keep things manageable. #write the query - we're limiting results here to keep things easy to follow qry = client . query ( \"\"\" SELECT p.publisher.name, 100 * COUNTIF(tm.data.data_availability_statement.present)/ COUNT(p.id) AS data_availability, 100 * COUNTIF(tm.code.code_availability_statement.present)/COUNT(p.id) AS code_availability, 100 * COUNTIF(tm.authors.author_contribution_statement.present)/COUNT(p.id) AS author_contributions, 100 * COUNTIF(tm.authors.conflict_of_interest_statement.present)/COUNT(p.id) AS conflict_interest, 100 * COUNTIF(tm.funding.funding_statement.present)/COUNT(p.id) AS funding_statement, #note here we are only counting articles with mesh terms of 'animal' or 'human' as if this criteria isn't met it is unlikely an ethics statement would be expected 100 * COUNTIF((tm.ethical_approval.ethical_approval_statement.present AND (('Humans' IN UNNEST(p.mesh_terms)) OR ('Animals' IN UNNEST(p.mesh_terms)))) )/ NULLIF(COUNTIF(('Humans' in UNNEST(p.mesh_terms)) OR ('Animals' IN unnest(p.mesh_terms))), 0) AS ethics_approval FROM dimensions-ai.data_analytics.publications p INNER JOIN `dimensions-ai-integrity.data.trust_markers` tm ON p.id = tm.id WHERE p.year = 2022 AND p.document_type.classification = 'RESEARCH_ARTICLE' GROUP BY 1 ORDER BY COUNT(p.id) DESC #order by number of publications in the trust marker dataset --To keep things manageable for display purposes, we'll only look at 10 publishers for now LIMIT 10 \"\"\" ) #get the results results = qry . result () . to_dataframe () #may take a while depending on how much data your return #take a peak results .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name data_availability code_availability author_contributions conflict_interest funding_statement ethics_approval 0 Elsevier 22.890000 1.597544 17.378246 80.405263 57.918947 18.943601 1 Springer Nature 49.878036 8.742873 52.908014 40.728133 71.049643 65.175558 2 MDPI 88.760718 1.339980 97.192921 99.243270 91.880857 13.336054 3 Wiley 39.376133 1.139870 20.882104 7.671746 58.562563 16.154602 4 Frontiers 97.583713 1.031047 99.547012 6.398587 79.234019 75.641116 5 Taylor & Francis 17.195639 0.605616 11.305576 83.174962 52.912265 28.457937 6 Institute of Electrical and Electronics Engine... 0.300312 0.723896 0.208514 0.599313 3.561780 5.201794 7 American Chemical Society (ACS) 2.348741 0.794581 42.137319 1.914696 75.219210 4.040979 8 Hindawi 85.378842 1.029393 23.275609 85.217410 52.681454 23.068174 9 SAGE Publications 9.527544 0.604082 18.841010 4.317599 90.031582 33.596158 .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } const buttonEl = document.querySelector('#df-f9c1d925-b84b-4166-93f3-6df07095fdb5 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-f9c1d925-b84b-4166-93f3-6df07095fdb5'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['output_type'] = 'display_data'; await google.colab.output.renderOutput(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); }","title":"Write and run a query"},{"location":"tutorials/08-research_integrity/#visualize-your-results","text":"#make data 'long' long_results = pd . melt ( results , id_vars = \"name\" , value_vars = results . columns . tolist ()[ 1 : 7 ], var_name = \"trust_marker\" , value_name = \"pct\" ) #convert your data to a dictionary so plotly can handle it result_dict = { \"z\" : long_results . pct . tolist (), \"x\" : long_results . trust_marker . tolist (), \"y\" : long_results . name . tolist () } #plot plot = go . Figure ( data = go . Heatmap ( result_dict , colorscale = \"Blues\" ) ) plot . show () if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});} window.PlotlyConfig = {MathJaxConfig: 'local'}; window.PLOTLYENV=window.PLOTLYENV || {}; if (document.getElementById(\"ddd7db84-31c9-4b4c-aa14-ad094b3a5518\")) { Plotly.newPlot( \"ddd7db84-31c9-4b4c-aa14-ad094b3a5518\", [{\"colorscale\":[[0.0,\"rgb(247,251,255)\"],[0.125,\"rgb(222,235,247)\"],[0.25,\"rgb(198,219,239)\"],[0.375,\"rgb(158,202,225)\"],[0.5,\"rgb(107,174,214)\"],[0.625,\"rgb(66,146,198)\"],[0.75,\"rgb(33,113,181)\"],[0.875,\"rgb(8,81,156)\"],[1.0,\"rgb(8,48,107)\"]],\"x\":[\"data_availability\",\"data_availability\",\"data_availability\",\"data_availability\",\"data_availability\",\"data_availability\",\"data_availability\",\"data_availability\",\"data_availability\",\"data_availability\",\"code_availability\",\"code_availability\",\"code_availability\",\"code_availability\",\"code_availability\",\"code_availability\",\"code_availability\",\"code_availability\",\"code_availability\",\"code_availability\",\"author_contributions\",\"author_contributions\",\"author_contributions\",\"author_contributions\",\"author_contributions\",\"author_contributions\",\"author_contributions\",\"author_contributions\",\"author_contributions\",\"author_contributions\",\"conflict_interest\",\"conflict_interest\",\"conflict_interest\",\"conflict_interest\",\"conflict_interest\",\"conflict_interest\",\"conflict_interest\",\"conflict_interest\",\"conflict_interest\",\"conflict_interest\",\"funding_statement\",\"funding_statement\",\"funding_statement\",\"funding_statement\",\"funding_statement\",\"funding_statement\",\"funding_statement\",\"funding_statement\",\"funding_statement\",\"funding_statement\",\"ethics_approval\",\"ethics_approval\",\"ethics_approval\",\"ethics_approval\",\"ethics_approval\",\"ethics_approval\",\"ethics_approval\",\"ethics_approval\",\"ethics_approval\",\"ethics_approval\"],\"y\":[\"Elsevier\",\"Springer Nature\",\"MDPI\",\"Wiley\",\"Frontiers\",\"Taylor & Francis\",\"Institute of Electrical and Electronics Engineers (IEEE)\",\"American Chemical Society (ACS)\",\"Hindawi\",\"SAGE Publications\",\"Elsevier\",\"Springer Nature\",\"MDPI\",\"Wiley\",\"Frontiers\",\"Taylor & Francis\",\"Institute of Electrical and Electronics Engineers (IEEE)\",\"American Chemical Society (ACS)\",\"Hindawi\",\"SAGE Publications\",\"Elsevier\",\"Springer Nature\",\"MDPI\",\"Wiley\",\"Frontiers\",\"Taylor & Francis\",\"Institute of Electrical and Electronics Engineers (IEEE)\",\"American Chemical Society (ACS)\",\"Hindawi\",\"SAGE Publications\",\"Elsevier\",\"Springer Nature\",\"MDPI\",\"Wiley\",\"Frontiers\",\"Taylor & Francis\",\"Institute of Electrical and Electronics Engineers (IEEE)\",\"American Chemical Society (ACS)\",\"Hindawi\",\"SAGE Publications\",\"Elsevier\",\"Springer Nature\",\"MDPI\",\"Wiley\",\"Frontiers\",\"Taylor & Francis\",\"Institute of Electrical and Electronics Engineers (IEEE)\",\"American Chemical Society (ACS)\",\"Hindawi\",\"SAGE Publications\",\"Elsevier\",\"Springer Nature\",\"MDPI\",\"Wiley\",\"Frontiers\",\"Taylor & Francis\",\"Institute of Electrical and Electronics Engineers (IEEE)\",\"American Chemical Society (ACS)\",\"Hindawi\",\"SAGE Publications\"],\"z\":[22.89,49.878036061926394,88.76071784646062,39.376133392995925,97.58371345090703,17.19563866448223,0.3003121147743069,2.3487407459264573,85.3788418801627,9.527544034422094,1.5975438596491227,8.74287336608881,1.3399800598205385,1.1398695273309625,1.031047022470729,0.6056155019490425,0.7238964513337005,0.7945814445980713,1.02939326596503,0.6040823247631362,17.378245614035087,52.908014276443865,97.19292123629113,20.88210357740044,99.54701196056587,11.305575956160668,0.20851365174285938,42.137319075205205,23.27560904021133,18.84100977129655,80.40526315789474,40.7281334013164,99.24327018943171,7.671745837356633,6.398587434048725,83.1749618665612,0.5993128229338789,1.9146962563662775,85.21740953499099,4.317598931728099,57.91894736842105,71.04964308890331,91.88085742771685,58.5625632933751,79.23401929665987,52.912264843794134,3.561780365620164,75.21920996902182,52.68145414902092,90.03158184785603,18.943601038307243,65.17555777726507,13.336054160464782,16.154602030789388,75.64111571699571,28.457936549692217,5.201793721973094,4.040978941377348,23.06817373995877,33.5961579815067],\"type\":\"heatmap\"}], {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}}}, {\"responsive\": true} ).then(function(){ var gd = document.getElementById('ddd7db84-31c9-4b4c-aa14-ad094b3a5518'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) };","title":"Visualize your results"},{"location":"tutorials/08-research_integrity/#3-trust-markers-by-research-org","text":"There are plenty of other analyses we can carry out using DRI. We are also not obliged to pull in aggregated data - we can also pull in data 'row-by-row' and analyse further in Python. We'll do this in the next example to look at the proportion of articles using Trust Markers at US universities. Note that this example is set up to work generally. In a notebook environment (like Colab or Jupyter) you can use magic commands to reduce the code down to just the query and store as a summary dataframe. Google has guidance on doing this . We will use this magic commands in future examples. %% bigquery markers_by_us_uni SELECT p . id AS pub_id , p . year , orgs AS org_id , CONCAT ( g . name , ' (' , g . address . city , ')' ) AS org_name , tm . data . data_availability_statement . present AS das , tm . code . code_availability_statement . present AS cas , tm . authors . author_contribution_statement . present AS auth_cont , tm . authors . conflict_of_interest_statement . present AS conflict_int , tm . funding . funding_statement . present AS funding , CASE WHEN tm . ethical_approval . ethical_approval_statement . present IS TRUE AND ( 'Humans' IN UNNEST ( p . mesh_terms ) OR 'Animals' IN UNNEST ( p . mesh_terms )) THEN TRUE WHEN tm . ethical_approval . ethical_approval_statement . present IS FALSE AND ( 'Humans' IN UNNEST ( p . mesh_terms ) OR 'Animals' IN UNNEST ( p . mesh_terms )) THEN FALSE ELSE NULL END AS ethics FROM dimensions - ai . data_analytics . publications p , UNNEST ( research_orgs ) orgs INNER JOIN ` dimensions - ai - integrity . data . trust_markers ` tm ON p . id = tm . id INNER JOIN dimensions - ai . data_analytics . grid g ON orgs = g . id AND 'Education' IN UNNEST ( g . types ) AND g . address . country = \"United States\" WHERE p . year = 2022 AND p . document_type . classification = 'RESEARCH_ARTICLE' Query is running: 0%| | Downloading: 0%| | #you can see we've got the result straight to a df; take a look markers_by_us_uni . head ( 5 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } pub_id year org_id org_name das cas auth_cont conflict_int funding ethics 0 pub.1141586193 2022 grid.36425.36 Stony Brook University (Stony Brook) False False False False True <NA> 1 pub.1141411763 2022 grid.5288.7 Oregon Health & Science University (Portland) False False True True False False 2 pub.1141060825 2022 grid.262273.0 Queens College, CUNY (New York) True False False True False False 3 pub.1140891786 2022 grid.255935.d Fisk University (Nashville) False False False True False <NA> 4 pub.1141168735 2022 grid.152326.1 Vanderbilt University (Nashville) False False False False False True .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } const buttonEl = document.querySelector('#df-35fa28d7-9722-4b74-9855-cded5ca7315b button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-35fa28d7-9722-4b74-9855-cded5ca7315b'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['output_type'] = 'display_data'; await google.colab.output.renderOutput(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } #now we'll manipulate as required in Python marker_df = markers_by_us_uni #flag marker cols marker_cols = [ \"das\" , \"cas\" , \"auth_cont\" , \"conflict_int\" , \"funding\" , \"ethics\" ] #work out if there is a least one marker marker_df [ \"tm\" ] = marker_df [ marker_cols ] . eq ( 1 ) . any ( axis = 1 ) #institutions w/ <=1,000 publications gt1000 = ( marker_df . groupby ([ \"org_id\" ], as_index = False ) . agg ({ \"pub_id\" : \"count\" }) ) gt1000 = gt1000 [ gt1000 [ \"pub_id\" ] >= 1000 ][ \"org_id\" ] . to_list () #summary marker_sum = ( marker_df . groupby ([ \"org_id\" , \"org_name\" , \"tm\" ], as_index = False ) . agg ({ \"pub_id\" : \"count\" }) ) #add on % marker_sum [ \"pct\" ] = 100 * marker_sum [ \"pub_id\" ] / marker_sum . groupby ([ \"org_id\" ])[ \"pub_id\" ] . transform ( \"sum\" ) #remove institutions w/ <=1000 pubs and tm = False rows marker_sum = marker_sum [( marker_sum [ \"org_id\" ] . isin ( gt1000 )) & ( marker_sum [ \"tm\" ] == True )] #sort and slice to keep data manageable, pick the top 10 by number of publications... marker_sum = marker_sum . sort_values ( \"pub_id\" , ascending = False ) . head ( 10 ) #...then order by pct for purposes of plot marker_sum = marker_sum . sort_values ( \"pct\" , ascending = False ) marker_sum .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } org_id org_name tm pub_id pct 1730 grid.38142.3c Harvard University (Cambridge) True 15532 85.797934 1309 grid.266102.1 University of California, San Francisco (San F... True 5955 85.511200 101 grid.21107.35 Johns Hopkins University (Baltimore) True 8246 84.800494 3785 grid.5386.8 Cornell University (Ithaca) True 5846 83.765582 1722 grid.34477.33 University of Washington (Seattle) True 7825 83.475571 47 grid.168010.e Stanford University (Stanford) True 7731 83.030824 713 grid.25879.31 University of Pennsylvania (Philadelphia) True 6571 82.747765 3647 grid.47100.32 Yale University (New Haven) True 5992 82.488987 85 grid.19006.3e University of California, Los Angeles (Los Ang... True 6714 82.329859 115 grid.214458.e University of Michigan\u2013Ann Arbor (Ann Arbor) True 7672 80.301444 .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } const buttonEl = document.querySelector('#df-4350d97e-79bb-4565-bc81-b60c112b34a6 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-4350d97e-79bb-4565-bc81-b60c112b34a6'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['output_type'] = 'display_data'; await google.colab.output.renderOutput(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } #plot the data plot = px . bar ( marker_sum , x = \"pct\" , y = \"org_name\" ) plot . show () if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});} window.PlotlyConfig = {MathJaxConfig: 'local'}; window.PLOTLYENV=window.PLOTLYENV || {}; if (document.getElementById(\"49056c21-fc71-44d1-813f-6ac5ff6442fc\")) { Plotly.newPlot( \"49056c21-fc71-44d1-813f-6ac5ff6442fc\", [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"pct=%{x}<br>org_name=%{y}<extra></extra>\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"\",\"offsetgroup\":\"\",\"orientation\":\"h\",\"showlegend\":false,\"textposition\":\"auto\",\"x\":[85.79793404408109,85.51120045950603,84.80049362402303,83.76558246167073,83.47557072754427,83.03082375684674,82.74776476514293,82.48898678414096,82.32985898221949,80.30144442118484],\"xaxis\":\"x\",\"y\":[\"Harvard University (Cambridge)\",\"University of California, San Francisco (San Francisco)\",\"Johns Hopkins University (Baltimore)\",\"Cornell University (Ithaca)\",\"University of Washington (Seattle)\",\"Stanford University (Stanford)\",\"University of Pennsylvania (Philadelphia)\",\"Yale University (New Haven)\",\"University of California, Los Angeles (Los Angeles)\",\"University of Michigan\\u2013Ann Arbor (Ann Arbor)\"],\"yaxis\":\"y\",\"type\":\"bar\"}], {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"pct\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"org_name\"}},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60},\"barmode\":\"relative\"}, {\"responsive\": true} ).then(function(){ var gd = document.getElementById('49056c21-fc71-44d1-813f-6ac5ff6442fc'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) };","title":"3. Trust Markers by research org"},{"location":"tutorials/08-research_integrity/#4-author-contributions-to-articles","text":"You can go beyond just the 'basic' Trust Markers with Dimensions Research Integrity. You can also look at related data, such as recorded contributions to papers by individuals, or at which repositories data is being deposited in. Let's take a look at author contributions by research categorisation (note: articles falling under multiple categories will be counted once in each category. Articles mentioning the same verb more than once are only counted once per category). This will help understand acknowledgement patterns in research and possibly identify discipline areas where practice is 'ahead of the curve'. %% bigquery cont_df SELECT p . year , cat . name , contributor_verbs , COUNT ( DISTINCT p . id ) publications FROM dimensions - ai . data_analytics . publications p , UNNEST ( category_for . first_level . full ) cat INNER JOIN ` dimensions - ai - integrity . data . trust_markers ` tm ON p . id = tm . id , UNNEST ( tm . authors . author_roles . keywords ) contributor_verbs WHERE p . type = 'article' and p . year between 2011 and 2022 group by 1 , 2 , 3 Query is running: 0%| | Downloading: 0%| | #see what we get cont_df . head ( 5 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } year name contributor_verbs publications 0 2021 Biomedical And Clinical Sciences using 2733 1 2016 Biomedical And Clinical Sciences using 1108 2 2022 Psychology using 315 3 2015 Biomedical And Clinical Sciences using 723 4 2021 Agricultural, Veterinary And Food Sciences using 456 .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } const buttonEl = document.querySelector('#df-945121b3-d838-4e96-882e-6afa1413ca58 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-945121b3-d838-4e96-882e-6afa1413ca58'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['output_type'] = 'display_data'; await google.colab.output.renderOutput(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } There are a lot of variables (field and verbs) here and we can't visualise them all in one go. Instead, let's identify the top five verbs and six fields (by number of publications) and stick with just those for now. #get the most common verbs common_verbs = ( cont_df . groupby ([ \"contributor_verbs\" ], as_index = False ) . agg ({ \"publications\" : \"sum\" }) . sort_values ( \"publications\" , ascending = False ) . head ( 5 ) )[ \"contributor_verbs\" ] . to_list () common_verbs ['performed', 'wrote', 'designed', 'contributed', 'approved'] #and the most common fields common_fields = ( cont_df . groupby ([ \"name\" ], as_index = False ) . agg ({ \"publications\" : \"sum\" }) . sort_values ( \"publications\" , ascending = False ) . head ( 6 ) )[ \"name\" ] . to_list () common_fields ['Biomedical And Clinical Sciences', 'Biological Sciences', 'Engineering', 'Health Sciences', 'Chemical Sciences', 'Agricultural, Veterinary And Food Sciences'] #filter the data accordingly and sort cont_df = cont_df [( cont_df [ \"contributor_verbs\" ] . isin ( common_verbs )) & ( cont_df [ \"name\" ] . isin ( common_fields ))] . sort_values ( \"year\" ) #and now plot the results plot = px . line ( cont_df , x = \"year\" , y = \"publications\" , color = \"contributor_verbs\" , facet_col = \"name\" , facet_col_wrap = 3 ) plot . show () if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});} window.PlotlyConfig = {MathJaxConfig: 'local'}; window.PLOTLYENV=window.PLOTLYENV || {}; if (document.getElementById(\"25efd650-69bd-4c0c-a99a-0ac3b03e67cd\")) { Plotly.newPlot( \"25efd650-69bd-4c0c-a99a-0ac3b03e67cd\", [{\"hovertemplate\":\"contributor_verbs=designed<br>name=Engineering<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"designed\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"designed\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x4\",\"y\":[861,1380,2414,3311,5723,8607,12057,13758,11558,12595,12113,12479],\"yaxis\":\"y4\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=designed<br>name=Biomedical And Clinical Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"designed\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"designed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x5\",\"y\":[15171,22400,30336,32837,37739,37973,38436,42895,47782,57381,65233,65204],\"yaxis\":\"y5\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=designed<br>name=Chemical Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"designed\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"designed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x6\",\"y\":[1126,1743,2589,3321,5394,7098,8799,10463,10236,10785,11830,12239],\"yaxis\":\"y6\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=designed<br>name=Biological Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"designed\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"designed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x\",\"y\":[15418,20917,26693,27837,33440,35520,33729,35763,38780,42364,46366,44778],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=designed<br>name=Agricultural, Veterinary And Food Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"designed\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"designed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x2\",\"y\":[998,1911,2786,3491,4636,5069,4840,5801,7137,8841,10029,10311],\"yaxis\":\"y2\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=designed<br>name=Health Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"designed\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"designed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x3\",\"y\":[2394,3761,5639,6487,7754,7309,6200,7204,8133,10177,11662,12023],\"yaxis\":\"y3\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=performed<br>name=Engineering<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"performed\",\"line\":{\"color\":\"#EF553B\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"performed\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x4\",\"y\":[961,1530,2679,3744,6452,9616,13196,14835,13299,15179,16083,18236],\"yaxis\":\"y4\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=performed<br>name=Biomedical And Clinical Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"performed\",\"line\":{\"color\":\"#EF553B\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"performed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x5\",\"y\":[17357,25847,33683,36752,41700,41245,40210,44682,49842,59821,70488,71837],\"yaxis\":\"y5\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=performed<br>name=Chemical Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"performed\",\"line\":{\"color\":\"#EF553B\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"performed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x6\",\"y\":[1184,1853,2807,3790,6142,8160,10075,11978,12247,13366,15509,17093],\"yaxis\":\"y6\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=performed<br>name=Biological Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"performed\",\"line\":{\"color\":\"#EF553B\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"performed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x\",\"y\":[16162,21609,27545,29167,34976,36986,34816,37081,40259,44639,49756,49706],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=performed<br>name=Agricultural, Veterinary And Food Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"performed\",\"line\":{\"color\":\"#EF553B\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"performed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x2\",\"y\":[1064,1995,2844,3506,4427,4807,4434,5127,6570,8393,9769,10397],\"yaxis\":\"y2\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=performed<br>name=Health Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"performed\",\"line\":{\"color\":\"#EF553B\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"performed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x3\",\"y\":[2624,3730,5232,5948,7099,6253,4717,5256,5796,7532,9487,9987],\"yaxis\":\"y3\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=wrote<br>name=Engineering<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"wrote\",\"line\":{\"color\":\"#00cc96\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"wrote\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x4\",\"y\":[830,1383,2444,3238,6378,9477,13145,15224,13598,15177,15348,16069],\"yaxis\":\"y4\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=wrote<br>name=Biomedical And Clinical Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"wrote\",\"line\":{\"color\":\"#00cc96\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"wrote\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x5\",\"y\":[15203,22498,29903,29987,37720,37785,37132,40874,45452,55566,65083,67174],\"yaxis\":\"y5\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=wrote<br>name=Chemical Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"wrote\",\"line\":{\"color\":\"#00cc96\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"wrote\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x6\",\"y\":[1133,1751,2617,3312,5785,7688,9153,10519,10474,11559,13148,14371],\"yaxis\":\"y6\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=wrote<br>name=Biological Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"wrote\",\"line\":{\"color\":\"#00cc96\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"wrote\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x\",\"y\":[15621,20979,26568,25920,34827,37581,35844,36387,39422,44009,48868,47377],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=wrote<br>name=Agricultural, Veterinary And Food Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"wrote\",\"line\":{\"color\":\"#00cc96\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"wrote\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x2\",\"y\":[964,1812,2643,2888,4420,4878,4635,5201,6455,8261,9783,10320],\"yaxis\":\"y2\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=wrote<br>name=Health Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"wrote\",\"line\":{\"color\":\"#00cc96\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"wrote\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x3\",\"y\":[2297,3741,5426,5821,7485,6832,5438,6185,7138,9203,10768,11829],\"yaxis\":\"y3\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=contributed<br>name=Engineering<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"contributed\",\"line\":{\"color\":\"#ab63fa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"contributed\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x4\",\"y\":[995,1713,2709,3959,6390,8435,10894,13186,13676,16534,19145,22579],\"yaxis\":\"y4\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=contributed<br>name=Biomedical And Clinical Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"contributed\",\"line\":{\"color\":\"#ab63fa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"contributed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x5\",\"y\":[12848,18930,25410,29421,32439,31477,29526,34023,39920,55927,75971,85951],\"yaxis\":\"y5\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=contributed<br>name=Chemical Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"contributed\",\"line\":{\"color\":\"#ab63fa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"contributed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x6\",\"y\":[1434,2485,3571,4661,5942,7461,9046,10895,12024,13883,16138,17814],\"yaxis\":\"y6\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=contributed<br>name=Biological Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"contributed\",\"line\":{\"color\":\"#ab63fa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"contributed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x\",\"y\":[10670,14811,18439,19533,21110,20114,16549,18066,20228,24463,31007,33158],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=contributed<br>name=Agricultural, Veterinary And Food Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"contributed\",\"line\":{\"color\":\"#ab63fa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"contributed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x2\",\"y\":[843,1509,2189,2818,3509,3298,2742,3384,4490,6012,8048,9865],\"yaxis\":\"y2\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=contributed<br>name=Health Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"contributed\",\"line\":{\"color\":\"#ab63fa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"contributed\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x3\",\"y\":[2893,4238,5994,7205,8505,8427,7747,9034,10432,14314,18237,21096],\"yaxis\":\"y3\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=approved<br>name=Engineering<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"approved\",\"line\":{\"color\":\"#FFA15A\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"approved\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x4\",\"y\":[535,917,1184,1490,2032,2656,3346,4466,5064,6484,9216,12405],\"yaxis\":\"y4\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=approved<br>name=Biomedical And Clinical Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"approved\",\"line\":{\"color\":\"#FFA15A\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"approved\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x5\",\"y\":[11419,15061,19200,23989,28659,31555,36414,44515,54008,74022,100388,111296],\"yaxis\":\"y5\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=approved<br>name=Chemical Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"approved\",\"line\":{\"color\":\"#FFA15A\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"approved\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x6\",\"y\":[146,302,475,514,1351,1784,2314,3821,4435,5092,6057,6490],\"yaxis\":\"y6\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=approved<br>name=Biological Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"approved\",\"line\":{\"color\":\"#FFA15A\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"approved\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x\",\"y\":[5317,5633,7234,8743,11703,14447,16099,19437,23871,29746,38263,39753],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=approved<br>name=Agricultural, Veterinary And Food Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"approved\",\"line\":{\"color\":\"#FFA15A\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"approved\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x2\",\"y\":[392,664,884,1241,1793,2486,2965,3977,5552,7611,10349,12235],\"yaxis\":\"y2\",\"type\":\"scatter\"},{\"hovertemplate\":\"contributor_verbs=approved<br>name=Health Sciences<br>year=%{x}<br>publications=%{y}<extra></extra>\",\"legendgroup\":\"approved\",\"line\":{\"color\":\"#FFA15A\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"approved\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022],\"xaxis\":\"x3\",\"y\":[4196,5338,6965,8417,9807,10504,11975,13948,16201,20847,26067,30030],\"yaxis\":\"y3\",\"type\":\"scatter\"}], {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,0.31999999999999995],\"title\":{\"text\":\"year\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,0.46499999999999997],\"title\":{\"text\":\"publications\"}},\"xaxis2\":{\"anchor\":\"y2\",\"domain\":[0.33999999999999997,0.6599999999999999],\"matches\":\"x\",\"title\":{\"text\":\"year\"}},\"yaxis2\":{\"anchor\":\"x2\",\"domain\":[0.0,0.46499999999999997],\"matches\":\"y\",\"showticklabels\":false},\"xaxis3\":{\"anchor\":\"y3\",\"domain\":[0.6799999999999999,0.9999999999999999],\"matches\":\"x\",\"title\":{\"text\":\"year\"}},\"yaxis3\":{\"anchor\":\"x3\",\"domain\":[0.0,0.46499999999999997],\"matches\":\"y\",\"showticklabels\":false},\"xaxis4\":{\"anchor\":\"y4\",\"domain\":[0.0,0.31999999999999995],\"matches\":\"x\",\"showticklabels\":false},\"yaxis4\":{\"anchor\":\"x4\",\"domain\":[0.5349999999999999,0.9999999999999999],\"matches\":\"y\",\"title\":{\"text\":\"publications\"}},\"xaxis5\":{\"anchor\":\"y5\",\"domain\":[0.33999999999999997,0.6599999999999999],\"matches\":\"x\",\"showticklabels\":false},\"yaxis5\":{\"anchor\":\"x5\",\"domain\":[0.5349999999999999,0.9999999999999999],\"matches\":\"y\",\"showticklabels\":false},\"xaxis6\":{\"anchor\":\"y6\",\"domain\":[0.6799999999999999,0.9999999999999999],\"matches\":\"x\",\"showticklabels\":false},\"yaxis6\":{\"anchor\":\"x6\",\"domain\":[0.5349999999999999,0.9999999999999999],\"matches\":\"y\",\"showticklabels\":false},\"annotations\":[{\"font\":{},\"showarrow\":false,\"text\":\"name=Biological Sciences\",\"x\":0.15999999999999998,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.46499999999999997,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{},\"showarrow\":false,\"text\":\"name=Agricultural, Veterinary And Food Sciences\",\"x\":0.49999999999999994,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.46499999999999997,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{},\"showarrow\":false,\"text\":\"name=Health Sciences\",\"x\":0.8399999999999999,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.46499999999999997,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{},\"showarrow\":false,\"text\":\"name=Engineering\",\"x\":0.15999999999999998,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.9999999999999999,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{},\"showarrow\":false,\"text\":\"name=Biomedical And Clinical Sciences\",\"x\":0.49999999999999994,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.9999999999999999,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{},\"showarrow\":false,\"text\":\"name=Chemical Sciences\",\"x\":0.8399999999999999,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.9999999999999999,\"yanchor\":\"bottom\",\"yref\":\"paper\"}],\"legend\":{\"title\":{\"text\":\"contributor_verbs\"},\"tracegroupgap\":0},\"margin\":{\"t\":60}}, {\"responsive\": true} ).then(function(){ var gd = document.getElementById('25efd650-69bd-4c0c-a99a-0ac3b03e67cd'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) };","title":"4. Author contributions to articles"},{"location":"tutorials/08-research_integrity/#5-repository-usage","text":"Now we'll take a look at how we can access the repositories data. Suppose we want to see the breadth of usage of specific repositories across work across funders and research orgs, to understand how wide the usage of the most common repositories is. %% bigquery repo_df -- the first two tables created by the WITH statements are needed to get full count of repositories based on names and URLs found WITH common_keywords AS ( SELECT kw , COUNT ( DISTINCT id ) AS pubs FROM ` dimensions - ai - integrity . data . trust_markers ` tm , UNNEST ( tm . data . data_locations . repositories ) kw GROUP BY 1 ), repositories AS ( SELECT id , kw , 'url' isin FROM ` dimensions - ai - integrity . data . trust_markers ` tm , UNNEST ( tm . data . data_locations . repository_urls ) url INNER JOIN common_keywords ON REGEXP_CONTAINS ( REPLACE ( url , '10.17632' , 'mendeley' ), LOWER ( kw )) UNION DISTINCT SELECT id , replace ( replace ( #replace( replace ( kw , 'open science framework' , 'osf' ), #'gene','geo'), 'gene expression omnibus' , 'geo' ), 'sequence read archive' , 'sra' ) kw , 'keyword' isin FROM ` dimensions - ai - integrity . data . trust_markers ` tm , UNNEST ( tm . data . data_locations . repositories ) kw WHERE kw != 'board' ), funders AS ( SELECT pubs . id AS pub_id , fund . grid_id AS funder_id FROM ` dimensions - ai . data_analytics . publications ` pubs , UNNEST ( funding_details ) fund WHERE pubs . year = 2021 ), orgs AS ( SELECT pubs . id AS pub_id , org FROM ` dimensions - ai . data_analytics . publications ` pubs , UNNEST ( research_orgs ) org WHERE pubs . year = 2021 ), combined AS ( SELECT rep . id , CASE WHEN REGEXP_CONTAINS ( rep . kw , 'github' ) THEN 'github' WHEN REGEXP_CONTAINS ( rep . kw , 'osf' ) THEN 'osf' WHEN REGEXP_CONTAINS ( rep . kw , 'ncbi' ) THEN 'ncbi' ELSE rep . kw END AS kw , f . funder_id AS funder , o . org AS ro FROM repositories rep INNER JOIN funders f ON rep . id = f . pub_id INNER JOIN orgs o ON rep . id = o . pub_id ) SELECT kw , COUNT ( DISTINCT funder ) AS funders , COUNT ( DISTINCT ro ) AS orgs , COUNT ( DISTINCT id ) AS pubs FROM combined GROUP BY 1 ORDER BY pubs DESC LIMIT 10 Query is running: 0%| | Downloading: 0%| | #see what we've got repo_df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } kw funders orgs pubs 0 ncbi 1858 7378 16104 1 github 1680 6787 13160 2 geo 1456 5115 8802 3 zenodo 1175 4828 6757 4 gene 1429 5311 6441 5 bioproject 1136 4369 5925 6 sra 1172 4292 5817 7 genbank 1025 4123 5019 8 figshare 1164 4422 4683 9 impact 1176 4649 3659 .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } const buttonEl = document.querySelector('#df-338dc8f7-c935-4eb7-b522-3c2c231be6f7 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-338dc8f7-c935-4eb7-b522-3c2c231be6f7'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['output_type'] = 'display_data'; await google.colab.output.renderOutput(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } #plot plot = px . scatter ( repo_df , x = \"funders\" , y = \"orgs\" , hover_data = [ \"kw\" ] ) plot . show () if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});} window.PlotlyConfig = {MathJaxConfig: 'local'}; window.PLOTLYENV=window.PLOTLYENV || {}; if (document.getElementById(\"6ec355be-87fa-4847-a2bb-2ce8b77e8d44\")) { Plotly.newPlot( \"6ec355be-87fa-4847-a2bb-2ce8b77e8d44\", [{\"customdata\":[[\"ncbi\"],[\"github\"],[\"geo\"],[\"zenodo\"],[\"gene\"],[\"bioproject\"],[\"sra\"],[\"genbank\"],[\"figshare\"],[\"impact\"]],\"hovertemplate\":\"funders=%{x}<br>orgs=%{y}<br>kw=%{customdata[0]}<extra></extra>\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[1858,1680,1456,1175,1429,1136,1172,1025,1164,1176],\"xaxis\":\"x\",\"y\":[7378,6787,5115,4828,5311,4369,4292,4123,4422,4649],\"yaxis\":\"y\",\"type\":\"scatter\"}], {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"funders\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"orgs\"}},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60}}, {\"responsive\": true} ).then(function(){ var gd = document.getElementById('6ec355be-87fa-4847-a2bb-2ce8b77e8d44'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) };","title":"5. Repository usage"}]}